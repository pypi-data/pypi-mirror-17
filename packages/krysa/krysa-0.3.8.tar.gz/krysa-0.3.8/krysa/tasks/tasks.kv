<SingleTI@TextInput>:
    multiline: False
    input_filter: app.root.address_chars

<FloatInput>:

<GreyLabel@Label>:
    canvas:
        Color:
            rgba: 0.7, 0.7, 0.7, 0.05
        Rectangle:
            size: self.size
            pos: self.pos

<FreqInput@FloatInput>:
    width: dp(90)
    size_hint_x: None
    hint_text: '< number'

<Task>:
    size_hint: 0.5, None
    pos_hint: {'center': [0.5, 0.5]}
    BoxLayout:
        id: taskbody
        orientation: 'vertical'
        Spinner:
            id: tablesel
            text: 'Choose data:'
            values: [child[0] for child in app.root.tables]
            size_hint_y: None
            height: dp(60)
            on_text:
                root.tablenum = root.get_table_pos(self.text, self.values)

        BoxLayout:
            id: container
            size_hint_y: None
            on_children: root.recalc_height(taskbody, self)

        BoxLayout:
            id: confirms
            size_hint_y: None
            height: dp(60)
            Button:
                text: 'Cancel'
                on_release: root.dismiss()

            Button:
                text: 'Run'
                disabled: True if tablesel.text == '' else False
                on_release: root.try_run()

<AddressLayout>:
    orientation: 'vertical'
    SingleTI:
        id: name

<SmallLargeLayout>:
    orientation: 'vertical'
    BoxLayout:
        Label:
            text: 'Address'

        SingleTI:
            id: name

    BoxLayout:
        Label:
            text: 'k ='

        SingleTI:
            id: order

    Label:
        text: 'Example: k=2 for the second smallest or largest value.'

<AvgsLayout>:
    orientation: 'vertical'
    BoxLayout:
        Label:
            text: 'Address'

        SingleTI:
            id: name

    BoxLayout:
        Label:
            text: 'p ='

        FloatInput:
            id: power
            multiline: False
            input_filter: root.floatfilter

    Label:
        text: 'Example: p=0 for the geometric mean\\np=1 for the arithmetic.'

<FreqLayout>:
    size_hint_y: None
    height: dp(200)
    orientation: 'vertical'
    BoxLayout:
        Label:
            text: 'Address'

        SingleTI:
            id: name

    BoxLayout:
        GreyLabel:
            text: 'Limits:'
            size_hint_x: 0.1

        BoxLayout:
            size_hint_x: 0.4
            BoxLayout:
                Label:
                    text: 'Auto'

                CheckBox:
                    id: limits_auto
                    size_hint_x: 0.25
                    active: True
                    on_active:
                        lowlimit.disabled = True if self.active else False
                        uplimit.disabled = True if self.active else False

        BoxLayout:
            size_hint_x: 0.5
            SingleTI:
                id: lowlimit
                disabled: True
                hint_text: 'Lower limit (default = min)'
                input_filter: 'float'

            SingleTI:
                id: uplimit
                disabled: True
                hint_text: 'Upper limit (default = max)'
                input_filter: 'float'

    BoxLayout:
        GreyLabel:
            text: 'Bins:'
            size_hint_x: 0.1

        Spinner:
            text: 'Count'
            size_hint_x: 0.2
            values: ['Count', 'Edges', 'Calculate']
            on_text:
                binmanager.transition.direction = 'up'
                binmanager.current = self.text

        ScreenManager:
            id: binmanager
            size_hint_x: 0.7
            Screen:
                name: 'Count'
                BoxLayout:
                    SingleTI:
                        id: bins
                        hint_text: 'Number of bins'
                        input_filter: 'int'

            Screen:
                name: 'Edges'
                BoxLayout:
                    ScrollView:
                        id: binscroll
                        size_hint_x: 0.9
                        do_scroll_y: False
                        GridLayout:
                            id: bingrid
                            rows: 1
                            size_hint_x: None
                            width: self.minimum_width
                            FreqInput:

                    Button:
                        text: '+'
                        size_hint_x: 0.1
                        on_release:
                            bingrid.add_widget(Factory.FreqInput())
                            binscroll.scroll_x = 1

            Screen:
                name: 'Calculate'
                BoxLayout:
                    Spinner:
                        id: binstr
                        text: 'auto'
                        value: 'auto'
                        su:
                            ['auto', 'fd', 'doane', 'scott',
                            'rice', 'sturges', 'sqrt']
                        values:
                            ['Automatic', 'Freedman Diaconis Estimator',
                            'Doane', 'Scott', 'Rice', 'Sturges', 'Square root']
                        on_text:
                            self.value = self.su[self.values.index(self.text)]

    BoxLayout:
        GreyLabel:
            text: 'Type:'
            size_hint_x: 0.1

        BoxLayout:
            size_hint_x: 0.9
            Label:
                text: 'absolute'

            CheckBox:
                id: absolute
                active: True

            Label:
                text: 'relative'

            CheckBox:
                id: relative
                active: True

            Label:
                text: 'cumulative'

            CheckBox:
                id: cumulative
                active: True

<SortLayout>:
    Spinner:
        id: sort_type
        text: 'Sort type'
        values: ['Ascending', 'Descending']

<AppendLayout>:
    orientation: 'vertical'
    BoxLayout:
        Spinner:
            id: what
            text: 'Append type'
            values: ['Rows', 'Columns']

        SingleTI:
            id: amount
            hint_text: 'amount'
            input_filter: 'int'

    BoxLayout:
        Label:
            text: 'Overwrite'

        CheckBox:
            id: overwrite
