Metadata-Version: 2.0
Name: pyquickhelper
Version: 1.4.1533
Summary: Various functionalities: folder synchronization, a logging function, helpers
Requires-Dist: IPython (>=5.0.0)
Requires-Dist: autopep8
Requires-Dist: babel (!=2.0)
Requires-Dist: coverage
Requires-Dist: docutils
Requires-Dist: entrypoints
Requires-Dist: ipykernel
Requires-Dist: ipython-genutils
Requires-Dist: ipywidgets
Requires-Dist: jupyter
Requires-Dist: jupyter-client
Requires-Dist: jupyter-console
Requires-Dist: jupyter-core
Requires-Dist: matplotlib
Requires-Dist: metakernel
Requires-Dist: multi-key-dict
Requires-Dist: nbconvert (>=4.2.0)
Requires-Dist: nbformat
Requires-Dist: nbpresent
Requires-Dist: notebook (>=4.2.0)
Requires-Dist: numpy (>=1.11.1)
Requires-Dist: pandas (>=0.18.1)
Requires-Dist: path.py
Requires-Dist: pickleshare
Requires-Dist: pycodestyle (>=2.0.0)
Requires-Dist: pyflakes
Requires-Dist: python-dateutil
Requires-Dist: requests
Requires-Dist: simplegeneric
Requires-Dist: sphinx (>=1.4.1)
Requires-Dist: sphinxcontrib-imagesvg
Requires-Dist: sphinxcontrib-jsdemo
Requires-Dist: sphinxjp.themes.revealjs
Requires-Dist: traitlets
Provides-Extra: jenkinshelper
Requires-Dist: python-jenkins; extra == 'jenkinshelper'
Requires-Dist: pyyaml; extra == 'jenkinshelper'

to generate documentation with sphinx, generation of code for Python 2.7 from Python 3
Home-page: http://www.xavierdupre.fr/app/pyquickhelper/helpsphinx/index.html
Author: Xavier Dupré
Author-email: xavier.dupre AT gmail.com
License: UNKNOWN
Download-URL: https://github.com/sdpython/pyquickhelper
Description: 
        
        .. _l-README:
        
        README
        ======
        
        .. image:: https://travis-ci.org/sdpython/pyquickhelper.svg?branch=master
            :target: https://travis-ci.org/sdpython/pyquickhelper
            :alt: Build status
            
        .. image:: https://ci.appveyor.com/api/projects/status/54vl69ssd8ud4l64?svg=true
            :target: https://ci.appveyor.com/project/sdpython/pyquickhelper
            :alt: Build Status Windows
            
        .. image:: https://badge.fury.io/py/pyquickhelper.svg
            :target: http://badge.fury.io/py/pyquickhelper
                
        .. image:: http://img.shields.io/pypi/dm/pyquickhelper.png
            :alt: PYPI Package
            :target: https://pypi.python.org/pypi/pyquickhelper
            
        .. image:: https://img.shields.io/badge/license-MIT-blue.svg
            :alt: MIT License
            :target: http://opensource.org/licenses/MIT
            
        .. image:: https://landscape.io/github/sdpython/pyquickhelper/master/landscape.svg?style=flat
           :target: https://landscape.io/github/sdpython/pyquickhelper/master
           :alt: Code Health
           
        .. image:: https://requires.io/github/sdpython/pyquickhelper/requirements.svg?branch=master
             :target: https://requires.io/github/sdpython/pyquickhelper/requirements/?branch=master
             :alt: Requirements Status
        
        .. image:: https://codecov.io/github/sdpython/pyquickhelper/coverage.svg?branch=master
            :target: https://codecov.io/github/sdpython/pyquickhelper?branch=master
            
        .. image:: http://img.shields.io/github/issues/sdpython/pyquickhelper.png
            :alt: GitHub Issues
            :target: https://github.com/sdpython/pyquickhelper/issues
            
        .. image:: https://badge.waffle.io/sdpython/pyquickhelper.png?label=ready&title=Ready
            :alt: Waffle
            :target: https://waffle.io/sdpython/pyquickhelper
            
        
        **Links:**
        
        * `GitHub/pyquickhelper <https://github.com/sdpython/pyquickhelper>`_
        * `documentation <http://www.xavierdupre.fr/app/pyquickhelper/helpsphinx/index.html>`_
        * `Blog <http://www.xavierdupre.fr/app/pyquickhelper/helpsphinx/blog/main_0000.html#ap-main-0>`_
        
        Functionalities
        ---------------
        
        * simple forms in notebooks
        * help generation including notebook conversion
        * folder synchronization
        * logging
        * help running unit tests
        * simple server to server sphinx documentation
        * file compression, zip, gzip, 7z
        * helpers for ipython notebooks (upgrade, offline run)
        * parser to quickly add a magic command in a notebook
        * Sphinx directives to integrate a blogpost in the documentation
        * mechanism to add forms in notebooks
        
        Design
        ------
        
        This project contains the following folders:
        
        * a source folder: *src*
        * a unit test folder: *_unittests*, go to this folder and run *run_unittests.py*
        * a folder: *_doc*, it will contain the documentation, a subfolder *_doc/sphinxdox/source/blog* contains blog post
          to communicate on the module
        * a file *setup.py* to build and to install the module, if the source were retrieve from GitHub,
          the script can also be called with the following extra options (*python setup.py <option>*):
          * clean_space: remove extra spaces in the code
          * build_sphinx: builds the documentation
          * unittests: run the unit tests, compute the code coverage    
        * a script *build_script.bat* which produces many script on Windows to easily run the setup,
          generate the documentation, run the unit tests.
        
        
        Examples
        --------
        
        Convert a notebook into slides:
        
        ::
        
            from pyquickhelper.helpgen import nb2slides
            nb2slides("nb.ipynb", "convert.slides.html")
            
        Merge two notebooks:
        
        ::
        
            from pyquickhelper.ipythonhelper import read_nb
            nb1 = read_nb("<file1>", kernel=False)
            nb2 = read_nb("<file2>", kernel=False)
            nb1.merge_notebook(nb2)
            nb1.to_json(outfile)
            
        Run a notebook:
        
        ::
        
            from pyquickhelper.ipythonhelper import run_notebook
            run_notebook("source.ipynb", working_dir="temp",
                        outfilename="modified.ipynb",
                        additional_path = [ "c:/temp/mymodule/src" ] )
        
        Run a command line program:
        
        ::
        
            from pyquickhelper.loghelper import run_cmd
            out,err = run_cmd("python setup.py install", wait=True)
            
        A sphinx extension to generate python documentation from a script:
        
        ::
        
            .. runpython::
                :showcode:
        
                import sys
                print("sys.version_info=", str(sys.version_info))
        
Keywords: pyquickhelper,synchronization,files,documentation,Xavier,Dupré
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 2
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Education
Classifier: License :: OSI Approved :: MIT License
Classifier: Development Status :: 5 - Production/Stable
