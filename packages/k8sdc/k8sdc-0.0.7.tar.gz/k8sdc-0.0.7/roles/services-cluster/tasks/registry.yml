---
- name: Create registry directory
  file:
    path:  /home/{{ admin_user }}/services-cluster/registry/
    state: directory
    owner: "{{ admin_user }}"
    group: "{{ admin_group }}"

- name: Copy registry files
  template:
    src: registry/registry-{{ item }}.yaml.j2
    dest: /home/{{ admin_user }}/services-cluster/registry/registry-{{ item }}.yaml
    owner: "{{ admin_user }}"
    group: "{{ admin_group }}"
  with_items:
    - pv
    - pvc
    - rc
    - svc

# Persistent Volume
- name: Create registry persistent volume if it does not currently exist
  command: kubectl create -f registry-pv.yaml
  args:
    chdir: /home/{{ admin_user }}/services-cluster/registry
  failed_when: false
  register: kubectl
  changed_when: "'already exists' not in kubectl.stderr"

- name: Replace registry persistent volume if it already exists
  command: kubectl replace -f registry-pv.yaml
  args:
    chdir: /home/{{ admin_user }}/services-cluster/registry
  when: not kubectl.changed

# Persistent Volume Claim
- name: Create registry persistent volume claim if it does not currently exist
  command: kubectl create -f registry-pvc.yaml
  args:
    chdir: /home/{{ admin_user }}/services-cluster/registry
  failed_when: false
  register: kubectl
  changed_when: "'already exists' not in kubectl.stderr"

- name: Replace registry persistent volume claim if it already exists
  command: kubectl replace -f registry-pvc.yaml
  args:
    chdir: /home/{{ admin_user }}/services-cluster/registry
  when: not kubectl.changed

# Replication Controller
- name: Create registry replication controller if it does not currently exist
  command: kubectl create -f registry-rc.yaml
  args:
    chdir: /home/{{ admin_user }}/services-cluster/registry
  failed_when: false
  register: kubectl
  changed_when: "'already exists' not in kubectl.stderr"

- name: Replace registry replication controller if it already exists
  command: kubectl replace -f registry-rc.yaml
  args:
    chdir: /home/{{ admin_user }}/services-cluster/registry
  when: not kubectl.changed

# Service
- name: Create registry service if it does not currently exist
  command: kubectl create -f registry-svc.yaml
  args:
    chdir: /home/{{ admin_user }}/services-cluster/registry
  failed_when: false
  register: kubectl
  changed_when: "'provided IP is already allocated' not in kubectl.stderr"

- name: Replace registry service if it already exists
  command: kubectl replace -f registry-svc.yaml
  args:
    chdir: /home/{{ admin_user }}/services-cluster/registry
  when: not kubectl.changed
