# -*- coding: utf-8 -*-
# Copyright (c) 2015, pyretis Development Team.
# Distributed under the GPLV3 License. See LICENSE for more info.
"""
pyretis - A simulation package for rare event simulations.
Copyright (C) 2015  The pyretis team

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
from codecs import open as openc
import os
from setuptools import setup, find_packages
import subprocess


def get_long_description():
    """Return the contents of README.rst"""
    here = os.path.abspath(os.path.dirname(__file__))
    # Get the long description from the README file
    long_description = ''
    with openc(os.path.join(here, 'README.rst'), encoding='utf-8') as fileh:
        long_description = fileh.read()
    return long_description


# For setting version. This is copied from Numpy's setup.py.
MAJOR = 0
MINOR = 10
MICRO = 8
ISRELEASED = True
VERSION = '{:d}.{:d}.{:d}'.format(MAJOR, MINOR, MICRO)
VERSION_FILE = os.path.join('pyretis', 'version.py')
VERSION_TXT = '''# -*- coding: utf-8 -*-
# Copyright (c) 2015, pyretis Development Team.
# Distributed under the GPLV3 License. See LICENSE for more info.
"""Version information for pyretis.

This file is generated by pyretis (``setup.py``)
"""
short_version = '{0:s}'
version = '{0:s}'
full_version = '{1:s}'
git_revision = '{2:s}'
release = {3:}

if not release:
    version = full_version
'''


def get_git_version():
    """Method to obtain the git revision as a string.

    This method is taken from Numpy's setup.py

    Returns
    -------
    git_revision : string
        The git revision, it the git revision could not be determined,
        a 'Unknown' will be returned.
    """
    git_revision = 'Unknown'
    try:
        env = {}
        for key in ('SYSTEMROOT', 'PATH'):
            val = os.environ.get(key)
            if val is not None:
                env[key] = val
        # LANGUAGE is used on win32
        env['LANGUAGE'] = 'C'
        env['LANG'] = 'C'
        env['LC_ALL'] = 'C'
        out = subprocess.Popen(['git', 'rev-parse', 'HEAD'],
                               stdout=subprocess.PIPE,
                               env=env).communicate()[0]
        git_revision = out.strip().decode('ascii')
    except OSError:
        git_revision = 'Unknown'

    return git_revision


def get_version_info():
    """Return the version number for pyretis.

    This method is taken from Numpy's setup.py.

    Returns
    -------
    full_version : string
        The full version string for this release.
    git_revision : string
        The git revision number.
    """
    if os.path.exists('.git'):
        git_revision = get_git_version()
    elif os.path.exists(VERSION_FILE):
        try:
            from pyretis.version import git_revision
        except ImportError:
            raise ImportError('Unable to import git_revision. Try removing '
                              'pyretis/version.py and the build directory '
                              'before building.')
    else:
        git_revision = 'Unknown'
    if not ISRELEASED:
        full_version = ''.join([VERSION, '.dev0+', git_revision[:7]])
    else:
        full_version = VERSION
    return full_version, git_revision


def write_version_py():
    """Create a file with the version info for pyretis.

    This method is taken from Numpy's setup.py.
    """
    full_version, git_revision = get_version_info()
    version_txt = VERSION_TXT.format(VERSION, full_version,
                                     git_revision, ISRELEASED)
    with open(VERSION_FILE, 'wt') as vfile:
        try:  # will work in python 3
            vfile.write(version_txt)
        except UnicodeEncodeError:  # for python 2
            vfile.write(version_txt.encode('utf-8'))
    return full_version


#FULL_VERSION = write_version_py()

setup(name='pyretis-cecam-2016',
      version='0.10.8',
      description='A simulation package for rare events',
      long_description=get_long_description(),
      url='http://www.pyretis.org',
      author='The pyretis team',
      author_email='pyretis@pyretis.org',
      license='GPLv3',
      classifiers=['Development Status :: 3 - Alpha',
                   'Environment :: Console',
                   'Intended Audience :: Science/Research',
                   ('License :: OSI Approved :: '
                    'GNU General Public License v3 (GPLv3)'),
                   'Natural Language :: English',
                   'Operating System :: MacOS :: MacOS X',
                   'Operating System :: POSIX',
                   'Programming Language :: Python :: 3',
                   'Programming Language :: Python :: 3.2',
                   'Programming Language :: Python :: 3.3',
                   'Programming Language :: Python :: 3.4',
                   'Programming Language :: Python :: 3.5',
                   'Topic :: Scientific/Engineering :: Physics'],
      keywords='simulation TIS RETIS',
      include_package_data = True,
      packages=find_packages(exclude=['docs']),
      install_requires=['numpy>=1.6.0',
                        'scipy>=0.13.3',
                        #'matplotlib>=1.3',
                        'jinja2>=2.7.2',
                        'docutils>=0.11',
                        'tqdm>=4.7.0'])
