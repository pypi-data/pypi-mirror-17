# -*- coding: utf-8 -*-
import uuid
from time import strftime, gmtime

from edxml.EDXMLWriter import EDXMLWriter

class EventSource(object):
  """
  Class representing an EDXML event source
  """

  def __init__(self, Id, Url, Description = None, AcquisitionDate = None):

    self._attr = {
      'source-id':     str(Id),
      'url':           str(Url).rstrip('/') + '/',
      'description':   str(Description) if Description else 'undescribed source',
      'date-acquired': str(AcquisitionDate) if AcquisitionDate else strftime("%Y%m%d", gmtime())
    }

  @classmethod
  def Create(cls, Url, Description = None, AcquisitionDate = None):
    """

    Creates a new event source definition. If no acquisition date
    is specified, it will be assumed that the acquisition date
    is today.

    Note:
      Choose your source URLs wisely. The source URLs are used in
      sticky hash computations, so changing the URL may have quite
      a few consequences if the hash is referred to anywhere. Also,
      pay attention to the URL in the context of URLs generated by
      other EDXML data sources, to obtain a consistent, well structured
      source URL tree.

    Args:
     Url (str): The source URL
     Description (str): Description of the source
     AcquisitionDate (str): Acquisition date in format yyyymmdd

    Returns:
      EventSource:
    """

    return cls(uuid.uuid4(), Url, Description, AcquisitionDate)

  def GetId(self):
    """

    Returns the source Id

    Returns:
      str:
    """
    return self._attr['source-id']

  def GetUrl(self):
    """

    Returns the source URL

    Returns:
      str:
    """
    return self._attr['url']

  def GetAcquisitionDateString(self):
    """

    Returns the acquisition date

    Returns:
      str: The date in yyyymmdd format
    """

    return self._attr['date-acquired']

  def SetDescription(self, Description):
    """

    Sets the source description

    Args:
      Description (str): Description

    Returns:
      EventSource: The EventSource instance
    """

    self._attr['description'] = str(Description)
    return self

  def Write(self, Writer):
    """

    Writes the event source into the provided
    EDXMLWriter instance

    Args:
      Writer (EDXMLWriter): EDXMLWriter instance

    Returns:
      EventSource: The EventSource instance
    """

    Writer.AddSource(self._attr['source-id'], self._attr['url'], self._attr['date-acquired'], self._attr['description'])
    return self
