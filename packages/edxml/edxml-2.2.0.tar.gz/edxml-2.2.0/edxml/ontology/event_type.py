# -*- coding: utf-8 -*-

from edxml.EDXMLWriter import EDXMLWriter

class EventType(object):
  """
  Class representing an EDXML event type
  """

  def __init__(self, Name, DisplayName = None, Description = None, ClassList ='',
               ReporterShort ='no description available', ReporterLong ='no description available', Parent = None):

    self._attr = {
      'name': Name,
      'display-name'   : DisplayName or ' '.join(('%s/%s' % (Name, Name)).split('-')),
      'description'    : Description or Name,
      'classlist'      : ClassList,
      'reporter-short' : ReporterShort,
      'reporter-long'  : ReporterLong
    }

    self._properties = {} # :type Dict[EventProperty]
    self._relations = []  # :type List[PropertyRelation]
    self._parent = Parent # :type EventTypeParent

  @classmethod
  def Create(cls, Name, DisplayNameSingular = None, DisplayNamePlural = None, Description = None):
    """
    
    Creates and returns a new EventType instance. When no display
    names are specified, display names will be created from the
    event type name. If only a singular form is specified, the
    plural form will be auto-generated by appending an 's'.
    
    Args:
      Name (str): Event type name 
      DisplayNameSingular (str): Display name (singular form)
      DisplayNamePlural (str): Display name (plural form)
      Description (str): Event type description

    Returns:
      EventType: The EventType instance
    """
    if DisplayNameSingular:
      DisplayName = '%s/%s' % (DisplayNameSingular, DisplayNamePlural if DisplayNamePlural else '%ss' % DisplayNameSingular)
    else:
      DisplayName = None

    return cls(Name, DisplayName, Description)

  def GetName(self):
    """

    Returns the event type name

    Returns:
      str:
    """
    return self._attr['name']

  def GetDisplayNameSingular(self):
    """

    Returns the event type display name, in singular form.

    Returns:
      str:
    """
    return self._attr['display-name'].split('/')[0]

  def GetDisplayNamePlural(self):
    """

    Returns the event type display name, in plural form.

    Returns:
      str:
    """
    return self._attr['display-name'].split('/')[1]

  def GetClasses(self):
    """

    Returns the list of classes that this event type
    belongs to.

    Returns:
      list[str]:
    """
    return self._attr['classlist'].split(',')

  def GetProperty(self, PropertyName):
    """

    Returns the property instance of the event type
    property having specified name.

    Returns:
       EventProperty: The EventProperty instance
    """
    return self._properties[PropertyName]

  def GetProperties(self):
    """

    Returns a dictionary containing all properties
    of the event type. The keys in the dictionary
    are the property names, the values are the
    EDXMLProperty instances.

    Returns:
       dict[str,EventProperty]: Properties
    """
    return self._properties

  def HasClass(self, ClassName):
    """

    Returns True if specified class is in the list of
    classes that this event type belongs to, return False
    otherwise.

    Args:
      ClassName (str): The class name

    Returns:
      bool:
    """
    return ClassName in self._attr['classlist'].split(',')

  def GetReporterShort(self):
    """

    Returns the short reporter string.

    Returns:
      str:
    """
    return self._attr['reporter-short']

  def GetReporterLong(self):
    """

    Returns the long reporter string.

    Returns:
      str:
    """
    return self._attr['reporter-long']

  def AddProperty(self, Property):
    """

    Add specified property

    Args:
      Property (EventProperty): EventProperty instance

    Returns:
      EventType: The EventType instance
    """
    self._properties[Property.GetName()] = Property

    return self

  def AddRelation(self, Relation):
    """

    Add specified property relation

    Args:
      Relation (PropertyRelation): Property relation

    Returns:
      EventType: The EventType instance
    """
    self._relations.append(Relation)

    return self

  def SetDescription(self, Description):
    """

    Sets the event type description

    Args:
      Description (str): Description

    Returns:
      EventType: The EventType instance
    """

    self._attr['description'] = str(Description)
    return self

  def SetParent(self, Parent):
    """

    Set the parent event type

    Args:
      Parent (EventTypeParent): Parent event type

    Returns:
      EventType: The EventType instance
    """
    self._parent = Parent

    return self

  def AddClass(self, ClassName):
    """

    Adds the specified event type class

    Args:
      ClassName (str):

    Returns:
      EventType: The EventType instance
    """
    if ClassName:
      if self._attr['classlist'] == '':
        self._attr['classlist'] = ClassName
      else:
        self._attr['classlist'] = ','.join(list(set(self._attr['classlist'].split(',') + [ClassName])))
    return self

  def SetName(self, EventTypeName):
    """

    Sets the name of the event type.

    Args:
     EventTypeName (str): Event type name
    Returns:
      EventType: The EventType instance
    """
    self._attr['name'] = EventTypeName

    return self

  def SetDisplayName(self, Singular, Plural = None):
    """

    Configure the display name. If the plural form
    is omitted, it will be auto-generated by
    appending an 's' to the singular form.

    Args:
      Singular (str): Singular display name
      Plural (str): Plural display name

    Returns:
      EventType: The EventType instance
    """

    if Plural is None:
      Plural = '%ss' % Singular
    self._attr['display-name'] = '%s/%s' % (Singular, Plural)

    return self

  def SetReporterShort(self, Reporter):
    """
    
    Set the short reporter string
    
    Args:
      Reporter (str): The short reporter string 

    Returns:
      EventType: The EventType instance
    """

    if Reporter:
      self._attr['reporter-short'] = Reporter
    return self

  def SetReporterLong(self, Reporter):
    """

    Set the long reporter string

    Args:
      Reporter (str): The long reporter string 

    Returns:
      EventType: The EventType instance
    """

    if Reporter:
      self._attr['reporter-long'] = Reporter
    return self

  def Write(self, Writer):
    """

    Writes the event type into the provided
    EDXMLWriter instance

    Args:
      Writer (EDXMLWriter): EDXMLWriter instance

    Returns:
      EventType: The EventType instance
    """

    Writer.OpenEventDefinition(self._attr['name'], self._attr['description'],self._attr['classlist'],self._attr['reporter-short'], self._attr['reporter-long'],self._attr['display-name'])
    if self._parent:
      self._parent.Write(Writer)
    Writer.OpenEventDefinitionProperties()
    for Property in self._properties.values():
      Property.Write(Writer)
    Writer.CloseEventDefinitionProperties()
    Writer.OpenEventDefinitionRelations()
    for Relation in self._relations:
      Relation.Write(Writer)
    Writer.CloseEventDefinitionRelations()
    Writer.CloseEventDefinition()
    return self
