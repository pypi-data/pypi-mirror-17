#!python

"""Test different diversifying pressure models with ``phydms``.

Written by Jesse Boom. 
Edited by Sarah Hilton."""


import sys
import os
import re
import time
import logging
import multiprocessing
import subprocess
import signal
import Bio.Alphabet.IUPAC
import Bio.Phylo
import dms_tools.file_io
import phydmslib
import phydmslib.file_io
import phydmslib.parsearguments
import random

def randomizeDivpressure(divpressureFile,numberRandomizations,outprefix,seed):
    """Randomizes the diversifying pressures value the number of times specified by the user
       Each randomization is written to a file in the directory 'randomFiles'
       Returns a list of the new file names 
    """
    outdir = os.path.dirname(outprefix+"randomizedFiles/")
    if outdir:
        if not os.path.isdir(outdir):
            if os.path.isfile(outdir):
                os.remove(outdir)
            os.mkdir(outdir)
    fileList = []
    with open(divpressureFile) as f:
        lines = [line.split() for line in f.readlines() if not line.isspace() and line[0] != '#']
    assert all([len(line) == 2 for line in lines])
    sites = [tup[0] for tup in lines]
    divpressures = [tup[1] for tup in lines]
    for increase in range(int(numberRandomizations)):
        random.seed(seed+increase)
        random.shuffle(divpressures)
        randomDivpressureFile = outdir+'/%s_random_%s.txt' %((divpressureFile.split(".")[-2]), str(seed+increase))
        with open(randomDivpressureFile, 'w') as f:
            f.write('\n'.join('{0} {1}'.format(site, dp) for (site, dp) in zip(sites, divpressures)))
        fileList.append(randomDivpressureFile)
    return fileList

def tabulateResults(fileList, modelComparisonName):
    """
    Creates a csv summarizes the results from each model
    """
    finalOutput = []
    finalOutput.append("Name,DiversifyingPressureName,DiversifyingPressureType,LogLikelihood,omega,omega2,kappa,beta,phiA,phiC,phiG\n")
    for fname in fileList:
        newLine = getResultsFromOneRun(fname)
        finalOutput.append(newLine)
    #no diversifying pressure
    with open(modelComparisonName,'wb') as f:
        for item in finalOutput:
            f.write(item)
            
def getResultsFromOneRun(fname):
    name = os.path.basename(fname)
    with open(fname + "_modelparams.txt") as f:
        modelparamstext = f.read()
        kappa = re.search('123_K80.kappa = (\d+\.\d+)', modelparamstext).group(1)
        omega = float(re.search('omega = (\d+\.\d+)', modelparamstext).group(1))
        if re.search('omega2 = (\d+\.\d+)', modelparamstext):
            omega2 = float(re.search('omega2 = (\d+\.\d+)', modelparamstext).group(1))
        elif re.search('omega2 = (-\d+\.\d+)', modelparamstext):
            omega2 = float(re.search('omega2 = (-\d+\.\d+)', modelparamstext).group(1))
        else:
            omega2 = "N/A"
        beta = float(re.search('stringencyparameter = (\d+\.\d+)', modelparamstext).group(1))
        theta = float(re.search('123_Full.theta = (\d+\.\d+)', modelparamstext).group(1))
        theta1 = float(re.search('123_Full.theta1 = (\d+\.\d+)', modelparamstext).group(1))
        theta2 = float(re.search('123_Full.theta2 = (\d+\.\d+)', modelparamstext).group(1))
    phiA = theta1 * (1.0 - theta)
    phiC = (1.0 - theta2) * theta
    phiG = theta * theta2
    with open(fname + "_loglikelihood.txt") as f:
        loglikelihoodtext = f.read()
        if re.search('log likelihood = (-\d+\.\d+)', loglikelihoodtext):
            LL = float(re.search('log likelihood = (-\d+\.\d+)', loglikelihoodtext).group(1))
        elif re.search('log likelihood = (-\d+)', loglikelihoodtext):
            LL = float(re.search('log likelihood = (-\d+)', loglikelihoodtext).group(1))
        else:
            print "Couldn't find a Log likelihood for %s" %(file+"_loglikelihood.txt")
    if "noDiversifyingpressure" in name:
        type = "none"
        divpressureName = "none"
    elif "random" in name:
        type = "random"
        divpressureName = "_".join(name.split("_")[:-2])
    else:
        type = "true"
        divpressureName = name
    newLine= ",".join([str(x) for x in [fname,divpressureName,type,LL, omega, omega2, kappa, beta, phiA, phiC, phiG]])+"\n"
    return newLine
    
def RunCmds(cmds):
    """Runs the command line arguments in *cmds* using *subprocess*."""
    try:
        p = subprocess.Popen(cmds, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        pid = p.pid
        (stdout, stderr) = p.communicate()
    except:
        os.kill(pid, signal.SIGTERM)

def setupMultiprocessing(cmds, pool, outprefixes, completed, started, modelname):
    """Given a command, updates the pool, outprefixes, completed, and started dictionaries"""
    pool[modelname] = multiprocessing.Process(target=RunCmds, args=(cmds,))
    outprefixes[modelname] = modelname
    completed[modelname] = False
    started[modelname] = False
    return pool,outprefixes,completed, started

def main():
    """Main body of script."""

    # Parse command line arguments
    parser = phydmslib.parsearguments.PhyDMSTestdivpressureParser()
    args = vars(parser.parse_args())
    prog = parser.prog
    
    #check to make sure the string "random" is not in any of the divpressure files names
    for divpressureFile in args["divpressure"]:
        assert "random" not in divpressureFile, "Remove 'random' from %s name" %(divpressureFile)
        assert "noDiversifyingpressure" not in divpressureFile, "Remove 'noDiversifyingpressure' from %s name" %(divpressureFile)

#create output directory if needed
    outdir = os.path.dirname(args['outprefix'])
    if outdir:
        if not os.path.isdir(outdir):
            if os.path.isfile(outdir):
                os.remove(outdir)
            os.mkdir(outdir)        
            
    #log, list of outputfiles and other "universal" strings
    filesuffixlist = ['.log', '_tree.newick', '_loglikelihood.txt', '_modelparams.txt']
    # file names slightly different depending on whether outprefix is directory or file
    if args['outprefix'][-1] == '/':
        logfile = "%slog.log" % args['outprefix']
    else:
        logfile = "%s.log" % args['outprefix']
        args['outprefix'] = '%s_' % args['outprefix']
    ExpCMmodel = "ExpCM_" + args["prefsfile"] 
    modelOutputprefixList = []   
    modelcomparisonfile = args["outprefix"] + "modelcomparison.csv"
    
    

    
    #Set up to log everything to logfile.
    if os.path.isfile(logfile):
        os.remove(logfile)
    logging.shutdown()
    versionstring = phydmslib.file_io.Versions() 
    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
    logger = logging.getLogger(prog)
    logfile_handler = logging.FileHandler(logfile)
    logger.addHandler(logfile_handler)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    logfile_handler.setFormatter(formatter)

#     #print some basic information
    logger.info('Beginning execution of %s in directory %s\n' % (prog, os.getcwd()))
    logger.info('Progress is being logged to %s\n' % logfile)
    logger.info("%s\n" % versionstring)
    logger.info('Parsed the following command-line arguments:\n%s\n' % '\n'.join(['\t%s = %s' % tup for tup in args.iteritems()]))

    #check alignment
    logger.info('Checking that the alignment {0} is valid...'.format(args['alignment']))
    alignment = phydmslib.file_io.ReadCodonAlignment(args['alignment'], checknewickvalid=True)
    logger.info('Valid alignment specifying {0} sequences of length {1}.\n'.format(len(alignment), len(alignment[0][1])))
    
    #setting up cpus
    if args['ncpus'] == -1:
        try:
            args['ncpus'] = multiprocessing.cpu_count()
        except:
            raise RuntimeError("Encountered a problem trying to dynamically determine the number of available CPUs. Please manually specify the number of desired CPUs with '--ncpus' and try again.")
        logger.info('Will use all %d available CPUs.\n' % args['ncpus'])
    assert args['ncpus'] >= 1, "Failed to specify valid number of CPUs"
        
    #set up dictionaries to track multi-process calls
    pool = {} # holds process for model name
    started = {} # holds whether process started for model name
    completed = {} # holds whether process completed for model name
    outprefixes = {} # holds outprefix for model name
    
    try:
            
        #first estimate tree with phydms using YNGKP_M0 model
        modelname = 'YNGKP_M0'
        outprefix = "%s%s" % (args['outprefix'], modelname)
        treefile = '%s_tree.newick' % outprefix
        if args['treetopology']:
            cmds = ['phydms', args['alignment'], args['treetopology'], modelname, outprefix]
            logger.info('Optimizing tree in %s using the %s model. The command is: %s' % (model, args['treetopology'], ' '.join(cmds)))
        else:
            cmds = ['phydms', args['alignment'], 'nj', modelname, outprefix, '--infertopology']
            logger.info('Inferring topology using the %s model starting from a simple neighbor joining tree. The command is: %s' % (modelname, ' '.join(cmds)))
        subprocess.check_call(cmds)
        for fname in [outprefix + suffix for suffix in filesuffixlist]:
            if not os.path.isfile(fname):
                raise RuntimeError("phydms failed to created expected output file %s." % fname)
            logger.info("Found expected output file %s" % fname)
        logger.info('Analysis successful for %s\n' % modelname)
        assert os.path.isfile(treefile)
         
        #Then optimize the tree using ExpCM without diversifying pressure and update treefile
        modelOutprefix = args["outprefix"]+"noDiversifyingpressure"
        cmds = ['phydms', args['alignment'], treefile, ExpCMmodel, modelOutprefix, '--ncpus', "1"]
        logger.info('Starting analysis. The command is: %s\n' % (' '.join(cmds)))
        subprocess.check_call(cmds)
        for fname in [modelOutprefix + suffix for suffix in filesuffixlist]:
            if not os.path.isfile(fname):
                raise RuntimeError("phydms failed to created expected output file %s." % fname)
            logger.info("Found expected output file %s" % fname)
        logger.info('Analysis successful for %s\n' % modelOutprefix)
        assert os.path.isfile(treefile)
        treefile = '%s_tree.newick' % modelOutprefix 
        modelOutputprefixList.append(modelOutprefix)


        #run the various divpresssure scenarios (true, random)
        for divpressureFile in args["divpressure"]:
            modelOutprefix = args["outprefix"] + os.path.splitext(os.path.basename(divpressureFile))[0]
            cmds = ['phydms', args['alignment'], treefile, ExpCMmodel, modelOutprefix, '--divpressure', divpressureFile, '--ncpus', "1", '--fixbrlen','--addrateparameter']
            logger.info('Starting analysis. The command is: %s\n' % (' '.join(cmds)))
            pool, outprefixes, completed, started = setupMultiprocessing(cmds, pool, outprefixes, completed, started, modelOutprefix)
            modelOutputprefixList.append(modelOutprefix)
            if args["randomizations"]:
                randomFileList = randomizeDivpressure(divpressureFile,args["randomizations"],args["outprefix"], args["randomseed"])
                for file in randomFileList:
                    modelOutprefix = args["outprefix"] + os.path.splitext(os.path.basename(file))[0]
                    if args["optimizebrlen"]:
                    	cmds = ['phydms', args['alignment'], treefile, ExpCMmodel, modelOutprefix, '--divpressure', file,'--ncpus', "1"]
                    else:
                    	cmds = ['phydms', args['alignment'], treefile, ExpCMmodel, modelOutprefix, '--divpressure', file,'--ncpus', "1",'--fixbrlen','--addrateparameter']
                    pool, outprefixes, completed, started= setupMultiprocessing(cmds, pool, outprefixes, completed, started, modelOutprefix)
                    modelOutputprefixList.append(modelOutprefix)
                    
# remove existing output files
        outfiles = []
        removed = []
        for modelname in modelOutputprefixList:
            if "noDiversifyingpressure" not in modelname:
                for suffix in filesuffixlist:
                    fname = "%s%s" % (modelname, suffix)
                    outfiles.append(fname)
        for fname in [modelcomparisonfile]:
            if os.path.isfile(fname):
                os.remove(fname)
                removed.append(fname)
        for fname in outfiles:
            if os.path.isfile(fname):
                os.remove(fname)
                removed.append(fname)
        if removed:
            logger.info('Removed the following existing files that have names that match the names of output files that will be created: %s\n' % ', '.join(removed))
            
    #Running the different scenarios
        while not all(completed.values()):
            nrunning = started.values().count(True) - completed.values().count(True)
            if nrunning < args['ncpus']:
                for (modelname, p) in pool.items():
                    if not started[modelname]:
                        p.start()
                        started[modelname] = True
                        break
            for (modelname, p) in pool.items():
                if started[modelname] and (not completed[modelname]) and (not p.is_alive()): # process just completed
                    completed[modelname] = True
                    for fname in [outprefixes[modelname] + suffix for suffix in filesuffixlist]:
                        if not os.path.isfile(fname):
                            raise RuntimeError("phydms failed to created expected output file %s." % fname)
                    logger.info('Analysis successful for %s\n' % modelname)
            time.sleep(1)


    #make sure all expected output files are there
        for fname in outfiles:
            if not os.path.isfile(fname):
                raise RuntimeError("Cannot find expected output file %s" % fname)
                 
        # tabulate model comparison
        logger.info("Tabulating model comparisons and writing to %s" % modelcomparisonfile)
        tabulateResults(modelOutputprefixList, modelcomparisonfile)
        with open(modelcomparisonfile) as f:
            modelcomparisontext = f.read()
        logger.info("Here are the results of the model comparison:\n\t%s" % modelcomparisontext.replace('\n', '\n\t'))
        
    except:
        logger.exception('Terminating %s at %s with ERROR' % (prog, time.asctime()))
    else:
        logger.info('Successful completion of %s' % prog)
    finally:
        logging.shutdown()
        for p in pool.values():
            if p.is_alive():
                p.terminate()



    
if __name__ == '__main__':
    main() # run the script
