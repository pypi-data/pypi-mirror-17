{
	"version": 3,
	"file": "D:/activ_tosh/geatec/numscrypt/numscrypt/development/automated_tests/ndarray/module_fft/__javascript__/module_fft.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/numscrypt/numscrypt/development/automated_tests/ndarray/module_fft/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import *\nfrom org.transcrypt.stubs.browser import __main__, __envir__, __pragma__\n\nfrom math import sin, cos, pi\n\ntranspiled = __envir__.executor_name == __envir__.transpiler_name\n\n\n# Imports for Transcrypt, resolved run time\nif __envir__.executor_name == __envir__.transpiler_name:\n\timport numscrypt as num\n\timport numscrypt.fft as fft\n\n# Imports for CPython, resolved compile time\n__pragma__ ('skip')\nimport numpy as num\nimport numpy.fft as fft\n__pragma__ ('noskip')\n\nfSample = 4096\ntTotal = 2\nfSin = 30\nfCos = 50\n\ndef getNow ():\t# Avoid operator overloading, which would result in the dysfunctional: __new__ __call__ (Date)\n\treturn __new__ (Date ())\n\ndef tCurrent (iCurrent):\n\treturn iCurrent / fSample\n\ndef run (autoTester):\n\tcut = 102\n\tautoTester.check ('Samples computed: {}<br>'.format (tTotal  * fSample))\n\tautoTester.check ('Samples shown: {}<br>'.format (cut))\n\n\torig = num.array ([\n\t\tcomplex (0.3 + sin (2 * pi * fSin * t) + 0.5 * cos (2 * pi * fCos * t), 0)\n\t\tfor t in [\n\t\t\tiSample / fSample\n\t\t\tfor iSample in range (tTotal * fSample)\n\t\t]\n\t], 'complex128')\n\t\n\t__pragma__ ('opov')\n\n\tdelta = 0.001 + 0.001j\n\tautoTester.check ('Original samples', num.round (orig + delta, 3) .tolist ()[ : cut], '<br>')\n\n\tif transpiled:\n\t\ttimeStartFft = getNow ()\n\tfreqs = fft.fft (orig)\n\tif transpiled:\n\t\ttimeStopFft = getNow ()\t\n\t\t\n\tautoTester.check ('Frequencies', num.round (freqs + delta, 3) .tolist ()[ : cut], '<br>')\n\t\n\tif transpiled:\n\t\ttimeStartIfft = getNow ()\t\n\treconstr = fft.ifft (freqs)\n\tif transpiled:\n\t\ttimeStopIfft = getNow ()\t\n\t\n\tautoTester.check ('Reconstructed samples', num.round (reconstr + delta, 3) .tolist ()[ : cut], '<br>')\n\t\n\t__pragma__ ('noopov')\n\t\t\n\tif transpiled:\n\t\tprint ('FFT for {} samples took {} ms'.format (tTotal * fSample, timeStopFft - timeStartFft))\n\t\tprint ('IFFT for {} samples took {} ms'.format (tTotal * fSample, timeStopIfft - timeStartIfft))\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AAAA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAAA;AAAA;AAAA;AASA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}