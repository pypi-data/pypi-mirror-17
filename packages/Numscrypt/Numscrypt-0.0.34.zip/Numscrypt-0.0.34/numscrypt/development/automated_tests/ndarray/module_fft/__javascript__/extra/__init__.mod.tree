file: Module 
	body: list 
		element: ImportFrom 
			module: str = org.transcrypt.stubs.browser
			names: list 
				element: alias 
					name: str = *
					asname: NoneType = None
			level: int = 0
		element: ImportFrom 
			module: str = org.transcrypt.stubs.browser
			names: list 
				element: alias 
					name: str = __main__
					asname: NoneType = None
				element: alias 
					name: str = __envir__
					asname: NoneType = None
				element: alias 
					name: str = __pragma__
					asname: NoneType = None
			level: int = 0
		element: ImportFrom 
			module: str = math
			names: list 
				element: alias 
					name: str = sin
					asname: NoneType = None
				element: alias 
					name: str = cos
					asname: NoneType = None
				element: alias 
					name: str = pi
					asname: NoneType = None
			level: int = 0
		element: Assign 
			targets: list 
				element: Name 
					id: str = transpiled
					ctx: Store 
			value: Compare 
				left: Attribute 
					value: Name 
						id: str = __envir__
						ctx: Load 
					attr: str = executor_name
					ctx: Load 
				ops: list 
					element: Eq 
				comparators: list 
					element: Attribute 
						value: Name 
							id: str = __envir__
							ctx: Load 
						attr: str = transpiler_name
						ctx: Load 
		element: If 
			test: Compare 
				left: Attribute 
					value: Name 
						id: str = __envir__
						ctx: Load 
					attr: str = executor_name
					ctx: Load 
				ops: list 
					element: Eq 
				comparators: list 
					element: Attribute 
						value: Name 
							id: str = __envir__
							ctx: Load 
						attr: str = transpiler_name
						ctx: Load 
			body: list 
				element: Import 
					names: list 
						element: alias 
							name: str = numscrypt
							asname: str = num
				element: Import 
					names: list 
						element: alias 
							name: str = numscrypt.fft
							asname: str = fft
			orelse: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = skip
				keywords: list 
		element: Import 
			names: list 
				element: alias 
					name: str = numpy
					asname: str = num
		element: Import 
			names: list 
				element: alias 
					name: str = numpy.fft
					asname: str = fft
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = noskip
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = fSample
					ctx: Store 
			value: Num 
				n: int = 4096
		element: Assign 
			targets: list 
				element: Name 
					id: str = tTotal
					ctx: Store 
			value: Num 
				n: int = 2
		element: Assign 
			targets: list 
				element: Name 
					id: str = fSin
					ctx: Store 
			value: Num 
				n: int = 30
		element: Assign 
			targets: list 
				element: Name 
					id: str = fCos
					ctx: Store 
			value: Num 
				n: int = 50
		element: FunctionDef 
			name: str = getNow
			args: arguments 
				args: list 
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Return 
					value: Call 
						func: Name 
							id: str = __new__
							ctx: Load 
						args: list 
							element: Call 
								func: Name 
									id: str = Date
									ctx: Load 
								args: list 
								keywords: list 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = tCurrent
			args: arguments 
				args: list 
					element: arg 
						arg: str = iCurrent
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Return 
					value: BinOp 
						left: Name 
							id: str = iCurrent
							ctx: Load 
						op: Div 
						right: Name 
							id: str = fSample
							ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = run
			args: arguments 
				args: list 
					element: arg 
						arg: str = autoTester
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = cut
							ctx: Store 
					value: Num 
						n: int = 102
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Str 
										s: str = Samples computed: {}<br>
									attr: str = format
									ctx: Load 
								args: list 
									element: BinOp 
										left: Name 
											id: str = tTotal
											ctx: Load 
										op: Mult 
										right: Name 
											id: str = fSample
											ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Str 
										s: str = Samples shown: {}<br>
									attr: str = format
									ctx: Load 
								args: list 
									element: Name 
										id: str = cut
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = orig
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = num
								ctx: Load 
							attr: str = array
							ctx: Load 
						args: list 
							element: ListComp 
								elt: Call 
									func: Name 
										id: str = complex
										ctx: Load 
									args: list 
										element: BinOp 
											left: BinOp 
												left: Num 
													n: float = 0.3
												op: Add 
												right: Call 
													func: Name 
														id: str = sin
														ctx: Load 
													args: list 
														element: BinOp 
															left: BinOp 
																left: BinOp 
																	left: Num 
																		n: int = 2
																	op: Mult 
																	right: Name 
																		id: str = pi
																		ctx: Load 
																op: Mult 
																right: Name 
																	id: str = fSin
																	ctx: Load 
															op: Mult 
															right: Name 
																id: str = t
																ctx: Load 
													keywords: list 
											op: Add 
											right: BinOp 
												left: Num 
													n: float = 0.5
												op: Mult 
												right: Call 
													func: Name 
														id: str = cos
														ctx: Load 
													args: list 
														element: BinOp 
															left: BinOp 
																left: BinOp 
																	left: Num 
																		n: int = 2
																	op: Mult 
																	right: Name 
																		id: str = pi
																		ctx: Load 
																op: Mult 
																right: Name 
																	id: str = fCos
																	ctx: Load 
															op: Mult 
															right: Name 
																id: str = t
																ctx: Load 
													keywords: list 
										element: Num 
											n: int = 0
									keywords: list 
								generators: list 
									element: comprehension 
										target: Name 
											id: str = t
											ctx: Store 
										iter: ListComp 
											elt: BinOp 
												left: Name 
													id: str = iSample
													ctx: Load 
												op: Div 
												right: Name 
													id: str = fSample
													ctx: Load 
											generators: list 
												element: comprehension 
													target: Name 
														id: str = iSample
														ctx: Store 
													iter: Call 
														func: Name 
															id: str = range
															ctx: Load 
														args: list 
															element: BinOp 
																left: Name 
																	id: str = tTotal
																	ctx: Load 
																op: Mult 
																right: Name 
																	id: str = fSample
																	ctx: Load 
														keywords: list 
													ifs: list 
										ifs: list 
							element: Str 
								s: str = complex128
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = opov
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = delta
							ctx: Store 
					value: BinOp 
						left: Num 
							n: float = 0.001
						op: Add 
						right: Num 
							n: complex = 0.001j
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Str 
								s: str = Original samples
							element: Subscript 
								value: Call 
									func: Attribute 
										value: Call 
											func: Attribute 
												value: Name 
													id: str = num
													ctx: Load 
												attr: str = round
												ctx: Load 
											args: list 
												element: BinOp 
													left: Name 
														id: str = orig
														ctx: Load 
													op: Add 
													right: Name 
														id: str = delta
														ctx: Load 
												element: Num 
													n: int = 3
											keywords: list 
										attr: str = tolist
										ctx: Load 
									args: list 
									keywords: list 
								slice: Slice 
									lower: NoneType = None
									upper: Name 
										id: str = cut
										ctx: Load 
									step: NoneType = None
								ctx: Load 
							element: Str 
								s: str = <br>
						keywords: list 
				element: If 
					test: Name 
						id: str = transpiled
						ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = timeStartFft
									ctx: Store 
							value: Call 
								func: Name 
									id: str = getNow
									ctx: Load 
								args: list 
								keywords: list 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = freqs
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = fft
								ctx: Load 
							attr: str = fft
							ctx: Load 
						args: list 
							element: Name 
								id: str = orig
								ctx: Load 
						keywords: list 
				element: If 
					test: Name 
						id: str = transpiled
						ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = timeStopFft
									ctx: Store 
							value: Call 
								func: Name 
									id: str = getNow
									ctx: Load 
								args: list 
								keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Str 
								s: str = Frequencies
							element: Subscript 
								value: Call 
									func: Attribute 
										value: Call 
											func: Attribute 
												value: Name 
													id: str = num
													ctx: Load 
												attr: str = round
												ctx: Load 
											args: list 
												element: BinOp 
													left: Name 
														id: str = freqs
														ctx: Load 
													op: Add 
													right: Name 
														id: str = delta
														ctx: Load 
												element: Num 
													n: int = 3
											keywords: list 
										attr: str = tolist
										ctx: Load 
									args: list 
									keywords: list 
								slice: Slice 
									lower: NoneType = None
									upper: Name 
										id: str = cut
										ctx: Load 
									step: NoneType = None
								ctx: Load 
							element: Str 
								s: str = <br>
						keywords: list 
				element: If 
					test: Name 
						id: str = transpiled
						ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = timeStartIfft
									ctx: Store 
							value: Call 
								func: Name 
									id: str = getNow
									ctx: Load 
								args: list 
								keywords: list 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = reconstr
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = fft
								ctx: Load 
							attr: str = ifft
							ctx: Load 
						args: list 
							element: Name 
								id: str = freqs
								ctx: Load 
						keywords: list 
				element: If 
					test: Name 
						id: str = transpiled
						ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = timeStopIfft
									ctx: Store 
							value: Call 
								func: Name 
									id: str = getNow
									ctx: Load 
								args: list 
								keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Str 
								s: str = Reconstructed samples
							element: Subscript 
								value: Call 
									func: Attribute 
										value: Call 
											func: Attribute 
												value: Name 
													id: str = num
													ctx: Load 
												attr: str = round
												ctx: Load 
											args: list 
												element: BinOp 
													left: Name 
														id: str = reconstr
														ctx: Load 
													op: Add 
													right: Name 
														id: str = delta
														ctx: Load 
												element: Num 
													n: int = 3
											keywords: list 
										attr: str = tolist
										ctx: Load 
									args: list 
									keywords: list 
								slice: Slice 
									lower: NoneType = None
									upper: Name 
										id: str = cut
										ctx: Load 
									step: NoneType = None
								ctx: Load 
							element: Str 
								s: str = <br>
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = noopov
						keywords: list 
				element: If 
					test: Name 
						id: str = transpiled
						ctx: Load 
					body: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = print
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = FFT for {} samples took {} ms
											attr: str = format
											ctx: Load 
										args: list 
											element: BinOp 
												left: Name 
													id: str = tTotal
													ctx: Load 
												op: Mult 
												right: Name 
													id: str = fSample
													ctx: Load 
											element: BinOp 
												left: Name 
													id: str = timeStopFft
													ctx: Load 
												op: Sub 
												right: Name 
													id: str = timeStartFft
													ctx: Load 
										keywords: list 
								keywords: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = print
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = IFFT for {} samples took {} ms
											attr: str = format
											ctx: Load 
										args: list 
											element: BinOp 
												left: Name 
													id: str = tTotal
													ctx: Load 
												op: Mult 
												right: Name 
													id: str = fSample
													ctx: Load 
											element: BinOp 
												left: Name 
													id: str = timeStopIfft
													ctx: Load 
												op: Sub 
												right: Name 
													id: str = timeStartIfft
													ctx: Load 
										keywords: list 
								keywords: list 
					orelse: list 
			decorator_list: list 
			returns: NoneType = None