{
	"version": 3,
	"file": "D:/activ_tosh/geatec/numscrypt/numscrypt/development/automated_tests/ndarray/module_linalg/__javascript__/module_linalg.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/numscrypt/numscrypt/development/automated_tests/ndarray/module_linalg/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import *\nfrom org.transcrypt.stubs.browser import __main__, __envir__, __pragma__\n\n# Imports for Transcrypt, resolved run time\nif __envir__.executor_name == __envir__.transpiler_name:\n\timport numscrypt as num\n\timport numscrypt.linalg as linalg\n\n# Imports for CPython, resolved compile time\n__pragma__ ('skip')\nimport numpy as num\nimport numpy.linalg as linalg\n__pragma__ ('noskip')\n\ndef run (autoTester):\n\n\t# Real\n\n\tr = num.array ([\n\t\t[2.12, -2.11, -1.23], \n\t\t[2.31, 1.14, 3.15], \n\t\t[1.13, 1.98, 2.81]\n\t])\n\t\n\tautoTester.check ('Matrix r', num.round (r, 2) .tolist (), '<br>')\n\t\n\tri = linalg.inv (r)\n\t\n\tautoTester.check ('Matrix ri', num.round (ri, 2) .tolist (), '<br>')\n\t\n\t__pragma__ ('opov')\n\trid = r @ ri\n\t__pragma__ ('noopov')\n\t\n\tautoTester.check ('r @ ri', [[int (round (elem)) for elem in row] for row in rid.tolist ()], '<br>')\n\t\n\t__pragma__ ('opov')\n\tdelta = 0.001\n\tautoTester.check ('r * r', num.round (r * r + delta, 3) .tolist (), '<br>')\n\tautoTester.check ('r / r', num.round (r / r + delta, 3) .tolist (), '<br>')\n\tautoTester.check ('r + r', num.round (r + r + delta, 3) .tolist (), '<br>')\n\tautoTester.check ('r - r', num.round (r - r + delta, 3) .tolist (), '<br>')\n\t__pragma__ ('noopov')\n\n\t# Complex\n\t\n\t__pragma__ ('opov')\n\tc = num.array ([\n\t\t[2.12 - 3.15j, -2.11, -1.23], \n\t\t[2.31, 1.14, 3.15 + 2.75j], \n\t\t[1.13, 1.98 - 4.33j, 2.81]\n\t], 'complex128')\n\t__pragma__ ('noopov')\n\t\n\tautoTester.check ('Matrix c',  num.round (c, 2) .tolist (), '<br>')\n\t\n\tci = linalg.inv (c)\n\t\n\tautoTester.check ('Matrix ci', num.round (ci, 2) .tolist (), '<br>')\n\t\n\t__pragma__ ('opov')\n\tcid = c @ ci\n\t__pragma__ ('noopov')\n\t\n\t# autoTester.check ('c @ ci', [['{} + j{}'.format (int (round (elem.real)), int (round (elem.imag))) for elem in row] for row in cid.tolist ()], '<br>')\n\t\n\t__pragma__ ('opov')\n\tdelta = 0.001 + 0.001j\n\tautoTester.check ('c * c', num.round (c * c + delta , 3) .tolist (), '<br>')\n\tautoTester.check ('c / c', num.round (c / c + delta, 3) .tolist (), '<br>')\n\tautoTester.check ('c + c', num.round (c + c + delta, 3) .tolist (), '<br>')\n\tautoTester.check ('c - c', num.round (c - c + delta, 3) .tolist (), '<br>')\n\t__pragma__ ('noopov')"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAQA;AAIA;AAMA;AAEA;AAEA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAOA;AAEA;AAEA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}