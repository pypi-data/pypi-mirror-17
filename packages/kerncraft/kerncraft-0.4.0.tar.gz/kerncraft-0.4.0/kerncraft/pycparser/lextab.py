# lextab.py. This file automatically created by PLY (version 3.8). Don't edit!
_tabversion   = '3.8'
_lextokens    = {'INLINE', 'SIGNED', 'BREAK', 'STATIC', 'RETURN', 'LE', 'SHORT', 'AUTO', 'DO', 'LSHIFT', 'LPAREN', 'EQUALS', 'CASE', 'PLUSPLUS', 'UNSIGNED', 'SWITCH', 'DEFAULT', 'RBRACE', 'FOR', 'INT_CONST_HEX', 'XOREQUAL', 'INT', 'FLOAT_CONST', 'SIZEOF', 'AND', 'EXTERN', 'CONTINUE', 'LSHIFTEQUAL', 'HEX_FLOAT_CONST', 'PPPRAGMASTR', 'ELLIPSIS', 'VOID', 'GOTO', 'TIMES', 'DOUBLE', 'PLUS', 'CHAR_CONST', 'INT_CONST_DEC', 'CHAR', 'VOLATILE', 'OR', 'ANDEQUAL', 'CONST', 'ARROW', 'MINUS', 'RESTRICT', 'EQ', 'TIMESEQUAL', 'DIVEQUAL', 'PPPRAGMA', 'UNION', 'XOR', 'GE', 'STRUCT', 'MINUSEQUAL', 'WHILE', 'NE', 'OREQUAL', 'REGISTER', 'ENUM', 'WCHAR_CONST', 'GT', '_BOOL', 'RSHIFT', 'PPHASH', '_COMPLEX', 'PLUSEQUAL', 'TYPEID', 'COMMA', 'MINUSMINUS', 'MOD', 'RSHIFTEQUAL', 'MODEQUAL', 'DIVIDE', 'LNOT', 'LBRACKET', 'SEMI', 'WSTRING_LITERAL', 'LAND', 'RPAREN', 'LBRACE', 'OFFSETOF', 'RBRACKET', 'INT_CONST_BIN', 'PERIOD', 'COLON', 'ID', 'LT', 'FLOAT', 'IF', 'CONDOP', 'NOT', 'INT_CONST_OCT', 'STRING_LITERAL', 'LOR', 'ELSE', 'LONG', 'TYPEDEF'}
_lexreflags   = 0
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive', 'ppline': 'exclusive', 'pppragma': 'exclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_PPHASH>[ \\t]*\\#)|(?P<t_NEWLINE>\\n+)|(?P<t_LBRACE>\\{)|(?P<t_RBRACE>\\})|(?P<t_FLOAT_CONST>((((([0-9]*\\.[0-9]+)|([0-9]+\\.))([eE][-+]?[0-9]+)?)|([0-9]+([eE][-+]?[0-9]+)))[FfLl]?))|(?P<t_HEX_FLOAT_CONST>(0[xX]([0-9a-fA-F]+|((([0-9a-fA-F]+)?\\.[0-9a-fA-F]+)|([0-9a-fA-F]+\\.)))([pP][+-]?[0-9]+)[FfLl]?))|(?P<t_INT_CONST_HEX>0[xX][0-9a-fA-F]+(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?)', [None, ('t_PPHASH', 'PPHASH'), ('t_NEWLINE', 'NEWLINE'), ('t_LBRACE', 'LBRACE'), ('t_RBRACE', 'RBRACE'), ('t_FLOAT_CONST', 'FLOAT_CONST'), None, None, None, None, None, None, None, None, None, ('t_HEX_FLOAT_CONST', 'HEX_FLOAT_CONST'), None, None, None, None, None, None, None, ('t_INT_CONST_HEX', 'INT_CONST_HEX')]), ('(?P<t_INT_CONST_BIN>0[bB][01]+(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?)|(?P<t_BAD_CONST_OCT>0[0-7]*[89])|(?P<t_INT_CONST_OCT>0[0-7]*(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?)|(?P<t_INT_CONST_DEC>(0(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?)|([1-9][0-9]*(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?))|(?P<t_CHAR_CONST>\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))\')|(?P<t_WCHAR_CONST>L\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))\')|(?P<t_UNMATCHED_QUOTE>(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*\\n)|(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*$))|(?P<t_BAD_CHAR_CONST>(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))[^\'\n]+\')|(\'\')|(\'([\\\\][^a-zA-Z._~^!=&\\^\\-\\\\?\'"x0-7])[^\'\\n]*\'))', [None, ('t_INT_CONST_BIN', 'INT_CONST_BIN'), None, None, None, None, None, None, None, ('t_BAD_CONST_OCT', 'BAD_CONST_OCT'), ('t_INT_CONST_OCT', 'INT_CONST_OCT'), None, None, None, None, None, None, None, ('t_INT_CONST_DEC', 'INT_CONST_DEC'), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_CHAR_CONST', 'CHAR_CONST'), None, None, None, None, None, None, ('t_WCHAR_CONST', 'WCHAR_CONST'), None, None, None, None, None, None, ('t_UNMATCHED_QUOTE', 'UNMATCHED_QUOTE'), None, None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_BAD_CHAR_CONST', 'BAD_CHAR_CONST')]), ('(?P<t_WSTRING_LITERAL>L"([^"\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*")|(?P<t_BAD_STRING_LITERAL>"([^"\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*([\\\\][^a-zA-Z._~^!=&\\^\\-\\\\?\'"x0-7])([^"\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*")|(?P<t_ID>[a-zA-Z_$][0-9a-zA-Z_$]*)|(?P<t_STRING_LITERAL>"([^"\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*")|(?P<t_ELLIPSIS>\\.\\.\\.)|(?P<t_LOR>\\|\\|)|(?P<t_PLUSPLUS>\\+\\+)|(?P<t_XOREQUAL>\\^=)|(?P<t_OREQUAL>\\|=)|(?P<t_TIMESEQUAL>\\*=)|(?P<t_RSHIFTEQUAL>>>=)|(?P<t_LSHIFTEQUAL><<=)|(?P<t_PLUSEQUAL>\\+=)|(?P<t_LPAREN>\\()|(?P<t_RBRACKET>\\])|(?P<t_LAND>&&)', [None, ('t_WSTRING_LITERAL', 'WSTRING_LITERAL'), None, None, None, None, None, None, ('t_BAD_STRING_LITERAL', 'BAD_STRING_LITERAL'), None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_ID', 'ID'), (None, 'STRING_LITERAL'), None, None, None, None, None, None, (None, 'ELLIPSIS'), (None, 'LOR'), (None, 'PLUSPLUS'), (None, 'XOREQUAL'), (None, 'OREQUAL'), (None, 'TIMESEQUAL'), (None, 'RSHIFTEQUAL'), (None, 'LSHIFTEQUAL'), (None, 'PLUSEQUAL'), (None, 'LPAREN'), (None, 'RBRACKET'), (None, 'LAND')]), ('(?P<t_PERIOD>\\.)|(?P<t_MINUSEQUAL>-=)|(?P<t_NE>!=)|(?P<t_PLUS>\\+)|(?P<t_LE><=)|(?P<t_LBRACKET>\\[)|(?P<t_LSHIFT><<)|(?P<t_ANDEQUAL>&=)|(?P<t_CONDOP>\\?)|(?P<t_XOR>\\^)|(?P<t_RSHIFT>>>)|(?P<t_EQ>==)|(?P<t_MINUSMINUS>--)|(?P<t_GE>>=)|(?P<t_TIMES>\\*)|(?P<t_RPAREN>\\))|(?P<t_OR>\\|)|(?P<t_MODEQUAL>%=)|(?P<t_DIVEQUAL>/=)|(?P<t_ARROW>->)|(?P<t_GT>>)|(?P<t_AND>&)|(?P<t_LNOT>!)|(?P<t_COLON>:)|(?P<t_SEMI>;)|(?P<t_NOT>~)|(?P<t_MINUS>-)|(?P<t_EQUALS>=)|(?P<t_DIVIDE>/)|(?P<t_COMMA>,)|(?P<t_MOD>%)|(?P<t_LT><)', [None, (None, 'PERIOD'), (None, 'MINUSEQUAL'), (None, 'NE'), (None, 'PLUS'), (None, 'LE'), (None, 'LBRACKET'), (None, 'LSHIFT'), (None, 'ANDEQUAL'), (None, 'CONDOP'), (None, 'XOR'), (None, 'RSHIFT'), (None, 'EQ'), (None, 'MINUSMINUS'), (None, 'GE'), (None, 'TIMES'), (None, 'RPAREN'), (None, 'OR'), (None, 'MODEQUAL'), (None, 'DIVEQUAL'), (None, 'ARROW'), (None, 'GT'), (None, 'AND'), (None, 'LNOT'), (None, 'COLON'), (None, 'SEMI'), (None, 'NOT'), (None, 'MINUS'), (None, 'EQUALS'), (None, 'DIVIDE'), (None, 'COMMA'), (None, 'MOD'), (None, 'LT')])], 'ppline': [('(?P<t_ppline_FILENAME>"([^"\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*")|(?P<t_ppline_LINE_NUMBER>(0(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?)|([1-9][0-9]*(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?))|(?P<t_ppline_NEWLINE>\\n)|(?P<t_ppline_PPLINE>line)', [None, ('t_ppline_FILENAME', 'FILENAME'), None, None, None, None, None, None, ('t_ppline_LINE_NUMBER', 'LINE_NUMBER'), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_ppline_NEWLINE', 'NEWLINE'), ('t_ppline_PPLINE', 'PPLINE')])], 'pppragma': [('(?P<t_pppragma_NEWLINE>\\n)|(?P<t_pppragma_PPPRAGMA>pragma)|(?P<t_pppragma_STR>.+)', [None, ('t_pppragma_NEWLINE', 'NEWLINE'), ('t_pppragma_PPPRAGMA', 'PPPRAGMA'), ('t_pppragma_STR', 'STR')])]}
_lexstateignore = {'INITIAL': ' \t', 'ppline': ' \t', 'pppragma': ' \t'}
_lexstateerrorf = {'INITIAL': 't_error', 'ppline': 't_ppline_error', 'pppragma': 't_pppragma_error'}
_lexstateeoff = {}
