# -*- coding: utf-8 -*-

from datetime import date, timedelta
from copy import deepcopy
from .nepday import get_nepday_of_week
from .nepnumber import get_nepali_num

ne = {
    'months_name': ('बैशाख', 'जेष्ठ', 'आषाढ', 'श्रावण', 'भाद्र', 'आश्विन',
                    'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुन', 'चैत्र'),
    'months_short_name': ('बै', 'जे', 'आषा', 'श्रा', 'भा', 'आश',
                          'का', 'मं', 'पौ', 'मा', 'फा', 'चै')
}

en = {
    'months_name': ('Baisakh', 'Jestha', 'Ashadh', 'Shrawan', 'Bhadra',
                    'Ashwin', 'Kartik', 'Mangsir', 'Paush', 'Mangh', 'Falgun',
                    'Chaitra'),
    'months_short_name': ('Bai', 'Je', 'As', 'Shra', 'Bha',
                          'Ash', 'Kar', 'Mang', 'Pau', 'Ma', 'Fal', 'Chai')
}

days_in_year = 365
base_ad = {'year': 2016, 'month': 9, 'day': 17, 'day_of_week': 6}
base_bs = {'year': 2073, 'month': 6, 'day': 1, 'day_of_week': 6}


calendar_data = {
    1978: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    1979: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    1980: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    1981: (31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365),
    1982: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    1983: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    1984: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    1985: (31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365),
    1986: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    1987: (31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    1988: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    1989: (31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    1990: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    1991: (31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    1992: (31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366),
    1993: (31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    1994: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    1995: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365),
    1996: (31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366),
    1997: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    1998: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    1999: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2000: (30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365),
    2001: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2002: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2003: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2004: (30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365),
    2005: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2006: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2007: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2008: (31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365),
    2009: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2010: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2011: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2012: (31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365),
    2013: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2014: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2015: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2016: (31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365),
    2017: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2018: (31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2019: (31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366),
    2020: (31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2021: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2022: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365),
    2023: (31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366),
    2024: (31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2025: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2026: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2027: (30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365),
    2028: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2029: (31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365),
    2030: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2031: (30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365),
    2032: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2033: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2034: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2035: (30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365),
    2036: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2037: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2038: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2039: (31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365),
    2040: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2041: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2042: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2043: (31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365),
    2044: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2045: (31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2046: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2047: (31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2048: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2049: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365),
    2050: (31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366),
    2051: (31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2052: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2053: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365),
    2054: (31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366),
    2055: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2056: (31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365),
    2057: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2058: (30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365),
    2059: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2060: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2061: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2062: (30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31, 365),
    2063: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2064: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2065: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2066: (31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365),
    2067: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2068: (31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2069: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2070: (31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365),
    2071: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2072: (31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365),
    2073: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366),
    2074: (31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2075: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2076: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365),
    2077: (31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366),
    2078: (31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2079: (31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365),
    2080: (31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365),
    2081: (31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366),
    2082: (30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365),
    2083: (31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365),
    2084: (31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365),
    2085: (31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30, 366),
    2086: (30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365),
    2087: (31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366),
    2088: (30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30, 365),
    2089: (30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365),
    2090: (30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365),
    2091: (31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366),
    2092: (31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366)
}


def get_days_in_year(year):
    return calendar_data.get(year, days_in_year)


def is_leap_year(year):
    return (days_in_year != get_days_in_year(year))


def count_bs_days(date):
    day_count = 0
    dt = [int(x) for x in date.split('/')]
    date_dict = {'year': dt[0], 'month': dt[1], 'day': dt[2]}
    inc = False

    if (dt[0] > base_bs['year']):
        inc = True
    elif (dt[0] == base_bs['year'] and dt[1] > base_bs['month']):
        inc = True
    elif (dt[0] == base_bs['year'] and dt[1] == base_bs['month']
          and dt[2] > base_bs['day']):
        inc = True
    start = base_bs
    end = date_dict
    factor = 1
    if inc is False:
        start = date_dict
        end = base_bs
        factor = -1

    for i in range(start['year'], end['year'] + 1):
        day_count += calendar_data[i][12]

    for i in range(0, start['month'] - 1):
        day_count -= calendar_data[start['year']][i]

    for i in range(end['month'] - 1, 12):
        day_count -= calendar_data[end['year']][i]

    day_count -= start['day']
    day_count += end['day']
    return (day_count * factor)


def count_ad_days(dt):
    dt = [int(x) for x in dt.split('/')]
    base_dt = date(base_ad['year'], base_ad['month'], base_ad['day'])
    dt = date(dt[0], dt[1], dt[2])
    diff = (dt - base_dt).days
    return {'diff': diff, 'date_ad': dt}


def offset_bs_days(day_data):
    day_count = day_data['diff']
    date_ad = day_data['date_ad']
    bs_date = deepcopy(base_bs)
    if day_count >= 0:
        bs_date['day'] += day_count
        while bs_date['day'] > calendar_data[bs_date['year']][bs_date['month'] - 1]:
            bs_date['day'] -= calendar_data[bs_date['year']][bs_date['month'] - 1]
            bs_date['month'] += 1
            if bs_date['month'] > 12:
                bs_date['year'] += 1
                bs_date['month'] = 1
    else:
        day_count = abs(day_count) - 1
        bs_date['month'] -= 1
        while day_count >= 0:
            month_days = calendar_data[bs_date['year']][bs_date['month'] - 1]
            if day_count < month_days:
                day_count = month_days - day_count
                break
            day_count -= calendar_data[bs_date['year']][bs_date['month'] - 1]
            bs_date['month'] -= 1
            if bs_date['month'] == 0:
                bs_date['year'] -= 1
                bs_date['month'] = 12
        bs_date['day'] = day_count

    day_of_week = date_ad.weekday()
    np_day_of_week = get_nepday_of_week(day_of_week)
    en_day_of_week = get_nepday_of_week(day_of_week, lang='en')

    return {
        'ne': {
            'year': get_nepali_num(bs_date['year']),
            'month': get_nepali_num(bs_date['month']),
            'day': get_nepali_num(bs_date['day']),
            'str_month': ne['months_name'][bs_date['month'] - 1],
            'str_short_month': ne['months_short_name'][bs_date['month'] - 1],
            'day_of_week': get_nepali_num(day_of_week),
            'str_day_of_week': np_day_of_week['full'],
            'str_short_day_of_week': np_day_of_week['short'],
            'str_min_day_of_week': np_day_of_week['min']
        },
        'en': {
            'year': bs_date['year'],
            'month': bs_date['month'],
            'day': bs_date['day'],
            'str_month': en['months_name'][bs_date['month'] - 1],
            'str_short_month': en['months_short_name'][bs_date['month'] - 1],
            'day_of_week': day_of_week,
            'str_day_of_week': en_day_of_week['full'],
            'str_short_day_of_week': en_day_of_week['short'],
            'str_min_day_of_week': en_day_of_week['min']
        }
    }


def offset_ad_days(day_count):
    st_dt = date(base_ad['year'], base_ad['month'], base_ad['day'])
    dt = st_dt + timedelta(days=day_count)
    month = dt.month
    day_of_week = dt.weekday()
    return {
        'year': dt.year,
        'month': month,
        'str_month': dt.strftime('%B'),
        'str_short_month': dt.strftime('%b'),
        'day': dt.day,
        'day_of_week': day_of_week,
        'str_day_of_week': dt.strftime('%A'),
        'str_short_day_of_week': dt.strftime('%a')
    }


def ad_to_bs(dt):
    '''Converts AD to BS.'''
    return offset_bs_days(count_ad_days(dt))


def bs_to_ad(dt):
    '''Converts BS to AD'''
    return offset_ad_days(count_bs_days(dt))


if __name__ == '__main__':
    print('AD to BS converter. Please check https://github.com/techgaun/ad-bs-converter.py for usage.')
    print('Below is an example')
    print(ad_to_bs('2016/10/1'))
