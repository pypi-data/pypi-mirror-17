Metadata-Version: 1.1
Name: pysndfx
Version: 0.0.6
Summary: UNKNOWN
Home-page: https://github.com/carlthome/python-audio-effects
Author: Carl Thomé
Author-email: carlthome@gmail.com
License: MIT License

Copyright (c) 2016 Carl Thomé

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Description: pysndfx `|Build Status| <https://travis-ci.org/carlthome/python-audio-effects>`_
        ================================================================================
        
        **Apply audio effects such as reverb and EQ directly to audio files or
        NumPy ndarrays.**
        
        This is a lightweight Python wrapper for SoX, the Swiss Army knife of
        sound processing programs. Supported effects range from EQ, compression
        and noise reduction to phasers, reverbs and pitch shifters.
        
        Install
        -------
        
        Install with pip as: ``sh pip install pysndfx`` The system must also
        have `SoX <http://sox.sourceforge.net/>`_ installed (for Debian-based
        operating systems: ``apt install sox``, or with Anaconda as
        ``conda install -c conda-forge sox``)
        
        Usage
        -----
        
        First create an audio effects chain.
        ``python # Import the package and create an audio effects chain. from pysndfx import AudioEffectsChain apply_audio_fx = (AudioEffectsChain()                      .phaser()                      .reverb())``
        Then we can call the effects chain object with paths to audio files, or
        directly with NumPy ndarrays. \`\`\`python infile =
        'my\_audio\_file.wav' outfile = 'my\_processed\_audio\_file.ogg'
        
        Apply phaser and reverb directly to an audio file.
        ==================================================
        
        apply\_audio\_fx(infile, outfile)
        
        Or, apply the effects directly to a NumPy ndarray.
        ==================================================
        
        from librosa import load x, sr = load(infile, sr=None) y =
        apply\_audio\_fx(x)
        
        Apply the effects and return the results as a NumPy ndarray.
        ============================================================
        
        y = apply\_audio\_fx(infile)
        
        Apply the effects to a NumPy ndarray but store the resulting audio to disk.
        ===========================================================================
        
        apply\_audio\_fx(x, outfile)
        ``There's also experimental streaming support. Try applying reverb to a microphone input and listening to the results live like this:``sh
        python -c "from pysndfx import AudioEffectsChain;
        AudioEffectsChain().reverb()(None, None)" \`\`\`
        
        .. |Build
        Status| image:: https://travis-ci.org/carlthome/python-audio-effects.svg?branch=master
        
Keywords: audio music sound
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Multimedia :: Sound/Audio
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
