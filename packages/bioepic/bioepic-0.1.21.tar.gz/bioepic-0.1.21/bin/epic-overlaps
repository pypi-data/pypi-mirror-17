#!/usr/bin/env python

"""
epic-overlap
Plot nb. and nucleotides of overlaps between enriched regions in different conditions

(Visit github.com/endrebak/epic for examples and help.)

Usage:
    epic-overlap [--cpu=CPU] [--outfile=OUT] [--matrix=MAT] [--title=TIT] [--nucleotides-heatmap|--regions-heatmap|--nucleotides-bargraph|--regions-bargraph] FILE...
    epic-overlap --help

Arguments:
    FILE              files of regions

Options:
    --nucelotides-heatmap   heatmap of the number of nucleotides overlapping in each file
    --regions-heatmap       heatmap of the number of regions overlapping (by at least one nucleotide) in each file
    --nucelotides-bargraph  stacked bargraph of the number of other files each nucleotide is overlapping
    --regions-bargraph      stacked bargraph of the number of other files each region is overlapping
    -o OUT --outfile OUT    name of output pdf file
    -m MAT --matrix MAT     write the matrix (dataframe) used for graphing to MAT
    -t TTL --title TTL      title of graph  [default: epic-overlaps]
    -c CPU --cpu CPU        nb. cpus to use, can use at most one per input file  [default: 1]
    -h --help               show this help message
"""

import logging
from os.path import basename, dirname
from subprocess import check_output

import pandas as pd
from io import StringIO
from docopt import docopt
from natsort import natsorted, index_natsorted, order_by_index
from joblib import Parallel, delayed


import warnings
warnings.filterwarnings("ignore",
                        category=UserWarning,
                        module="rpy2")  # rpy2 is noisy

from rpy2.robjects import r
from rpy2.robjects import pandas2ri
from rpy2.robjects.packages import importr
pandas2ri.activate()

args = docopt(__doc__)

from epic.config import logging_settings

importr("ggplot2")


def heatmap(df, title, outfile):

    df = df.reindex(index=order_by_index(df.index, index_natsorted(zip(df.Main, df.Other))))
    df.Overlaps = df.Overlaps.astype(int)
    factor_order = natsorted(list(df.Main.drop_duplicates()))
    factors = '"' + '", "'.join(factor_order) + '"'

    f = """function(df) {{

    df$Main = factor(as.character(df$Main), levels=c({factors}), ordered=TRUE)
    df$Other = factor(df$Other,levels=c({factors}), ordered=TRUE)
    df$Overlaps = as.integer(df$Overlaps)
    p = ggplot(df, aes(x=Main, y=Other, fill=Overlaps)) + geom_tile() + ggtitle("{title}") + labs(x="Timepoints", y="Number of regions", fill="Overlaps")
    p = p + theme(axis.text.x = element_text(angle = 45, hjust = 1))

    print(p)
    }}
    """.format(factors=factors, title=title)
    logging.debug(f)

    plot_df_nb_regions = r(f)

    r("pdf('{}')".format(outfile))
    logging.info("Writing overlapping regions to file: " + outfile)

    r_dataframe = pandas2ri.py2ri(df)
    plot_df_nb_regions(r_dataframe)

    r("dev.off()")


def bargraph(df, title, outfile):

    df = df.reindex(index=order_by_index(df.index, index_natsorted(zip(df.Main, df.Other))))
    factor_order = natsorted(list(df.Main.drop_duplicates()))
    factors = '"' + '", "'.join(factor_order) + '"'

    f = """function(df) {{

    df$Main = factor(as.character(df$Main), levels=c({factors}), ordered=TRUE)
    df$Other = factor(df$Other, ordered=TRUE)
    p = ggplot(df, aes(x=Main, y=Overlaps, fill=Other)) + geom_bar(stat="identity") + ggtitle("{title}") + scale_fill_brewer(palette="Set3") + labs(x="Timepoints", y="Number of regions", fill="Overlaps")
    p = p + theme(axis.text.x = element_text(angle = 45, hjust = 1))

    print(p)
    }}
    """.format(factors=factors, title=title)
    logging.debug(f)

    plot_df_nb_regions = r(f)

    r("pdf('{}')".format(outfile))
    logging.info("Writing overlapping regions to file: " + outfile)

    r_dataframe = pandas2ri.py2ri(df)
    plot_df_nb_regions(r_dataframe)

    r("dev.off()")

if __name__ == '__main__':

    all_files = args["FILE"]
    outfile = args["--outfile"]
    title = args["--title"]
    nb_cpu = int(args["--cpu"])

    if args["--regions-bargraph"]:
        from epic.scripts.overlaps.overlaps import overlap_matrix_region_counts
        df = overlap_matrix_region_counts(all_files, nb_cpu)
        bargraph(df, title, outfile)


    elif args["--nucleotides-bargraph"]:
        from epic.scripts.overlaps.overlaps_nucleotides import overlap_matrix_nucleotides
        df = overlap_matrix_nucleotides(all_files, nb_cpu)
        # df.to_csv("nb.csv", sep=" ")
        # df = pd.read_table("nb.csv", sep=" ", index_col=0)
        bargraph(df, title, outfile)


    elif args["--regions-heatmap"]:
        from epic.scripts.overlaps.overlaps import overlap_matrix_regions
        df = overlap_matrix_regions(all_files, nb_cpu)
        print(df.head())
        df.to_csv("region.heatmap", sep=" ")
        # df = pd.read_table("region.heatmap", sep=" ", index_col=0)
        heatmap(df, title, outfile)


    elif args["--nucleotides-heatmap"]:
        from epic.scripts.overlaps.overlaps_nucleotides import nucleotide_overlaps_per_file

        df = nucleotide_overlaps_per_file(all_files, nb_cpu)

        # df = pd.read_table("H3K27me3_nucleoitdes.matrix", sep=" ", index_col=0)
        df = df.set_index(["Chromosome"]).groupby("Main Other".split()).sum().reset_index()
        heatmap(df, title, outfile)


    if args["--matrix"]:
        df.to_csv(args["--matrix"], sep=" ", index_col=False)
    # elif args["--nucleotides-bargraph"]:



    # nucleotide_overlaps_per_file(all_files, nb_cpu)
    # nucleotide_df = overlap_matrix_nucleotides(all_files, bin_size, nb_cpu)
    # bargraph(nucleotide_df, title, prefix + "_nucleotides.pdf")
    # print(nucleotide_df)


    # bargraph(nucleotide_df, outpath + "/nucleotides.pdf")
