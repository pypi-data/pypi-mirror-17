[metadata]
name = networking-sfc
summary = API's and implementations to support Service Function Chaining in Neutron.
description-file = README.rst
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = http://docs.openstack.org/developer/networking-sfc/
classifier = 
	Environment :: OpenStack
	Intended Audience :: Information Technology
	Intended Audience :: System Administrators
	License :: OSI Approved :: Apache Software License
	Operating System :: POSIX :: Linux
	Programming Language :: Python
	Programming Language :: Python :: 2
	Programming Language :: Python :: 2.7
	Programming Language :: Python :: 3
	Programming Language :: Python :: 3.3
	Programming Language :: Python :: 3.4
	Programming Language :: Python :: 3.5

[files]
packages = 
	networking_sfc

[entry_points]
neutronclient.extension = 
	flow_classifier = networking_sfc.cli.flow_classifier
	port_chain = networking_sfc.cli.port_chain
	port_pair = networking_sfc.cli.port_pair
	port_pair_group = networking_sfc.cli.port_pair_group
console_scripts = 
	neutron-openvswitch-agent = networking_sfc.services.sfc.agent.agent:main
neutron.db.alembic_migrations = 
	networking-sfc = networking_sfc.db.migration:alembic_migrations
neutron.service_plugins = 
	flow_classifier = networking_sfc.services.flowclassifier.plugin:FlowClassifierPlugin
	sfc = networking_sfc.services.sfc.plugin:SfcPlugin
networking_sfc.sfc.drivers = 
	dummy = networking_sfc.services.sfc.drivers.dummy.dummy:DummyDriver
	ovs = networking_sfc.services.sfc.drivers.ovs.driver:OVSSfcDriver
networking_sfc.flowclassifier.drivers = 
	dummy = networking_sfc.services.flowclassifier.drivers.dummy.dummy:DummyDriver
	ovs = networking_sfc.services.flowclassifier.drivers.ovs.driver:OVSFlowClassifierDriver
tempest.test_plugins = 
	networking-sfc = networking_sfc.tests.tempest_plugin.plugin:NetworkingSfcPlugin
oslo.config.opts = 
	flow_classifier = networking_sfc.opts:list_flow_classifier_opts
	sfc = networking_sfc.opts:list_sfc_opts

[build_sphinx]
source-dir = doc/source
build-dir = doc/build
all_files = 1

[upload_sphinx]
upload-dir = doc/build/html

[compile_catalog]
directory = networking_sfc/locale
domain = networking-sfc

[update_catalog]
domain = networking-sfc
output_dir = networking_sfc/locale
input_file = networking_sfc/locale/networking-sfc.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = networking_sfc/locale/networking-sfc.pot

[egg_info]
tag_build = 
tag_date = 0
tag_svn_revision = 0

