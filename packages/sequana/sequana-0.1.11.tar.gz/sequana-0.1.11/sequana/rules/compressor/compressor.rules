import glob
import os
from sequana import SequanaConfig

cfg = SequanaConfig(config, mode="others").config


if cfg.compressor.source == "fastq" and cfg.compressor.target == "fastq.gz":
    if cfg.compressor.recursive: cfg.glob = "**/*.fastq"
    fastqs = list(glob.iglob("**/*.fastq", recursive=cfg.compressor.recursive))
    rule fastq_to_gz:
        input: expand("{dataset}", dataset=fastqs),
        output: expand("{dataset}.gz", dataset=fastqs)
        run: 
            if len(input):shell("pigz {input}")

if cfg.compressor.source == "fastq.gz" and cfg.compressor.target == "fastq":
    if cfg.compressor.recursive: cfg.glob = "**/*.fastq.gz"
    filenames_zipped = list(glob.iglob("**/*.fastq.gz", recursive=cfg.compressor.recursive))
    fastqs = [x.replace(".gz", "") for x in filenames_zipped]
    rule gz_to_fastq:
        input: expand("{dataset}.gz", dataset=fastqs),
        output: expand("{dataset}", dataset=fastqs)
        run: 
            if len(input):shell("unpigz {input}")

if cfg.compressor.source == "fastq" and cfg.compressor.target == "fastq.bz2":
    if cfg.compressor.recursive: cfg.glob = "**/*.fastq"
    fastqs = list(glob.iglob("**/*.fastq", recursive=cfg.compressor.recursive))
    rule fastq_to_bz2:
        input: expand("{dataset}", dataset=fastqs),
        output: expand("{dataset}.bz2", dataset=fastqs)
        run: 
            if len(input):shell("pbzip2 {input}")

if cfg.compressor.source == "fastq.bz2" and cfg.compressor.target == "fastq":
    if cfg.compressor.recursive: cfg.glob = "**/*.fastq.bz2"
    filenames_bz2 = list(glob.iglob("**/*.fastq.bz2", recursive=cfg.compressor.recursive))
    fastqs = [x.replace(".bz2", "") for x in filenames_bz2]
    rule bz2_to_fastq:
        input: expand("{dataset}.bz2", dataset=fastqs),
        output: expand("{dataset}", dataset=fastqs)
        run: 
            if len(input):shell("pbunzip2 {input}")


if cfg.compressor.source == "fastq.bz2" and cfg.compressor.target == "fastq.gz":
    if cfg.compressor.recursive: cfg.glob = "**/*.fastq.bz2"
    filenames_bz2 = list(glob.iglob("**/*.fastq.bz2", recursive=cfg.compressor.recursive))
    fastq = [x.replace(".bz2", "") for x in filenames_bz2]
    filenames_zipped = [x.replace(".bz2", ".gz") for x in filenames_bz2]
    # Order of the rules is important here
    rule fastq_to_gz:
        input: expand("{dataset}", dataset=fastq),
        output: expand("{dataset}", dataset=filenames_zipped)
        run: 
            if len(input):shell("pigz {input}")
    rule bz2_to_fastq:
        input: expand("{dataset}", dataset=filenames_bz2),
        output: expand("{dataset}", dataset=fastq)
        run: 
            if len(input):shell("pbunzip2 {input}")

if cfg.compressor.source == "fastq.gz" and cfg.compressor.target == "fastq.bz2":
    if cfg.compressor.recursive: cfg.glob = "**/*.fastq.gz"
    filenames_zipped = list(glob.iglob("**/*.fastq.gz", recursive=cfg.compressor.recursive))
    fastq = [x.replace(".gz", "") for x in filenames_zipped]
    filenames_bz2 = [x.replace(".gz", ".bz2") for x in filenames_zipped]
    # Order of the rules is important here
    rule fastq_to_bz2:
        input: expand("{dataset}", dataset=fastq),
        output: expand("{dataset}", dataset=filenames_bz2)
        run: 
            if len(input):shell("pbzip2 {input}")
    rule zipped_to_fastq:
        input: expand("{dataset}", dataset=filenames_zipped),
        output: expand("{dataset}", dataset=fastq)
        run: 
            if len(input):shell("unpigz {input}")
    ruleorder: zipped_to_fastq > fastq_to_bz2







