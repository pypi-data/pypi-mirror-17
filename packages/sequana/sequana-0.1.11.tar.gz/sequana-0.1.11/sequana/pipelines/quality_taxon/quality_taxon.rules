import sequana
from sequana import snaketools as ss
from sequana.snaketools import SequanaConfig, FileFactory
ss.init("quality_taxon.rules", globals())


# Connect the sub-pipelines together
include: ss.modules['quality']


# Connect the kraken_contaminant pipeline to the quality pipeline at the output
# of the cutapdat rule
if config['kraken']['do']:
    if config['adapter_removal']['do']:
        config["kraken_input"] = "cutadapt"
    elif config['bwa_phix']['do']:
        raise NotImplementedError
        config["kraken_input"] = "phix"
    else:
        raise NotImplementedError
        config["kraken_input"] = "none"
    include: ss.modules['kraken']
    expected_output.append(__kraken__output)


expected_output.append("logs/pipeline_quality.done")


rule pipeline_quality_taxon:
    input:
        expected_output
    output:
        touch("logs/pipeline_quality_taxon.done")

onsuccess:
    shell("cp %s %s/" % (__snakefile__, "report"))
    shell("cp config.yaml %s/" % "report")
    ss.plot_stats()
    from sequana import SequanaSummary
    summary = SequanaSummary("report", "summary.html", snakefile=__snakefile__)
    # copy all required html
    summary.copy_html_to_report("*/fastq_*.html")
    summary.copy_html_to_report("cutadapt/cutadapt.html")
    # copy all images
    summary.copy_images_to_report("*/images/*png")

    if config['adapter_removal']['do']:
        shell('cp cutadapt/*fastq.gz report/')    
    else:
        raise NotImplementedError

    shell('cp -r fastqc_*/ report')
    shell('cp report/kraken.html report/kraken_to_krona.html')
    shell('cp report/kraken.html report/kraken_contaminant.html')
    shell('cp report/kraken.html report/kraken_translate.html')
    # the summary.html report itself.
    summary.create_report()

    ss.touch("finished")

