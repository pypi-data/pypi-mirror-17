import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig, FileFactory

# This must be defined before the include
configfile: "config.yaml"

cfg = SequanaConfig(config)
expected_output = []


# note the /
__kraken__outdir = "kraken/"



__kraken__input = [cfg.DATASET[0]]
if cfg.paired:
    __kraken__input += [cfg.DATASET[1]]

if "kraken_input" in config.keys():
    if config["kraken_input"] == "cutadapt":
        __kraken__input = __cutadapt__output[:]
    elif config["kraken_input"] == "phix":
        __kraken__input = [x for x in __bwa_bam_to_fastq__output if "unmapped" in x]
    else:
        pass

__kraken__output = __kraken__outdir + "/kraken.html"


rule kraken_to_krona:
    input: __kraken__outdir + "kraken.out.summary"
    output: __kraken__output
    run:
        shell("ktImportText %s -o %s" % (input, output))
        shell("cp %s %s" % (output, "report/kraken.html"))


rule kraken_translate:
    input:
        __kraken__outdir + "kraken.out"
    output:
        summary=__kraken__outdir + "kraken.out.summary",
        png=__kraken__outdir + "kraken.png",
    run:
        from sequana.kraken import KrakenResults
        k = KrakenResults(input[0])
        k.kraken_to_krona(output_filename=output.summary)
        df = k.plot(kind='pie')
        from pylab import savefig
        savefig(output.png)


if cfg.paired:
    rule kraken_contaminant:
        input:
            file1=__kraken__input[0],
            file2=__kraken__input[1]
        output:
            classified=__kraken__outdir + "kraken_classified.fasta",
            unclassified=__kraken__outdir + "kraken_unclassified.fasta",
            kraken=__kraken__outdir + "kraken.out"
        params:
            database = config['kraken']['database']
        threads: 4
        run:
            shell("kraken -db {params.database}  {input.file1} {input.file2} --threads {threads}  --classified-out {output.classified} --unclassified-out {output.unclassified} --paired --out {output.kraken}")
else:
    rule kraken_contaminant:
        input:
            file1=__kraken__input[0]
        output:
            classified=__kraken__outdir + "/kraken_classified.fasta",
            unclassified=__kraken__outdir + "/kraken_unclassified.fasta",
            kraken=__kraken__outdir + "kraken.out"
        params:
            database = config['kraken']['database']
        threads: 4
        run:
            shell("kraken -db {params.database} {input.file1} "
                " --threads {threads} --classified-out "
                " {output.classified} --unclassified-out {output.unclassified}"
                " --out {output.kraken}")





