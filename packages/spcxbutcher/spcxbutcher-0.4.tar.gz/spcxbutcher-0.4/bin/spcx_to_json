#!/usr/bin/env python3
import logging
import json
import argparse
import spcxbutcher.spcxparser
import sys

def eventTuple( event ):
    return event.gap, event.channel, event.timestamp

def spcDictionary( spc ):
    return { 'raw': spc.raw,
             'timePerBin': spc.timePerBin,
             'events': [ eventTuple( event ) for event in spc ] }

class JSONEncoder( json.JSONEncoder ):
    def default( self, thing ):
        if isinstance( thing, spcxbutcher.spcxparser.SPCXParser ):
            spcs = list( thing )
            return { "spcs": spcs }
        elif isinstance( thing, spcxbutcher.spc.SPC ):
            return spcDictionary( thing )

        return json.JSONEncoder.default( self, thing )

def multipleFiles( spcx, prefix ):
    for i, spc in enumerate( spcx ):
        outFile = '{}.{}.json'.format( prefix, i )
        with open( outFile, 'w' ) as f:
            json.dump( spc, f, cls = JSONEncoder )

parser = argparse.ArgumentParser()
parser.add_argument( 'spcxfile' )
parser.add_argument( 'prefix' )
parser.add_argument( '--single-file', dest='singleFile', action='store_true',
        help = 'if specified, store all SPCs in a single MATLAB file, do not break it up into one file per SPC' )
arguments = parser.parse_args()

logging.basicConfig( level = logging.DEBUG )

parsed = spcxbutcher.spcxparser.SPCXParser( arguments.spcxfile )
if arguments.singleFile:
    outFile = '{}.json'.format( arguments.prefix )
    json.dump( parsed, open( outFile, 'w' ), cls = JSONEncoder )
else:
    multipleFiles( parsed, arguments.prefix )
