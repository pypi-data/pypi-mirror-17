.. _usage:

Usage
=====

clustercron --help
------------------
::

    $ clustercron --help

    usage:
        clustercron [options] elb <loadbalancer_name> [<cron_command>]
        clustercron --version
        clustercron (-h|--help)

        options:
            (-v|--verbose)  Info logging. Add extra `-v` for debug logging.
            (-s|--syslog)   Log to (local) syslog.
            (-c|--cache)    Cache output from master check.
            (-o|--output)   Output stdout and stderr from <cron_command>.

    Clustercron is cronjob wrapper that tries to ensure that a script gets run
    only once, on one host from a pool of nodes of a specified loadbalancer.

    Without specifying a <cron_command> clustercron will only check if the node
    is the `master` in the cluster and will return 0 if so.


Command line examples
---------------------

**Clustercron** can be run from command line for debugging.

**Clustercron** can be run with only *load balancer type* and *load balancer name*.
Without a *command* specified clustron will test is the node is *master* and
return 0 if that is the case::

    $ clustercron elb mylbname
    $ echo $?
    0

On one node::

    $ clustercron elb mylbname || echo "I'm not master"
    I'm not master

On other node::

    $ clustercron elb mylbname && echo "I'm master"
    I'm master


With options `-v` or `--verbose` **clustercron** will output vebose info to console.

Check if node is master with verbose (info) output::

    $ clustercron -v elb mylbname
    INFO     clustercron.elb : Instance ID: i-ca289460
    INFO     clustercron.elb : All instances: i-58e224a1, i-ca289460 Instance in list: True
    INFO     clustercron.elb : Instances in service: i-58e224a1, i-ca289460 Instance in list: True
    INFO     clustercron.elb : This instance master: False


Check if node is master with verbose (info) output::

    $ clustercron -v elb mylbname
    INFO     clustercron.elb : Instance ID: i-ca289460
    INFO     clustercron.elb : All instances: i-58e224a1, i-ca289460 Instance in list: True
    INFO     clustercron.elb : Instances in service: i-ca289460 Instance in list: True
    INFO     clustercron.elb : This instance master: True


With options `-s` or `--syslog` and `-v` or `--verbose` **clustercron** will only output to syslog::

    $ clustercron -v -s elb mylbname echo test
    $ sudo tail  -9 /var/log/messages
    Sep 13 09:23:50 ip-172-30-0-83 requests.packages.urllib3.connectionpool [5262]: Starting new HTTP connection (1): 169.254.169.254
    Sep 13 09:23:50 ip-172-30-0-83 clustercron.elb [5262]: Instance ID: i-58e224a1
    Sep 13 09:23:51 ip-172-30-0-83 clustercron.elb [5262]: All instances: i-58e224a1, i-ca289460 Instance in list: True
    Sep 13 09:23:51 ip-172-30-0-83 clustercron.elb [5262]: Instances in service: i-58e224a1, i-ca289460 Instance in list: True
    Sep 13 09:23:51 ip-172-30-0-83 clustercron.elb [5262]: This instance master: True
    Sep 13 09:23:51 ip-172-30-0-83 clustercron.main [5262]: run command: echo test
    Sep 13 09:23:51 ip-172-30-0-83 clustercron.main [5262]: stdout: test
    Sep 13 09:23:51 ip-172-30-0-83 clustercron.main [5262]: stderr:
    Sep 13 09:23:51 ip-172-30-0-83 clustercron.main [5262]: returncode: 0


By default **clustercron** will not output `stdout` and `stderr` generated by
the 'cron-command'::

    $ clustercron elb mylbname echo test
    $


With option `-o` or `--output` ` **clustercron** will output `stdout` and
`stderr` generated by the 'cron-command' (when the node is determined as
'master')::

    $ clustercron -o elb mylbname echo test
    test


Output redirection with options `-o` or `--output`::

    $ clustercron -o elb mylbname echo test > /tmp/output
    $ cat /tmp/output
    test


`stdout` and `stderr` separated with redirection::

    $ clustercron -o elb mylbname cat non_existing_file  1>/tmp/output 2>/tmp/error
    $ cat /tmp/output
    $ cat /tmp/error
    cat: non_existing_file: No such file or directory


Be aware that redirection takes place on **clustercron** itself, not on the
'cron-command'. So redirection will also take place when the node is not
determined as 'master'.

When a node is not determind as 'master' an empty file will be created when
redirecting output from **clustercron**::

    $ clustercron -o elb clustercrontest echo test  > /tmp/output
    $ cat /tmp/output


When redirection is only wanted on the 'cron-command' when **clustercron**
determined a node as 'master' a 'cron-command' could be wrapped::

    $ cat wrapped_cron_command.sh
    #!/bin/sh
    echo test > /tmp/output

On a node determined as 'master::

    $ clustercron -o elb clustercrontest wrapped_cron_command.sh
    $ cat /tmp/output
    test

On a node not determined as 'master::

    $ clustercron -o elb clustercrontest wrapped_cron_command.sh
    $ cat /tmp/output
    cat: /tmp/output: No such file or directory


Cron entry example
------------------

Every day at 5 min to midnight run the command `logger "clustercron run"` on
the node that will be picked master . Log with level INFO to syslog::

    55 23 * * * /<path>/<to>/<virtualenv_name>/bin/clustercron -v -s elb <lb name> logger "clustercron run"


Caching
-------

**Clustercron's** *master selection* can be cached with the options  `-c` or `--cache`::

    $ clustercron -c elb mylbname echo test


By default the cache will stored in `/tmp/clustercron_cache.json` and expire
after 59 seconds. **Clustercron** will lock the cache file and tries to by default
20 times when the file is locked.

The defaults for caching can only be altered in **Clustercron's** configuration file.

See :ref:`configuration` for more information.

