#!/usr/bin/env py.test

import unittest
import itertools
from itertools import repeat

from py_alg_dat import max_heap

class TestMaxHeap(unittest.TestCase):

    def setUp( self ):
        self.h1 = max_heap.MaxHeap()
        self.h1.insert( 4 )
        self.h1.insert( 1 )
        self.h1.insert( 3 )
        self.h1.insert( 2 )
        self.h1.insert( 16 )
        self.h1.insert( 9 )
        self.h1.insert( 10 )
        self.h1.insert( 14 )
        self.h1.insert( 8 )
        self.h1.insert( 7 )

    def test_build_max_heap_recursive_empty( self ):
        ref = []
        res = max_heap.MaxHeap()
        self.assertEqual( ref, res.array )

    def test_build_max_heap_recursive( self ):
        ref = [16, 14, 10, 8, 7, 9, 3, 2, 4, 1]
        res = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        self.assertEqual( ref, res.array )

    def test_maxheap_len( self ):
         h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
         self.assertEqual( 10, len( h ) )

    def test_maxheap_equal( self ):
        h1 = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        h2 = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        self.assertEqual( h1, h2 )

    def test_maxheap_not_equal( self ):
        h1 = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        h2 = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 100 ] )
        self.assertNotEqual( h1, h2 )

    def test_maxheap_is_empty( self ):
        h = max_heap.MaxHeap()
        self.assertTrue( h.is_empty() )

    def test_maxheap_is_empty_not( self ):
        h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        self.assertFalse( h.is_empty() )

    def test_maxheap_clear( self ):
        h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        h.clear()
        t1 = len( h ) == 0
        t2 = h.array == []
        t = t1 and t2
        self.assertTrue( t )

    def test_maxheap_parent( self ):
        h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        index = 5
        parent_index = h.parent( index )
        parent_value = h.array[ parent_index ]
        t1 = parent_index == 2
        t2 = parent_value == 10
        t = t1 and t2
        self.assertTrue( t )

    def test_maxheap_parent_not( self ):
        h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        index = 2
        parent_index = h.parent( index )
        parent_value = h.array[ parent_index ]
        t1 = parent_index == 0
        t2 = parent_value == 16
        t = t1 and t2
        self.assertTrue( t )

    def test_maxheap_left_child( self ):
        h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        index = 1
        left_index = h.left_child( index )
        left_value = h.array[ left_index ]
        t1 = left_index == 3
        t2 = left_value == 8
        t = t1 and t2
        self.assertTrue( t )

    def test_maxheap_left_child_not( self ):
        h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        index = 2
        left_index = h.left_child( index )
        left_value = h.array[ left_index ]
        t1 = left_index == 3
        t2 = left_value == 8
        t = t1 and t2
        self.assertFalse( t )

    def test_maxheap_right_child( self ):
        h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        index = 1
        right_index = h.right_child( index )
        right_value = h.array[ right_index ]
        t1 = right_index == 4
        t2 = right_value == 7
        t = t1 and t2
        self.assertTrue( t )

    def test_maxheap_right_child_not( self ):
        h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        index = 2
        right_index = h.right_child( index )
        right_value = h.array[ right_index ]
        t1 = right_index == 4
        t2 = right_value == 7
        t = t1 and t2
        self.assertFalse( t )

    def test_maxheap_is_leaf( self ):
        h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        t1 = h.is_leaf( 0 ) == False
        t2 = h.is_leaf( 1 ) == False
        t3 = h.is_leaf( 2 ) == False
        t4 = h.is_leaf( 3 ) == False
        t5 = h.is_leaf( 4 ) == False
        t6 = h.is_leaf( 5 ) == True
        t7 = h.is_leaf( 6 ) == True
        t8 = h.is_leaf( 7 ) == True
        t9 = h.is_leaf( 8 ) == True
        t10 = h.is_leaf( 9 ) == True
        t = t1 and t2 and t3 and t4 and t5 and t6 and t7 and t8 and t9 and t10
        self.assertTrue( t )

    def test_maxheap_is_max_heap( self ):
        h = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        self.assertTrue( h.is_max_heap() )

    def test_maxheap_is_max_heap_not( self ):
        h = max_heap.MaxHeap()
        h.array = [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ]
        self.assertFalse( h.is_max_heap() )

#     def test_foo_bar( self ):
#         # Number of permutations is n! = 10! = 3628800
#         ref = [ 16, 14, 10, 8, 7, 9, 3, 2, 4, 1 ]
#         input =  [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ]
#         perm = []
#         perm = list( itertools.permutations( input ) )
#         perms_matching = []
#         perms_not_matching = []
#         heaps_matching = []
#         heaps_not_matching = []
#         for i in xrange( len( perm ) ):
#             h = max_heap.MaxHeap()
#             for j in xrange( len( perm[0] ) ):
#                 h.insert( perm[i][j] )
#             if h.array == ref:
#                 perms_matching.append( perm[i] )
#                 heaps_matching.append( h )
#             else:
#                 perms_not_matching.append( perm[i] )
#                 heaps_not_matching.append( h )
#         print str( "Number of heaps matching: " ) + str( len( heaps_matching ) )
#         print str( "Number of perms matching: " ) + str( len( perms_matching ) )
#         print "Matching perms: "
#         for i in xrange( len( perms_matching ) ):
#             print perms_matching[i]
#         print str( "Number of heaps not matching: ") + str( len( heaps_not_matching ) )
#         print str( "Number of perms not matching: ") + str( len( perms_not_matching ) )
#         print "Not matching perms: "
#         for i in xrange( len( perms_not_matching ) ):
#             if i < 10:
#                 print perms_not_matching[i]
#         pass

    def test_maxheap_insert( self ):
        ref = max_heap.MaxHeap( [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ] )
        res = max_heap.MaxHeap()
        res.insert( 4 )
        res.insert( 16 )
        res.insert( 9 )
        res.insert( 2 )
        res.insert( 1 )
        res.insert( 10 )
        res.insert( 3 )
        res.insert( 14 )
        res.insert( 8 )
        res.insert( 7 )
        self.assertEqual( res, ref )

    def test_maxheap_remove( self ):
        ref = max_heap.MaxHeap( [16, 14, 9, 8, 7, 1, 3, 2, 4] )
        h = max_heap.MaxHeap( [4, 1, 3, 2, 16, 9, 10, 14, 8, 7] )
        h.remove( 2 )
        t1 = h.is_max_heap() == True
        t2 = ref.array == h.array
        t = t1 and t2
        self.assertTrue( t )

    def test_maxheap_build_maxheap_recursive( self ):
        ref = [16, 14, 10, 8, 7, 9, 3, 2, 4, 1]
        res = [4, 1, 3, 2, 16, 9, 10, 14, 8, 7]
        h = max_heap.MaxHeap()
        h.build_max_heap( res )
        self.assertEqual( res, ref )

    def test_maxheap_build_maxheap_iterative( self ):
        ref = [16, 14, 10, 8, 7, 9, 3, 2, 4, 1]
        res = [4, 1, 3, 2, 16, 9, 10, 14, 8, 7]
        h = max_heap.MaxHeap()
        h.build_max_heap( res, False )
        self.assertEqual( res, ref )

    def test_maxheap_heap_sort( self ):
        ref = [16, 14, 10, 9, 8, 7, 4, 3, 2, 1]
        self.h1.heap_sort()
        self.assertEqual( ref, self.h1.array )

    def test_maxheap_extract_max( self ):
        self.assertEqual( 16, self.h1.heap_extract_max() )

    def test_maxheap_increase_key( self ):
        self.h1.heap_increase_key( 5, 50 )
        self.assertEqual( self.h1.array[0], 50 )

    def test_maxheap_merge( self ):
        ref = [16, 14, 10, 8, 9, 7, 3, 2, 4, 1]
        h1 = max_heap.MaxHeap( [16, 14, 10, 8] )
        h2 = max_heap.MaxHeap( [7, 9, 3, 2, 4, 1] )
        h = h1.heap_merge( h2 )
        t1 = ref == h.array
        t2 = h.is_max_heap()
        t = t1 and t2
        self.assertTrue( t )
