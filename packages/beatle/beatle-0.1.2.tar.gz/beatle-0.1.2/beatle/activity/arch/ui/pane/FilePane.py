"""Subclass of FilePane, which is generated by wxFormBuilder."""

import wx
import wx.stc
from ctx import theContext as context
import app
import tran
from app.ui.pane import BasePane
from app.handlers import IdentifiersHandler as ID
from activity.arch.ui import ui as ui
from activity.arch.handlers.cpp import EditorHandler


# Implementing FilePane
class FilePane(BasePane, ui.FilePane):
    """Implements code editor"""

    _toggleFull = ID.register('fullscreen')
    _closePane  = ID.register('close-pane')

    def __init__(self, parent, mainframe, fileobj):
        """Intialization of method editor"""
        self._parent = parent
        self._mainframe = mainframe
        self._object = fileobj
        self._types = dict([(x._name, x) for x in fileobj.project.types])
        if '@' in self._types:
            del self._types['@']
        keywords2 = [x for x in self._types.keys() if x and x not in ['unsigned', 'long']] + ['unsigned long']
        self._editorArgs = {
            'language': 'c++',
            'handler': EditorHandler(
                obj=fileobj,
                keywords2=keywords2
            )
        }
        super(FilePane, self).__init__(parent)
        self._defaulBkColor = self.GetBackgroundColour()
        self.Layout()
        wx.stc.EVT_STC_CHANGE(self.m_editor, self.m_editor.GetId(),
            self.OnEditorChange)
        frame = context.frame
        self.Bind(wx.EVT_MENU, handler=frame.CloseCurrentDocPane, id=self._closePane)
        self.Bind(wx.EVT_MENU, handler=self.OnDelete, id=frame.delete.GetId())
        self.Bind(wx.EVT_MENU, handler=self.OnSave, id=frame.saveProject.GetId())
        self.Bind(wx.EVT_UPDATE_UI, handler=self.OnUpdateSave, id=frame.saveProject.GetId())
        aTable = wx.AcceleratorTable([
            wx.AcceleratorEntry(wx.ACCEL_NORMAL, wx.WXK_DELETE, frame.delete.GetId()),
            wx.AcceleratorEntry(wx.ACCEL_ALT | wx.ACCEL_CTRL, ord('F'), self._toggleFull),
            wx.AcceleratorEntry(wx.ACCEL_CTRL, ord('W'), self._closePane)
        ])
        self.SetAcceleratorTable(aTable)

    def Refresh(self):
        """Update editor from external changes (like undo/redo)"""
        oldText = self.m_editor.GetText()
        newText = self._object.GetText()
        if oldText == newText:
            return
        line = self.m_editor.GetFirstVisibleLine()
        pos = self.m_editor.GetCurrentPos()
        self.m_editor.Freeze()
        self.m_editor.SetText(self._object.GetText())
        self.m_editor.SetModified(False)
        try:
            self.m_editor.SetFirstVisibleLine(line)
            self.m_editor.SetCurrentPos(pos)
        except:
            pass
        self.m_editor.Thaw()

    def OnEditorChange(self, event):
        """Called when editor status change"""
        if self.m_editor.GetModify():
            self.SetBackgroundColour(wx.LIGHT_GREY)
        else:
            self.SetBackgroundColour(self._defaulBkColor)

    def GotoLine(self, line, select=False):
        """Called for goto to line"""
        self.m_editor.GotoLine(line, select)

    @tran.TransactionalMethod('modify file {0}')
    def Commit(self):
        """Do commit changes"""
        if self.m_editor.GetModify():
            self._object.SaveState()
            self._object.SetText(self.m_editor.GetText())
            if wx.__version__ >= '3.0.0':
                self.m_editor.SetModified(False)
            self.SetBackgroundColour(self._defaulBkColor)
            return True
        else:
            return False

    @property
    def breakpoint(self):
        """return info about if the current line holds breakpoint"""
        return self.m_editor.breakpoint

    def ToggleBreakpoint(self, event):
        """toggle breakpoint"""
        self.m_editor.ToggleBreakpoint(event)

    @property
    def line(self):
        """return current line"""
        return self.m_editor.GetCurrentLine()

    def OnDelete(self, event):
        """Handle delete key"""
        (b, e) = self.m_editor.GetSelection()
        if b == e:
            self.m_editor.CharRight()
        self.m_editor.DeleteBack()

    def OnUpdateSave(self, event):
        """Handles update event"""
        event.Enable(self.m_editor.GetModify())

    def OnSave(self, event):
        """Handles save event"""
        self.Commit()


