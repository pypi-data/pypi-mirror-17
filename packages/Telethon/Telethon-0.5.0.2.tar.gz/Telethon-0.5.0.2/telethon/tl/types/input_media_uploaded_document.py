from telethon.tl.mtproto_request import MTProtoRequest


class InputMediaUploadedDocument(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    inputMediaUploadedDocument#1d89306d file:InputFile mime_type:string attributes:Vector<DocumentAttribute> caption:string = InputMedia"""

    def __init__(self, file, mime_type, attributes, caption):
        """
        :param file: Telegram type: «InputFile».
        :param mime_type: Telegram type: «string».
        :param attributes: Telegram type: «DocumentAttribute». Must be a list.
        :param caption: Telegram type: «string».
        """
        super().__init__()
        self.constructor_id = 0x1d89306d

        self.file = file
        self.mime_type = mime_type
        self.attributes = attributes
        self.caption = caption

    def on_send(self, writer):
        writer.write_int(self.constructor_id, signed=False)
        self.file.on_send(writer)
        writer.tgwrite_string(self.mime_type)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.attributes))
        for attributes_item in self.attributes:
            attributes_item.on_send(writer)

        writer.tgwrite_string(self.caption)

    def on_response(self, reader):
        self.file = reader.tgread_object()
        self.mime_type = reader.tgread_string()
        reader.read_int()  # Vector's constructor ID
        self.attributes = []  # Initialize an empty list
        attributes_len = reader.read_int()
        for _ in range(attributes_len):
            attributes_item = reader.tgread_object()
            self.attributes.append(attributes_item)

        self.caption = reader.tgread_string()

    def __repr__(self):
        return 'inputMediaUploadedDocument#1d89306d file:InputFile mime_type:string attributes:Vector<DocumentAttribute> caption:string = InputMedia'

    def __str__(self):
        return '(inputMediaUploadedDocument (ID: 0x1d89306d) = (file={}, mime_type={}, attributes={}, caption={}))'.format(str(self.file), str(self.mime_type), None if not self.attributes else [str(_) for _ in self.attributes], str(self.caption))
