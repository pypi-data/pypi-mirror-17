from telethon.tl.mtproto_request import MTProtoRequest


class Photo(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    photo#cded42fe id:long access_hash:long date:date sizes:Vector<PhotoSize> = Photo"""

    def __init__(self, id, access_hash, date, sizes):
        """
        :param id: Telegram type: «long».
        :param access_hash: Telegram type: «long».
        :param date: Telegram type: «date».
        :param sizes: Telegram type: «PhotoSize». Must be a list.
        """
        super().__init__()
        self.constructor_id = 0xcded42fe

        self.id = id
        self.access_hash = access_hash
        self.date = date
        self.sizes = sizes

    def on_send(self, writer):
        writer.write_int(self.constructor_id, signed=False)
        writer.write_long(self.id)
        writer.write_long(self.access_hash)
        writer.tgwrite_date(self.date)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.sizes))
        for sizes_item in self.sizes:
            sizes_item.on_send(writer)

    def on_response(self, reader):
        self.id = reader.read_long()
        self.access_hash = reader.read_long()
        self.date = reader.tgread_date()
        reader.read_int()  # Vector's constructor ID
        self.sizes = []  # Initialize an empty list
        sizes_len = reader.read_int()
        for _ in range(sizes_len):
            sizes_item = reader.tgread_object()
            self.sizes.append(sizes_item)

    def __repr__(self):
        return 'photo#cded42fe id:long access_hash:long date:date sizes:Vector<PhotoSize> = Photo'

    def __str__(self):
        return '(photo (ID: 0xcded42fe) = (id={}, access_hash={}, date={}, sizes={}))'.format(str(self.id), str(self.access_hash), str(self.date), None if not self.sizes else [str(_) for _ in self.sizes])
