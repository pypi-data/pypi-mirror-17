from telethon.tl.mtproto_request import MTProtoRequest


class Stickers(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    messages.stickers#8a8ecd32 hash:string stickers:Vector<Document> = messages.Stickers"""

    def __init__(self, hash, stickers):
        """
        :param hash: Telegram type: «string».
        :param stickers: Telegram type: «Document». Must be a list.
        """
        super().__init__()
        self.constructor_id = 0x8a8ecd32

        self.hash = hash
        self.stickers = stickers

    def on_send(self, writer):
        writer.write_int(self.constructor_id, signed=False)
        writer.tgwrite_string(self.hash)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.stickers))
        for stickers_item in self.stickers:
            stickers_item.on_send(writer)

    def on_response(self, reader):
        self.hash = reader.tgread_string()
        reader.read_int()  # Vector's constructor ID
        self.stickers = []  # Initialize an empty list
        stickers_len = reader.read_int()
        for _ in range(stickers_len):
            stickers_item = reader.tgread_object()
            self.stickers.append(stickers_item)

    def __repr__(self):
        return 'messages.stickers#8a8ecd32 hash:string stickers:Vector<Document> = messages.Stickers'

    def __str__(self):
        return '(messages.stickers (ID: 0x8a8ecd32) = (hash={}, stickers={}))'.format(str(self.hash), None if not self.stickers else [str(_) for _ in self.stickers])
