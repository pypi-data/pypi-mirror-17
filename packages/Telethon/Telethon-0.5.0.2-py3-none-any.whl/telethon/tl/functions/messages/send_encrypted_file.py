from telethon.tl.mtproto_request import MTProtoRequest


class SendEncryptedFileRequest(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage"""

    def __init__(self, peer, random_id, data, file):
        """
        :param peer: Telegram type: «InputEncryptedChat».
        :param random_id: Telegram type: «long».
        :param data: Telegram type: «bytes».
        :param file: Telegram type: «InputEncryptedFile».
        """
        super().__init__()
        self.result = None
        self.confirmed = True  # Confirmed by default
        self.constructor_id = 0x9a901b66

        self.peer = peer
        self.random_id = random_id
        self.data = data
        self.file = file

    def on_send(self, writer):
        writer.write_int(self.constructor_id, signed=False)
        self.peer.on_send(writer)
        writer.write_long(self.random_id)
        writer.tgwrite_bytes(self.data)
        self.file.on_send(writer)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage'

    def __str__(self):
        return '(messages.sendEncryptedFile (ID: 0x9a901b66) = (peer={}, random_id={}, data={}, file={}))'.format(str(self.peer), str(self.random_id), str(self.data), str(self.file))
