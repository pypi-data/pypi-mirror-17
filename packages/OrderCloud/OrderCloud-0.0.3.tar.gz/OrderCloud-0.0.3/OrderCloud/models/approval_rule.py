# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ApprovalRule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, description=None, approving_group_id=None, rule_expression=None, scope=None, scope_time_unit=None, scope_time_number=None, scope_start_date=None, expire_after_time_unit=None, expire_after_number=None, approve_on_expire=None, xp=None):
        """
        ApprovalRule - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'description': 'str',
            'approving_group_id': 'str',
            'rule_expression': 'str',
            'scope': 'str',
            'scope_time_unit': 'str',
            'scope_time_number': 'int',
            'scope_start_date': 'str',
            'expire_after_time_unit': 'str',
            'expire_after_number': 'int',
            'approve_on_expire': 'bool',
            'xp': 'object'
        }

        self.attribute_map = {
            'id': 'ID',
            'name': 'Name',
            'description': 'Description',
            'approving_group_id': 'ApprovingGroupID',
            'rule_expression': 'RuleExpression',
            'scope': 'Scope',
            'scope_time_unit': 'ScopeTimeUnit',
            'scope_time_number': 'ScopeTimeNumber',
            'scope_start_date': 'ScopeStartDate',
            'expire_after_time_unit': 'ExpireAfterTimeUnit',
            'expire_after_number': 'ExpireAfterNumber',
            'approve_on_expire': 'ApproveOnExpire',
            'xp': 'xp'
        }

        self._id = id
        self._name = name
        self._description = description
        self._approving_group_id = approving_group_id
        self._rule_expression = rule_expression
        self._scope = scope
        self._scope_time_unit = scope_time_unit
        self._scope_time_number = scope_time_number
        self._scope_start_date = scope_start_date
        self._expire_after_time_unit = expire_after_time_unit
        self._expire_after_number = expire_after_number
        self._approve_on_expire = approve_on_expire
        self._xp = xp

    @property
    def id(self):
        """
        Gets the id of this ApprovalRule.


        :return: The id of this ApprovalRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ApprovalRule.


        :param id: The id of this ApprovalRule.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ApprovalRule.


        :return: The name of this ApprovalRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApprovalRule.


        :param name: The name of this ApprovalRule.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ApprovalRule.


        :return: The description of this ApprovalRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ApprovalRule.


        :param description: The description of this ApprovalRule.
        :type: str
        """

        self._description = description

    @property
    def approving_group_id(self):
        """
        Gets the approving_group_id of this ApprovalRule.


        :return: The approving_group_id of this ApprovalRule.
        :rtype: str
        """
        return self._approving_group_id

    @approving_group_id.setter
    def approving_group_id(self, approving_group_id):
        """
        Sets the approving_group_id of this ApprovalRule.


        :param approving_group_id: The approving_group_id of this ApprovalRule.
        :type: str
        """

        self._approving_group_id = approving_group_id

    @property
    def rule_expression(self):
        """
        Gets the rule_expression of this ApprovalRule.


        :return: The rule_expression of this ApprovalRule.
        :rtype: str
        """
        return self._rule_expression

    @rule_expression.setter
    def rule_expression(self, rule_expression):
        """
        Sets the rule_expression of this ApprovalRule.


        :param rule_expression: The rule_expression of this ApprovalRule.
        :type: str
        """

        self._rule_expression = rule_expression

    @property
    def scope(self):
        """
        Gets the scope of this ApprovalRule.


        :return: The scope of this ApprovalRule.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this ApprovalRule.


        :param scope: The scope of this ApprovalRule.
        :type: str
        """

        self._scope = scope

    @property
    def scope_time_unit(self):
        """
        Gets the scope_time_unit of this ApprovalRule.


        :return: The scope_time_unit of this ApprovalRule.
        :rtype: str
        """
        return self._scope_time_unit

    @scope_time_unit.setter
    def scope_time_unit(self, scope_time_unit):
        """
        Sets the scope_time_unit of this ApprovalRule.


        :param scope_time_unit: The scope_time_unit of this ApprovalRule.
        :type: str
        """

        self._scope_time_unit = scope_time_unit

    @property
    def scope_time_number(self):
        """
        Gets the scope_time_number of this ApprovalRule.


        :return: The scope_time_number of this ApprovalRule.
        :rtype: int
        """
        return self._scope_time_number

    @scope_time_number.setter
    def scope_time_number(self, scope_time_number):
        """
        Sets the scope_time_number of this ApprovalRule.


        :param scope_time_number: The scope_time_number of this ApprovalRule.
        :type: int
        """

        self._scope_time_number = scope_time_number

    @property
    def scope_start_date(self):
        """
        Gets the scope_start_date of this ApprovalRule.


        :return: The scope_start_date of this ApprovalRule.
        :rtype: str
        """
        return self._scope_start_date

    @scope_start_date.setter
    def scope_start_date(self, scope_start_date):
        """
        Sets the scope_start_date of this ApprovalRule.


        :param scope_start_date: The scope_start_date of this ApprovalRule.
        :type: str
        """

        self._scope_start_date = scope_start_date

    @property
    def expire_after_time_unit(self):
        """
        Gets the expire_after_time_unit of this ApprovalRule.


        :return: The expire_after_time_unit of this ApprovalRule.
        :rtype: str
        """
        return self._expire_after_time_unit

    @expire_after_time_unit.setter
    def expire_after_time_unit(self, expire_after_time_unit):
        """
        Sets the expire_after_time_unit of this ApprovalRule.


        :param expire_after_time_unit: The expire_after_time_unit of this ApprovalRule.
        :type: str
        """

        self._expire_after_time_unit = expire_after_time_unit

    @property
    def expire_after_number(self):
        """
        Gets the expire_after_number of this ApprovalRule.


        :return: The expire_after_number of this ApprovalRule.
        :rtype: int
        """
        return self._expire_after_number

    @expire_after_number.setter
    def expire_after_number(self, expire_after_number):
        """
        Sets the expire_after_number of this ApprovalRule.


        :param expire_after_number: The expire_after_number of this ApprovalRule.
        :type: int
        """

        self._expire_after_number = expire_after_number

    @property
    def approve_on_expire(self):
        """
        Gets the approve_on_expire of this ApprovalRule.


        :return: The approve_on_expire of this ApprovalRule.
        :rtype: bool
        """
        return self._approve_on_expire

    @approve_on_expire.setter
    def approve_on_expire(self, approve_on_expire):
        """
        Sets the approve_on_expire of this ApprovalRule.


        :param approve_on_expire: The approve_on_expire of this ApprovalRule.
        :type: bool
        """

        self._approve_on_expire = approve_on_expire

    @property
    def xp(self):
        """
        Gets the xp of this ApprovalRule.


        :return: The xp of this ApprovalRule.
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """
        Sets the xp of this ApprovalRule.


        :param xp: The xp of this ApprovalRule.
        :type: object
        """

        self._xp = xp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
