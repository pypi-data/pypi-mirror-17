# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WebHook(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, type=None, description=None, base_url=None, shared_key=None, client_id=None, append_route=None, use_verb=None, elevated_claims_list=None, config_data=None):
        """
        WebHook - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'type': 'str',
            'description': 'str',
            'base_url': 'str',
            'shared_key': 'str',
            'client_id': 'str',
            'append_route': 'bool',
            'use_verb': 'bool',
            'elevated_claims_list': 'str',
            'config_data': 'object'
        }

        self.attribute_map = {
            'id': 'ID',
            'name': 'Name',
            'type': 'Type',
            'description': 'Description',
            'base_url': 'BaseUrl',
            'shared_key': 'SharedKey',
            'client_id': 'ClientID',
            'append_route': 'AppendRoute',
            'use_verb': 'UseVerb',
            'elevated_claims_list': 'ElevatedClaimsList',
            'config_data': 'ConfigData'
        }

        self._id = id
        self._name = name
        self._type = type
        self._description = description
        self._base_url = base_url
        self._shared_key = shared_key
        self._client_id = client_id
        self._append_route = append_route
        self._use_verb = use_verb
        self._elevated_claims_list = elevated_claims_list
        self._config_data = config_data

    @property
    def id(self):
        """
        Gets the id of this WebHook.


        :return: The id of this WebHook.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WebHook.


        :param id: The id of this WebHook.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this WebHook.


        :return: The name of this WebHook.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WebHook.


        :param name: The name of this WebHook.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this WebHook.


        :return: The type of this WebHook.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this WebHook.


        :param type: The type of this WebHook.
        :type: str
        """

        self._type = type

    @property
    def description(self):
        """
        Gets the description of this WebHook.


        :return: The description of this WebHook.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WebHook.


        :param description: The description of this WebHook.
        :type: str
        """

        self._description = description

    @property
    def base_url(self):
        """
        Gets the base_url of this WebHook.


        :return: The base_url of this WebHook.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """
        Sets the base_url of this WebHook.


        :param base_url: The base_url of this WebHook.
        :type: str
        """

        self._base_url = base_url

    @property
    def shared_key(self):
        """
        Gets the shared_key of this WebHook.


        :return: The shared_key of this WebHook.
        :rtype: str
        """
        return self._shared_key

    @shared_key.setter
    def shared_key(self, shared_key):
        """
        Sets the shared_key of this WebHook.


        :param shared_key: The shared_key of this WebHook.
        :type: str
        """

        self._shared_key = shared_key

    @property
    def client_id(self):
        """
        Gets the client_id of this WebHook.


        :return: The client_id of this WebHook.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this WebHook.


        :param client_id: The client_id of this WebHook.
        :type: str
        """

        self._client_id = client_id

    @property
    def append_route(self):
        """
        Gets the append_route of this WebHook.


        :return: The append_route of this WebHook.
        :rtype: bool
        """
        return self._append_route

    @append_route.setter
    def append_route(self, append_route):
        """
        Sets the append_route of this WebHook.


        :param append_route: The append_route of this WebHook.
        :type: bool
        """

        self._append_route = append_route

    @property
    def use_verb(self):
        """
        Gets the use_verb of this WebHook.


        :return: The use_verb of this WebHook.
        :rtype: bool
        """
        return self._use_verb

    @use_verb.setter
    def use_verb(self, use_verb):
        """
        Sets the use_verb of this WebHook.


        :param use_verb: The use_verb of this WebHook.
        :type: bool
        """

        self._use_verb = use_verb

    @property
    def elevated_claims_list(self):
        """
        Gets the elevated_claims_list of this WebHook.


        :return: The elevated_claims_list of this WebHook.
        :rtype: str
        """
        return self._elevated_claims_list

    @elevated_claims_list.setter
    def elevated_claims_list(self, elevated_claims_list):
        """
        Sets the elevated_claims_list of this WebHook.


        :param elevated_claims_list: The elevated_claims_list of this WebHook.
        :type: str
        """

        self._elevated_claims_list = elevated_claims_list

    @property
    def config_data(self):
        """
        Gets the config_data of this WebHook.


        :return: The config_data of this WebHook.
        :rtype: object
        """
        return self._config_data

    @config_data.setter
    def config_data(self, config_data):
        """
        Sets the config_data of this WebHook.


        :param config_data: The config_data of this WebHook.
        :type: object
        """

        self._config_data = config_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
