# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Usage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, total_count=None, organizations=None, _from=None, to=None):
        """
        Usage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'total_count': 'int',
            'organizations': 'list[UsageOrganization]',
            '_from': 'str',
            'to': 'str'
        }

        self.attribute_map = {
            'total_count': 'TotalCount',
            'organizations': 'Organizations',
            '_from': 'From',
            'to': 'To'
        }

        self._total_count = total_count
        self._organizations = organizations
        self.__from = _from
        self._to = to

    @property
    def total_count(self):
        """
        Gets the total_count of this Usage.


        :return: The total_count of this Usage.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """
        Sets the total_count of this Usage.


        :param total_count: The total_count of this Usage.
        :type: int
        """

        self._total_count = total_count

    @property
    def organizations(self):
        """
        Gets the organizations of this Usage.


        :return: The organizations of this Usage.
        :rtype: list[UsageOrganization]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """
        Sets the organizations of this Usage.


        :param organizations: The organizations of this Usage.
        :type: list[UsageOrganization]
        """

        self._organizations = organizations

    @property
    def _from(self):
        """
        Gets the _from of this Usage.


        :return: The _from of this Usage.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this Usage.


        :param _from: The _from of this Usage.
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """
        Gets the to of this Usage.


        :return: The to of this Usage.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this Usage.


        :param to: The to of this Usage.
        :type: str
        """

        self._to = to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
