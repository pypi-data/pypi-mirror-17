# vim: syntax=yaml
# Full example configuration. For the specific use cases of integrating
# with Rocket.Chat or Mattermost their dedicated example configurations
# should be used instead. (rocketchat.example.conf and mattermost.example.conf)
# Refer to the CONFIGURATION.rst for detailed documentation of all settings.

# This section configures the XMPP part of the bridge.
xmpp:
  # The Jabber-ID the bot uses (must exist).
  jid: <alice@example.com>

  # Optionally, the hostname and port of the XMPP server can be specified.
  # This is only needed if the DNS entries of the XMPP server are not set
  # correctly.
  host: <hostname>
  port: <port>

  # The corresponding password.
  password: "<bot-password>"

  # A list of all MUCs that should be available to the bridges defined later.
  # Each entry must contain:
  #      - the JID of the MUC
  #      - the nickname the bot should use in the MUC
  #
  # If the MUC requires a password it also needs to be included. If not, it can
  # be ommited.
  mucs:
    - jid: <conference1@conference.example.com>
      nickname: <nickname>
      password: "<muc-password>"

    - jid: <conference2@conference.example.com> nickname: <nickname2> # The bridge can create a server to listen for incoming webhooks (HTTP POST # requests). This section is optional and only needed if the bridge should
# handle incoming webhooks.
incoming_webhook_listener:
  bind_address: "127.0.0.1"
  port: 5000

# This section contains a list of all bridges. There can be one or multiple
# bridges. Each bridge consists of an XMPP section and a webhooks section.
bridges:
  - xmpp_endpoints:
      # The XMPP section contains a list of all XMPP endpoints that should be
      # part of this bridge.

      # MUCs are defined in this way:
      - muc: <conference1@conference.example.com>

      # Normal JIDs are defined in this way:
      - normal: <bob@example.com>
      - normal: <carol@example.com>

      # Optionally, the bridge can also relay all messages received from normal
      # JIDs. Note that this will only trigger outgoing webhooks. Incoming
      # webhooks can only affect MUCs and normal JIDs that are explicitly
      # defined.
      - relay_all_normal: true

      # All outgoing webhooks that should be triggered when receiving XMPP
      # messages are listed here.
      # Note: "Outgoing from this bridge" means "Incoming to the other end"
    outgoing_webhooks:
      - url: <incoming-webhook-url-from-other-end>

        # Optionally, use a specific certificate chain for validating the other
        # end. This certificate chain should be in "PEM" format.
        # See: https://docs.python.org/3/library/ssl.html#ca-certificates
        cafile: <path-to-ca-file>

        # Optionally override the username that is used when posting.
        # The user string may contain the following placeholders:
        #   {bare_jid}   The bare JID whose message is relayed.
        #
        #                Example: bob@example.com
        #
        #   {full_jid}   The full JID whose message is relayed.
        #
        #                Example: bob@example.com/Resource
        #
        #   {local_jid}  The local part of the JID whose message is relayed.
        #
        #                Example: If the JID is "bob@example.com" the local
        #                         part would be "bob".
        #
        #   {nick}       When relaying from a normal chat this is the local part.
        #                When relaying from a MUC this is the resource part.
        #
        #   {jid}        When relaying from a normal chat this is the bare JID.
        #                When relaying from a MUC this is the full JID.
        override_username: "{nick}"

        # Optionally overwrite the message that is sent. The following
        # placeholders may be used:
        #   {msg}        The original message as received from XMPP.
        message_template: "From XMPP: {msg}"

        # Optionally use "attachment formatting" instead of sending the
        # message as a regular message. This is useful for integrating
        # with Rocket.Chat.
        use_attachment_formatting: false

        # Optionally, when using "attachment formatting", each outgoing
        # message can include a link.
        attachment_link: "http://www.example.com"

      - url: <incoming-webhook-url-from-other-end2>

    # All incoming webhooks that should be handled in this bridge are listed
    # here.
    # Note: "Incoming to this bridge" means "Outgoing from the other end"
    incoming_webhooks:
      - token: <outgoing-webhook-token-from-other-end>

        # Optionally, ignore incoming messages from the users in this list.
        ignore_user:
          - "<username>"
          - "<username2>"
      - token: <outgoing-webhook-token-from-other-end2>
