Here are some scripts that I use to administer the project.

Steps to create a new release
-----------------------------

Display the current version:

  ./show-version.sh

Now make up a new version number <VERSION>.

Set up the new version:

./new-version.sh <VERSION>
./doc-rebuild.sh
./cleanup-distdirs.sh
./mk-dist.sh

Steps to push all patches to the central sourceforge repository:

hg qcommit -m backup
hg qfinish -a
hg tag <VERSION>
hg push

=============================

Explanation of scripts:

-----------------------------
Sourceforge administration:

sourceforge-shell.sh            : open an interactive shell at sourceforge
sourceforge-upload-distfiles.sh : upload files from "dist" directory to 
                                  sourceforge
sourceforge-upload-html.sh      : upload html documentation to sourceforge

-----------------------------
Version handling:

check-version.sh    : check if version numbers are consistent
show-version.sh     : show version numbers in all scripts and modules
new-version.sh      : create a new version (see "Steps to create a new release"
                      in this file)

-----------------------------
Documentation:

doc-rebuild.sh      : rebuild the html documentation

-----------------------------
Create distribution files:

mk-dist.sh          : create distribution (*.tar.gz) files
cleanup-distdirs.sh : clean the distribution directory
mk-rpm.sh           : create an rpm file (works only on a fedora system)
mk-deb.sh           : create a debian file, should be used on a debian system
                      or a debian docker container.

-----------------------------
pypi support:

pypi-upload.sh      : upload a new version to pypi

-----------------------------
Docker support:

docker          : the directory with the docker files
docker-build.sh : build docker debian containers needed for mk-xxx.sh scripts
                  run this as docker-build.sh <system-name>
                  with system-name one of:
                    debian-7 debian-8 fedora-21 fedora-22
docker-run.sh   : run a docker container
                  run this as docker-run.sh <system-name>
                  with system-name one of:
                    debian-7 debian-8 fedora-21 fedora-22
                  within docker execute one of the commands shown on the
                  console
mk-deb.sh       : create debian packages, should be run from within the
                  debian docker container
mk-rpm.sh       : create rpm packages, should be run from within the
                  debian docker container

