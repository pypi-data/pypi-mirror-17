# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2007-2016, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Provides various tests for normal surface enumeration.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

import string

def dumpSurfaces(name, slist):
	print "-------------------------------"
	print slist.triangulation().label()
	print name
	print "-------------------------------"
	print

	# Dump the surfaces in sort order, since we don't really mind if the
	# ordering changes between releases.
	surfaces = string.split(slist.detail(), '\n')
	surfaces.sort()
	# Let the text headers appear up top.
	surfaces.reverse()
	for s in surfaces:
		print s

	# Nothing else to say.
	print

def surfaceStats(tri):
	dumpSurfaces('Vertex surfaces (std)',
		regina.NNormalSurfaceList.enumerate(tri, regina.NS_STANDARD))
	dumpSurfaces('Vertex surfaces (quad)',
		regina.NNormalSurfaceList.enumerate(tri, regina.NS_QUAD))
	dumpSurfaces('Vertex surfaces (std almost normal)',
		regina.NNormalSurfaceList.enumerate(tri, regina.NS_AN_STANDARD))
	dumpSurfaces('Vertex surfaces (quad-oct almost normal)',
		regina.NNormalSurfaceList.enumerate(tri, regina.NS_AN_QUAD_OCT))
	dumpSurfaces('Fundamental surfaces (std)',
		regina.NNormalSurfaceList.enumerateFundPrimal(tri, regina.NS_STANDARD))
	dumpSurfaces('Fundamental surfaces (quad)',
		regina.NNormalSurfaceList.enumerateFundPrimal(tri, regina.NS_QUAD))
	dumpSurfaces('Fundamental surfaces (std almost normal)',
		regina.NNormalSurfaceList.enumerateFundPrimal(tri, regina.NS_AN_STANDARD))
	dumpSurfaces('Fundamental surfaces (quad-oct almost normal)',
		regina.NNormalSurfaceList.enumerateFundPrimal(tri, regina.NS_AN_QUAD_OCT))

t = regina.NTriangulation()
t.setPacketLabel("Empty triangulation")
surfaceStats(t)

surfaceStats(regina.NExampleTriangulation.threeSphere())
surfaceStats(regina.NExampleTriangulation.s2xs1())
surfaceStats(regina.NExampleTriangulation.rp2xs1())
surfaceStats(regina.NExampleTriangulation.rp3rp3())
surfaceStats(regina.NExampleTriangulation.lens8_3())
surfaceStats(regina.NExampleTriangulation.poincareHomologySphere())
surfaceStats(regina.NExampleTriangulation.lst3_4_7())
surfaceStats(regina.NExampleTriangulation.solidKleinBottle())
surfaceStats(regina.NExampleTriangulation.figureEight())
surfaceStats(regina.NExampleTriangulation.whiteheadLink())
surfaceStats(regina.NExampleTriangulation.gieseking())
