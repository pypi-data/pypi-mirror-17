.\" Man page generated from reStructuredText.
.
.TH "GIT-LINT" "1" "Oct 06, 2016" "0.0.7" "Git Lint"
.SH NAME
git-lint \- Git Lint Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH NAME
.sp
git\-lint \- Run configured linters against changed files
.SH SYNOPSIS
.sp
[verse]
\fBgit lint\fP [<options>...] [<files...>]
.SH DESCRIPTION
.sp
Runs a list of configured linters against a specified list of files in
your repository. By default all linters will be run against the
changed files in your current workspace, from the current working
directory on down.  Command line options let you choose a different
directory, a different of files, the complete set of files, and even
the files currently in the staging area.
.SH OPTIONS
.INDENT 0.0
.TP
\fB\-o <linters>,  \-\-only=<linters>\fP
A comma\-separated list of only those linters to run.
.TP
\fB\-x <linters> \-\-exclude=<linters>\fP
A comma\-separated list of linters to skip.
.TP
\fB\-l, \-\-linters\fP
Show the list of configured linters.
.TP
\fB\-b, \-\-base\fP
Check all changed files from GIT_DIR, not just those in the current directory and down.
.TP
\fB\-a, \-\-all\fP
Scan all files, not just those that have changed.
.TP
\fB\-e, \-\-every\fP
Scan all files, not just those that have changed, from GIT_DIR.  Short for \-b \-a
.TP
\fB\-w, \-\-workspace\fP
Scan the workspace [default]
.TP
\fB\-s, \-\-staging\fP
Scan the staging area (useful for pre\-commit).
.TP
\fB\-c <path>, \-\-config=<path>\fP
Path to config file
.TP
\fB\-t, \-\-bylinter\fP
Group reports by linter first as they appear in the config file [default]
.TP
\fB\-f, \-\-byfile\fP
Group reports by file first, linter second
.TP
\fB\-d, \-\-dryrun\fP
Report what git\-lint would do, but don\(aqt actually do anything.
.TP
\fB\-q, \-\-quiet\fP
Produce a short report of file that failed to pass.
.TP
\fB\-h, \-\-help\fP
Print a short help message
.TP
\fB\-V, \-\-verbose\fP
Print a slightly more verbose long report
.TP
\fB\-v, \-\-version\fP
Print version information
.UNINDENT
.SH OUTPUT
.sp
By default, the output is that of all the linters specified, in the
order in which they appear in the configuration file, followed by
every file specified, sorted ASCIIbetically.  This order can be
flipped (files first, then linters) with the \fB\-\-byfiles\fP option.
.sp
\fBgit lint\fP returns the maximal error code if any linters fail a
pass, or zero if they all succeed.
.SH CONFIGURATION
.sp
\fBgit lint\fP uses a standard INI\-style configuration file.  Aside from the
DEFAULT section, the name of each section is an alphanumeric token name for
a linter, followed by configuration details for that linter.  Standard details
are:
.INDENT 0.0
.IP \(bu 2
output \- Text to print before running a linter.
.IP \(bu 2
command \- The actual command to run, minus the file path
.IP \(bu 2
match \- A comma\-separated list of extensions to match against the linter
.IP \(bu 2
print \- If true, will prefix each line of output from the linter with the filename
.IP \(bu 2
condition \- if "error", the return code of the linter is the status of the pass.  If "output," any output will result in a failure.
.IP \(bu 2
comment \- Text to include when running the \fB\-\-linters\fP option
.UNINDENT
.SH AUTHOR
Kenneth M. "Elf" Sternberg
.SH COPYRIGHT
2016, Kenneth M. "Elf" Sternberg
.\" Generated by docutils manpage writer.
.
