$=
  Copyright 2016 Dominik Madarasz
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
=$

PROGRAM PadLang;
VAR
$=
  Here we declare global variables.
=$
   number : INTEGER;
   a, b   : INTEGER;
   y      : REAL;
   odd    : INTEGER;

PROCEDURE Test(arg0 : INTEGER);
{
    a := arg0;
};

FUNCTION MultiplyTwo(x : INTEGER);
VAR
    t : INTEGER;
{
    t := 2*x;
    RET t
};

{ $ This is the entry point of our program $
    number := 2; $ := is an assignment operator $
    a := number ;
    b := 10 * a + 10 * number DIV 4;
    y := 20 / 7 + 3.14;
    b := 30 / 2 / b * (a + 25 DIV 2);
    IF a > 2 { $ Simple IF-ELSE condition statement. $
        a := 3;
        y := 2;
    } ELSE {
        a := 5;
        y := 35;
    }; $ Literally every scope HAS to end with SEMI-COLON (';'), this is different from C language! $
    $ Anonymous scope. $
    {
        a := a + a;
        $ Here we can evaluate (3 % 2) inline and compare it with right-hand side. $
        IF (3 MOD 2) = 0 THEN $= OPTIONAL: THEN keyword. =$ {
            odd := 1;
        } ELSE IF (2 + 2) = 3 {
            odd := 0;
        } ELSE {
            odd := 3;
        };
    };
    a := 6;
    CASE a {
        2,6 : {
            y := 4;
        };
        3 : {
            y := 5;
        };
        (8-2) : y := 66;
        ELSE {
            y := 0;
        };
    };
    a := MultiplyTwo(2);
}.  $ Program's entry point ends with DOT at the end of the scope. Pascal-style. $

$=
    NOTE:
        Instead of using { and }; braces, you can use Pascal's BEGIN and END; keyword alternatives.
        These are here to support basic Pascal programs.
=$