# coding: utf-8

"""
SnapshotCreationDescriptor.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class SnapshotCreationDescriptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SnapshotCreationDescriptor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'base_volume': 'str',  # (required parameter)
            'snapshot_label': 'str',  # (required parameter)
            'repository_label': 'str',  # (required parameter)
            'repository_capacity': 'int',  # (required parameter)
            'warn_threshold': 'int',  # (required parameter)
            'extent_start': 'int',  # (required parameter)
            'extent_size': 'int',  # (required parameter)
            'rep_full_policy': 'str',  # (required parameter)
            'candidate': 'VolumeCandidate',  # (required parameter)
            'no_mapping': 'bool',  # (required parameter)
            'volume_group_label': 'str',  # (required parameter)
            'create_in_stopped_state': 'bool',  # (required parameter)
            'snapshot_schedule': 'OptionalScheduleCreationDescriptor'
        }

        self.attribute_map = {
            'base_volume': 'baseVolume',  # (required parameter)
            'snapshot_label': 'snapshotLabel',  # (required parameter)
            'repository_label': 'repositoryLabel',  # (required parameter)
            'repository_capacity': 'repositoryCapacity',  # (required parameter)
            'warn_threshold': 'warnThreshold',  # (required parameter)
            'extent_start': 'extentStart',  # (required parameter)
            'extent_size': 'extentSize',  # (required parameter)
            'rep_full_policy': 'repFullPolicy',  # (required parameter)
            'candidate': 'candidate',  # (required parameter)
            'no_mapping': 'noMapping',  # (required parameter)
            'volume_group_label': 'volumeGroupLabel',  # (required parameter)
            'create_in_stopped_state': 'createInStoppedState',  # (required parameter)
            'snapshot_schedule': 'snapshotSchedule'
        }

        self._base_volume = None
        self._snapshot_label = None
        self._repository_label = None
        self._repository_capacity = None
        self._warn_threshold = None
        self._extent_start = None
        self._extent_size = None
        self._rep_full_policy = None
        self._candidate = None
        self._no_mapping = None
        self._volume_group_label = None
        self._create_in_stopped_state = None
        self._snapshot_schedule = None

    @property
    def base_volume(self):
        """
        Gets the base_volume of this SnapshotCreationDescriptor.
        The base volume.

        :return: The base_volume of this SnapshotCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._base_volume

    @base_volume.setter
    def base_volume(self, base_volume):
        """
        Sets the base_volume of this SnapshotCreationDescriptor.
        The base volume.

        :param base_volume: The base_volume of this SnapshotCreationDescriptor.
        :type: str
        """
        self._base_volume = base_volume

    @property
    def snapshot_label(self):
        """
        Gets the snapshot_label of this SnapshotCreationDescriptor.
        The user assigned snapshot label.

        :return: The snapshot_label of this SnapshotCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._snapshot_label

    @snapshot_label.setter
    def snapshot_label(self, snapshot_label):
        """
        Sets the snapshot_label of this SnapshotCreationDescriptor.
        The user assigned snapshot label.

        :param snapshot_label: The snapshot_label of this SnapshotCreationDescriptor.
        :type: str
        """
        self._snapshot_label = snapshot_label

    @property
    def repository_label(self):
        """
        Gets the repository_label of this SnapshotCreationDescriptor.
        The user assigned label for the repository volume.

        :return: The repository_label of this SnapshotCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._repository_label

    @repository_label.setter
    def repository_label(self, repository_label):
        """
        Sets the repository_label of this SnapshotCreationDescriptor.
        The user assigned label for the repository volume.

        :param repository_label: The repository_label of this SnapshotCreationDescriptor.
        :type: str
        """
        self._repository_label = repository_label

    @property
    def repository_capacity(self):
        """
        Gets the repository_capacity of this SnapshotCreationDescriptor.
        The capacity size of the repository to create in bytes.

        :return: The repository_capacity of this SnapshotCreationDescriptor.
        :rtype: int
        :required/optional: required
        """
        return self._repository_capacity

    @repository_capacity.setter
    def repository_capacity(self, repository_capacity):
        """
        Sets the repository_capacity of this SnapshotCreationDescriptor.
        The capacity size of the repository to create in bytes.

        :param repository_capacity: The repository_capacity of this SnapshotCreationDescriptor.
        :type: int
        """
        self._repository_capacity = repository_capacity

    @property
    def warn_threshold(self):
        """
        Gets the warn_threshold of this SnapshotCreationDescriptor.
        The repository utilization warning threshold.

        :return: The warn_threshold of this SnapshotCreationDescriptor.
        :rtype: int
        :required/optional: required
        """
        return self._warn_threshold

    @warn_threshold.setter
    def warn_threshold(self, warn_threshold):
        """
        Sets the warn_threshold of this SnapshotCreationDescriptor.
        The repository utilization warning threshold.

        :param warn_threshold: The warn_threshold of this SnapshotCreationDescriptor.
        :type: int
        """
        self._warn_threshold = warn_threshold

    @property
    def extent_start(self):
        """
        Gets the extent_start of this SnapshotCreationDescriptor.
        The start position of the extent in the base volume (bytes). Not used in this release of software.

        :return: The extent_start of this SnapshotCreationDescriptor.
        :rtype: int
        :required/optional: required
        """
        return self._extent_start

    @extent_start.setter
    def extent_start(self, extent_start):
        """
        Sets the extent_start of this SnapshotCreationDescriptor.
        The start position of the extent in the base volume (bytes). Not used in this release of software.

        :param extent_start: The extent_start of this SnapshotCreationDescriptor.
        :type: int
        """
        self._extent_start = extent_start

    @property
    def extent_size(self):
        """
        Gets the extent_size of this SnapshotCreationDescriptor.
        The size of the extent in bytes. Not used in this release of software.

        :return: The extent_size of this SnapshotCreationDescriptor.
        :rtype: int
        :required/optional: required
        """
        return self._extent_size

    @extent_size.setter
    def extent_size(self, extent_size):
        """
        Sets the extent_size of this SnapshotCreationDescriptor.
        The size of the extent in bytes. Not used in this release of software.

        :param extent_size: The extent_size of this SnapshotCreationDescriptor.
        :type: int
        """
        self._extent_size = extent_size

    @property
    def rep_full_policy(self):
        """
        Gets the rep_full_policy of this SnapshotCreationDescriptor.
        The policy regarding what will happen when the repository is full.

        :return: The rep_full_policy of this SnapshotCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._rep_full_policy

    @rep_full_policy.setter
    def rep_full_policy(self, rep_full_policy):
        """
        Sets the rep_full_policy of this SnapshotCreationDescriptor.
        The policy regarding what will happen when the repository is full.

        :param rep_full_policy: The rep_full_policy of this SnapshotCreationDescriptor.
        :type: str
        """
        allowed_values = ["failwrites", "failsnap", "__UNDEFINED"]
        if rep_full_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `rep_full_policy`, must be one of {0}"
                .format(allowed_values)
            )
        self._rep_full_policy = rep_full_policy

    @property
    def candidate(self):
        """
        Gets the candidate of this SnapshotCreationDescriptor.
        The volume candidate for the repository.

        :return: The candidate of this SnapshotCreationDescriptor.
        :rtype: VolumeCandidate
        :required/optional: required
        """
        return self._candidate

    @candidate.setter
    def candidate(self, candidate):
        """
        Sets the candidate of this SnapshotCreationDescriptor.
        The volume candidate for the repository.

        :param candidate: The candidate of this SnapshotCreationDescriptor.
        :type: VolumeCandidate
        """
        self._candidate = candidate

    @property
    def no_mapping(self):
        """
        Gets the no_mapping of this SnapshotCreationDescriptor.
        True tells the controller NOT to create a mapping. False causes the controller to create a default mapping for the new snapshot. (Note: A True value for noMapping when the SPM feature is disabled will cause a RETCODE_PARTITIONS_DISABLED from createSnapshot. This is because a host cannot access the snapshot if partitions are disabled and a default mapping was not created when the snapshot was created.

        :return: The no_mapping of this SnapshotCreationDescriptor.
        :rtype: bool
        :required/optional: required
        """
        return self._no_mapping

    @no_mapping.setter
    def no_mapping(self, no_mapping):
        """
        Sets the no_mapping of this SnapshotCreationDescriptor.
        True tells the controller NOT to create a mapping. False causes the controller to create a default mapping for the new snapshot. (Note: A True value for noMapping when the SPM feature is disabled will cause a RETCODE_PARTITIONS_DISABLED from createSnapshot. This is because a host cannot access the snapshot if partitions are disabled and a default mapping was not created when the snapshot was created.

        :param no_mapping: The no_mapping of this SnapshotCreationDescriptor.
        :type: bool
        """
        self._no_mapping = no_mapping

    @property
    def volume_group_label(self):
        """
        Gets the volume_group_label of this SnapshotCreationDescriptor.
        The label to assign to the new volume group for the repository, if any. This field is only used when the repository candidate selection type is CANDIDATE_SEL_MANUAL or CANDIDATE_SEL_COUNT.

        :return: The volume_group_label of this SnapshotCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._volume_group_label

    @volume_group_label.setter
    def volume_group_label(self, volume_group_label):
        """
        Sets the volume_group_label of this SnapshotCreationDescriptor.
        The label to assign to the new volume group for the repository, if any. This field is only used when the repository candidate selection type is CANDIDATE_SEL_MANUAL or CANDIDATE_SEL_COUNT.

        :param volume_group_label: The volume_group_label of this SnapshotCreationDescriptor.
        :type: str
        """
        self._volume_group_label = volume_group_label

    @property
    def create_in_stopped_state(self):
        """
        Gets the create_in_stopped_state of this SnapshotCreationDescriptor.
        If true, the snapshot will be created in a stopped state, otherwise it will be started on creation.

        :return: The create_in_stopped_state of this SnapshotCreationDescriptor.
        :rtype: bool
        :required/optional: required
        """
        return self._create_in_stopped_state

    @create_in_stopped_state.setter
    def create_in_stopped_state(self, create_in_stopped_state):
        """
        Sets the create_in_stopped_state of this SnapshotCreationDescriptor.
        If true, the snapshot will be created in a stopped state, otherwise it will be started on creation.

        :param create_in_stopped_state: The create_in_stopped_state of this SnapshotCreationDescriptor.
        :type: bool
        """
        self._create_in_stopped_state = create_in_stopped_state

    @property
    def snapshot_schedule(self):
        """
        Gets the snapshot_schedule of this SnapshotCreationDescriptor.
        The snapshot schedule. The targetObject in the structure is empty.

        :return: The snapshot_schedule of this SnapshotCreationDescriptor.
        :rtype: OptionalScheduleCreationDescriptor
        :required/optional: required
        """
        return self._snapshot_schedule

    @snapshot_schedule.setter
    def snapshot_schedule(self, snapshot_schedule):
        """
        Sets the snapshot_schedule of this SnapshotCreationDescriptor.
        The snapshot schedule. The targetObject in the structure is empty.

        :param snapshot_schedule: The snapshot_schedule of this SnapshotCreationDescriptor.
        :type: OptionalScheduleCreationDescriptor
        """
        self._snapshot_schedule = snapshot_schedule

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

