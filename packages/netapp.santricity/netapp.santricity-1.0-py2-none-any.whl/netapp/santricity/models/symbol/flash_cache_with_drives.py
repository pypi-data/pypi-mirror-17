# coding: utf-8

"""
FlashCacheWithDrives.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class FlashCacheWithDrives(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FlashCacheWithDrives - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'security_type': 'str',  # (required parameter)
            'protection_information_capabilities': 'ProtectionInformationCapabilities',  # (required parameter)
            'used_capacity': 'int',  # (required parameter)
            'security_level': 'str'
        }

        self.attribute_map = {
            'security_type': 'securityType',  # (required parameter)
            'protection_information_capabilities': 'protectionInformationCapabilities',  # (required parameter)
            'used_capacity': 'usedCapacity',  # (required parameter)
            'security_level': 'securityLevel'
        }

        self._security_type = None
        self._protection_information_capabilities = None
        self._used_capacity = None
        self._security_level = None

    @property
    def security_type(self):
        """
        Gets the security_type of this FlashCacheWithDrives.
        The security type of the drives.

        :return: The security_type of this FlashCacheWithDrives.
        :rtype: str
        :required/optional: required
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """
        Sets the security_type of this FlashCacheWithDrives.
        The security type of the drives.

        :param security_type: The security_type of this FlashCacheWithDrives.
        :type: str
        """
        allowed_values = ["unknown", "none", "capable", "enabled", "__UNDEFINED"]
        if security_type not in allowed_values:
            raise ValueError(
                "Invalid value for `security_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._security_type = security_type

    @property
    def protection_information_capabilities(self):
        """
        Gets the protection_information_capabilities of this FlashCacheWithDrives.
        The protection information capabilities of the drives.

        :return: The protection_information_capabilities of this FlashCacheWithDrives.
        :rtype: ProtectionInformationCapabilities
        :required/optional: required
        """
        return self._protection_information_capabilities

    @protection_information_capabilities.setter
    def protection_information_capabilities(self, protection_information_capabilities):
        """
        Sets the protection_information_capabilities of this FlashCacheWithDrives.
        The protection information capabilities of the drives.

        :param protection_information_capabilities: The protection_information_capabilities of this FlashCacheWithDrives.
        :type: ProtectionInformationCapabilities
        """
        self._protection_information_capabilities = protection_information_capabilities

    @property
    def used_capacity(self):
        """
        Gets the used_capacity of this FlashCacheWithDrives.
        The used capacity of the drives (in bytes).

        :return: The used_capacity of this FlashCacheWithDrives.
        :rtype: int
        :required/optional: required
        """
        return self._used_capacity

    @used_capacity.setter
    def used_capacity(self, used_capacity):
        """
        Sets the used_capacity of this FlashCacheWithDrives.
        The used capacity of the drives (in bytes).

        :param used_capacity: The used_capacity of this FlashCacheWithDrives.
        :type: int
        """
        self._used_capacity = used_capacity

    @property
    def security_level(self):
        """
        Gets the security_level of this FlashCacheWithDrives.
        Refines the information in the securityType field to describe the set of drives.

        :return: The security_level of this FlashCacheWithDrives.
        :rtype: str
        :required/optional: required
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """
        Sets the security_level of this FlashCacheWithDrives.
        Refines the information in the securityType field to describe the set of drives.

        :param security_level: The security_level of this FlashCacheWithDrives.
        :type: str
        """
        allowed_values = ["unknown", "none", "mixed", "fde", "fips", "__UNDEFINED"]
        if security_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_level`, must be one of {0}"
                .format(allowed_values)
            )
        self._security_level = security_level

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

