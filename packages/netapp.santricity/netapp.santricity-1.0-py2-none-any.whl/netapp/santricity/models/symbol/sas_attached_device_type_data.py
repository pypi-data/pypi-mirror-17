# coding: utf-8

"""
SasAttachedDeviceTypeData.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class SasAttachedDeviceTypeData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SasAttachedDeviceTypeData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',  # (required parameter)
            'alternate_controller': 'str',  
            'drive': 'str',  
            'expander': 'str',  
            'remote_host_port_address': 'str',  
            'local_controller': 'str',  
            'physical_location': 'Location'
        }

        self.attribute_map = {
            'type': 'type',  # (required parameter)
            'alternate_controller': 'alternateController',  
            'drive': 'drive',  
            'expander': 'expander',  
            'remote_host_port_address': 'remoteHostPortAddress',  
            'local_controller': 'localController',  
            'physical_location': 'physicalLocation'
        }

        self._type = None
        self._alternate_controller = None
        self._drive = None
        self._expander = None
        self._remote_host_port_address = None
        self._local_controller = None
        self._physical_location = None

    @property
    def type(self):
        """
        Gets the type of this SasAttachedDeviceTypeData.
        This enumeration specifies the different kinds of devices that may be attached to a SAS port.

        :return: The type of this SasAttachedDeviceTypeData.
        :rtype: str
        :required/optional: required
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SasAttachedDeviceTypeData.
        This enumeration specifies the different kinds of devices that may be attached to a SAS port.

        :param type: The type of this SasAttachedDeviceTypeData.
        :type: str
        """
        allowed_values = ["unknown", "drive", "expander", "localController", "alternateController", "host", "__UNDEFINED"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def alternate_controller(self):
        """
        Gets the alternate_controller of this SasAttachedDeviceTypeData.
        A reference to the alternate controller that is the attached device. This field is only present if type equals SAS_ATTACHED_DEV_ALTERNATE_CONTROLLER.

        :return: The alternate_controller of this SasAttachedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._alternate_controller

    @alternate_controller.setter
    def alternate_controller(self, alternate_controller):
        """
        Sets the alternate_controller of this SasAttachedDeviceTypeData.
        A reference to the alternate controller that is the attached device. This field is only present if type equals SAS_ATTACHED_DEV_ALTERNATE_CONTROLLER.

        :param alternate_controller: The alternate_controller of this SasAttachedDeviceTypeData.
        :type: str
        """
        self._alternate_controller = alternate_controller

    @property
    def drive(self):
        """
        Gets the drive of this SasAttachedDeviceTypeData.
        A reference to a drive that is the attached device. This field is only present if type equals SAS_ATTACHED_DEV_DRIVE.

        :return: The drive of this SasAttachedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._drive

    @drive.setter
    def drive(self, drive):
        """
        Sets the drive of this SasAttachedDeviceTypeData.
        A reference to a drive that is the attached device. This field is only present if type equals SAS_ATTACHED_DEV_DRIVE.

        :param drive: The drive of this SasAttachedDeviceTypeData.
        :type: str
        """
        self._drive = drive

    @property
    def expander(self):
        """
        Gets the expander of this SasAttachedDeviceTypeData.
        A reference to the SAS expander that is the attached device. This field is only present if type equals SAS_ATTACHED_DEV_EXPANDER.

        :return: The expander of this SasAttachedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._expander

    @expander.setter
    def expander(self, expander):
        """
        Sets the expander of this SasAttachedDeviceTypeData.
        A reference to the SAS expander that is the attached device. This field is only present if type equals SAS_ATTACHED_DEV_EXPANDER.

        :param expander: The expander of this SasAttachedDeviceTypeData.
        :type: str
        """
        self._expander = expander

    @property
    def remote_host_port_address(self):
        """
        Gets the remote_host_port_address of this SasAttachedDeviceTypeData.
        The SAS address of the port in the host computer that is the attached device. This field is only present if type equals SAS_ATTACHED_DEV_HOST.

        :return: The remote_host_port_address of this SasAttachedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._remote_host_port_address

    @remote_host_port_address.setter
    def remote_host_port_address(self, remote_host_port_address):
        """
        Sets the remote_host_port_address of this SasAttachedDeviceTypeData.
        The SAS address of the port in the host computer that is the attached device. This field is only present if type equals SAS_ATTACHED_DEV_HOST.

        :param remote_host_port_address: The remote_host_port_address of this SasAttachedDeviceTypeData.
        :type: str
        """
        self._remote_host_port_address = remote_host_port_address

    @property
    def local_controller(self):
        """
        Gets the local_controller of this SasAttachedDeviceTypeData.
        A reference to the local controller that is the attached device. This field is only present if type equals SAS_ATTACHED_DEV_LOCAL_CONTROLLER.

        :return: The local_controller of this SasAttachedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._local_controller

    @local_controller.setter
    def local_controller(self, local_controller):
        """
        Sets the local_controller of this SasAttachedDeviceTypeData.
        A reference to the local controller that is the attached device. This field is only present if type equals SAS_ATTACHED_DEV_LOCAL_CONTROLLER.

        :param local_controller: The local_controller of this SasAttachedDeviceTypeData.
        :type: str
        """
        self._local_controller = local_controller

    @property
    def physical_location(self):
        """
        Gets the physical_location of this SasAttachedDeviceTypeData.
        The tray-slot location of a device of unknown type. This field is only present if type equals SAS_ATTACHED_DEV_UNKNOWN.

        :return: The physical_location of this SasAttachedDeviceTypeData.
        :rtype: Location
        :required/optional: optional
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """
        Sets the physical_location of this SasAttachedDeviceTypeData.
        The tray-slot location of a device of unknown type. This field is only present if type equals SAS_ATTACHED_DEV_UNKNOWN.

        :param physical_location: The physical_location of this SasAttachedDeviceTypeData.
        :type: Location
        """
        self._physical_location = physical_location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

