# coding: utf-8

"""
RTRTypeRef.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class RTRTypeRef(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RTRTypeRef - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'rtr_type': 'str',  # (required parameter)
            'battery_ref': 'str',  
            'controller_ref': 'str',  
            'drive_ref': 'str',  
            'esm_ref': 'str',  
            'fan_ref': 'str',  
            'interconnect_ref': 'str',  
            'minihub_ref': 'str',  
            'power_supply_ref': 'str',  
            'support_cru_ref': 'str'
        }

        self.attribute_map = {
            'rtr_type': 'rtrType',  # (required parameter)
            'battery_ref': 'batteryRef',  
            'controller_ref': 'controllerRef',  
            'drive_ref': 'driveRef',  
            'esm_ref': 'esmRef',  
            'fan_ref': 'fanRef',  
            'interconnect_ref': 'interconnectRef',  
            'minihub_ref': 'minihubRef',  
            'power_supply_ref': 'powerSupplyRef',  
            'support_cru_ref': 'supportCruRef'
        }

        self._rtr_type = None
        self._battery_ref = None
        self._controller_ref = None
        self._drive_ref = None
        self._esm_ref = None
        self._fan_ref = None
        self._interconnect_ref = None
        self._minihub_ref = None
        self._power_supply_ref = None
        self._support_cru_ref = None

    @property
    def rtr_type(self):
        """
        Gets the rtr_type of this RTRTypeRef.
        This enumeration is used to determine the type of a given component.

        :return: The rtr_type of this RTRTypeRef.
        :rtype: str
        :required/optional: required
        """
        return self._rtr_type

    @rtr_type.setter
    def rtr_type(self, rtr_type):
        """
        Sets the rtr_type of this RTRTypeRef.
        This enumeration is used to determine the type of a given component.

        :param rtr_type: The rtr_type of this RTRTypeRef.
        :type: str
        """
        allowed_values = ["unknown", "interconnect", "supportCru", "controller", "battery", "drive", "esm", "fan", "powerSupply", "minihub", "alarm", "thermalSensor", "drawer", "__UNDEFINED"]
        if rtr_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rtr_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._rtr_type = rtr_type

    @property
    def battery_ref(self):
        """
        Gets the battery_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_BATTERY.

        :return: The battery_ref of this RTRTypeRef.
        :rtype: str
        :required/optional: optional
        """
        return self._battery_ref

    @battery_ref.setter
    def battery_ref(self, battery_ref):
        """
        Sets the battery_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_BATTERY.

        :param battery_ref: The battery_ref of this RTRTypeRef.
        :type: str
        """
        self._battery_ref = battery_ref

    @property
    def controller_ref(self):
        """
        Gets the controller_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_CONTROLLER.

        :return: The controller_ref of this RTRTypeRef.
        :rtype: str
        :required/optional: optional
        """
        return self._controller_ref

    @controller_ref.setter
    def controller_ref(self, controller_ref):
        """
        Sets the controller_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_CONTROLLER.

        :param controller_ref: The controller_ref of this RTRTypeRef.
        :type: str
        """
        self._controller_ref = controller_ref

    @property
    def drive_ref(self):
        """
        Gets the drive_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_DRIVE.

        :return: The drive_ref of this RTRTypeRef.
        :rtype: str
        :required/optional: optional
        """
        return self._drive_ref

    @drive_ref.setter
    def drive_ref(self, drive_ref):
        """
        Sets the drive_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_DRIVE.

        :param drive_ref: The drive_ref of this RTRTypeRef.
        :type: str
        """
        self._drive_ref = drive_ref

    @property
    def esm_ref(self):
        """
        Gets the esm_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_ESM.

        :return: The esm_ref of this RTRTypeRef.
        :rtype: str
        :required/optional: optional
        """
        return self._esm_ref

    @esm_ref.setter
    def esm_ref(self, esm_ref):
        """
        Sets the esm_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_ESM.

        :param esm_ref: The esm_ref of this RTRTypeRef.
        :type: str
        """
        self._esm_ref = esm_ref

    @property
    def fan_ref(self):
        """
        Gets the fan_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_FAN.

        :return: The fan_ref of this RTRTypeRef.
        :rtype: str
        :required/optional: optional
        """
        return self._fan_ref

    @fan_ref.setter
    def fan_ref(self, fan_ref):
        """
        Sets the fan_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_FAN.

        :param fan_ref: The fan_ref of this RTRTypeRef.
        :type: str
        """
        self._fan_ref = fan_ref

    @property
    def interconnect_ref(self):
        """
        Gets the interconnect_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_INTERCONNECT.

        :return: The interconnect_ref of this RTRTypeRef.
        :rtype: str
        :required/optional: optional
        """
        return self._interconnect_ref

    @interconnect_ref.setter
    def interconnect_ref(self, interconnect_ref):
        """
        Sets the interconnect_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_INTERCONNECT.

        :param interconnect_ref: The interconnect_ref of this RTRTypeRef.
        :type: str
        """
        self._interconnect_ref = interconnect_ref

    @property
    def minihub_ref(self):
        """
        Gets the minihub_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_MINIHUB.

        :return: The minihub_ref of this RTRTypeRef.
        :rtype: str
        :required/optional: optional
        """
        return self._minihub_ref

    @minihub_ref.setter
    def minihub_ref(self, minihub_ref):
        """
        Sets the minihub_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_MINIHUB.

        :param minihub_ref: The minihub_ref of this RTRTypeRef.
        :type: str
        """
        self._minihub_ref = minihub_ref

    @property
    def power_supply_ref(self):
        """
        Gets the power_supply_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_POWER_SUPPLY.

        :return: The power_supply_ref of this RTRTypeRef.
        :rtype: str
        :required/optional: optional
        """
        return self._power_supply_ref

    @power_supply_ref.setter
    def power_supply_ref(self, power_supply_ref):
        """
        Sets the power_supply_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_POWER_SUPPLY.

        :param power_supply_ref: The power_supply_ref of this RTRTypeRef.
        :type: str
        """
        self._power_supply_ref = power_supply_ref

    @property
    def support_cru_ref(self):
        """
        Gets the support_cru_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_SUPPORT_CRU.

        :return: The support_cru_ref of this RTRTypeRef.
        :rtype: str
        :required/optional: optional
        """
        return self._support_cru_ref

    @support_cru_ref.setter
    def support_cru_ref(self, support_cru_ref):
        """
        Sets the support_cru_ref of this RTRTypeRef.
        This field is present only if the RTRType is RTR_TYPE_SUPPORT_CRU.

        :param support_cru_ref: The support_cru_ref of this RTRTypeRef.
        :type: str
        """
        self._support_cru_ref = support_cru_ref

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

