# coding: utf-8

"""
IscsiInterfaceChangeableProperties.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class IscsiInterfaceChangeableProperties(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IscsiInterfaceChangeableProperties - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tcp_listen_port': 'list[int]',  # (required parameter)
            'ipv4_address': 'list[str]',  # (required parameter)
            'ipv4_subnet_mask': 'list[str]',  # (required parameter)
            'ipv4_gateway_address': 'list[str]',  # (required parameter)
            'ipv4_address_config_method': 'list[str]',  # (required parameter)
            'maximum_frame_payload_size': 'list[int]',  # (required parameter)
            'ipv4_vlan_id': 'list[SettingControl]',  # (required parameter)
            'ipv4_outbound_packet_priority': 'list[SettingControl]',  # (required parameter)
            'ipv4_enabled': 'list[bool]',  # (required parameter)
            'ipv6_enabled': 'list[bool]',  # (required parameter)
            'ipv6_local_addresses': 'list[IpV6AddressDataBundle]',  # (required parameter)
            'ipv6_routable_addresses': 'list[IpV6AddressDataBundle]',  # (required parameter)
            'ipv6_port_router_address': 'list[IpV6AddressData]',  # (required parameter)
            'ipv6_address_config_method': 'list[str]',  # (required parameter)
            'ipv6_outbound_packet_priority': 'list[SettingControl]',  # (required parameter)
            'ipv6_vlan_id': 'list[SettingControl]',  # (required parameter)
            'ipv6_hop_limit': 'list[int]',  # (required parameter)
            'ipv6_nd_reachable_time': 'list[int]',  # (required parameter)
            'ipv6_nd_retransmit_time': 'list[int]',  # (required parameter)
            'ipv6_nd_stale_timeout': 'list[int]',  # (required parameter)
            'ipv6_duplicate_address_detection_attempts': 'list[int]',  # (required parameter)
            'maximum_interface_speed': 'list[str]'
        }

        self.attribute_map = {
            'tcp_listen_port': 'tcpListenPort',  # (required parameter)
            'ipv4_address': 'ipv4Address',  # (required parameter)
            'ipv4_subnet_mask': 'ipv4SubnetMask',  # (required parameter)
            'ipv4_gateway_address': 'ipv4GatewayAddress',  # (required parameter)
            'ipv4_address_config_method': 'ipv4AddressConfigMethod',  # (required parameter)
            'maximum_frame_payload_size': 'maximumFramePayloadSize',  # (required parameter)
            'ipv4_vlan_id': 'ipv4VlanId',  # (required parameter)
            'ipv4_outbound_packet_priority': 'ipv4OutboundPacketPriority',  # (required parameter)
            'ipv4_enabled': 'ipv4Enabled',  # (required parameter)
            'ipv6_enabled': 'ipv6Enabled',  # (required parameter)
            'ipv6_local_addresses': 'ipv6LocalAddresses',  # (required parameter)
            'ipv6_routable_addresses': 'ipv6RoutableAddresses',  # (required parameter)
            'ipv6_port_router_address': 'ipv6PortRouterAddress',  # (required parameter)
            'ipv6_address_config_method': 'ipv6AddressConfigMethod',  # (required parameter)
            'ipv6_outbound_packet_priority': 'ipv6OutboundPacketPriority',  # (required parameter)
            'ipv6_vlan_id': 'ipv6VlanId',  # (required parameter)
            'ipv6_hop_limit': 'ipv6HopLimit',  # (required parameter)
            'ipv6_nd_reachable_time': 'ipv6NdReachableTime',  # (required parameter)
            'ipv6_nd_retransmit_time': 'ipv6NdRetransmitTime',  # (required parameter)
            'ipv6_nd_stale_timeout': 'ipv6NdStaleTimeout',  # (required parameter)
            'ipv6_duplicate_address_detection_attempts': 'ipv6DuplicateAddressDetectionAttempts',  # (required parameter)
            'maximum_interface_speed': 'maximumInterfaceSpeed'
        }

        self._tcp_listen_port = None
        self._ipv4_address = None
        self._ipv4_subnet_mask = None
        self._ipv4_gateway_address = None
        self._ipv4_address_config_method = None
        self._maximum_frame_payload_size = None
        self._ipv4_vlan_id = None
        self._ipv4_outbound_packet_priority = None
        self._ipv4_enabled = None
        self._ipv6_enabled = None
        self._ipv6_local_addresses = None
        self._ipv6_routable_addresses = None
        self._ipv6_port_router_address = None
        self._ipv6_address_config_method = None
        self._ipv6_outbound_packet_priority = None
        self._ipv6_vlan_id = None
        self._ipv6_hop_limit = None
        self._ipv6_nd_reachable_time = None
        self._ipv6_nd_retransmit_time = None
        self._ipv6_nd_stale_timeout = None
        self._ipv6_duplicate_address_detection_attempts = None
        self._maximum_interface_speed = None

    @property
    def tcp_listen_port(self):
        """
        Gets the tcp_listen_port of this IscsiInterfaceChangeableProperties.
        The tcp port number on which to listen for incoming connections.

        :return: The tcp_listen_port of this IscsiInterfaceChangeableProperties.
        :rtype: list[int]
        :required/optional: required
        """
        return self._tcp_listen_port

    @tcp_listen_port.setter
    def tcp_listen_port(self, tcp_listen_port):
        """
        Sets the tcp_listen_port of this IscsiInterfaceChangeableProperties.
        The tcp port number on which to listen for incoming connections.

        :param tcp_listen_port: The tcp_listen_port of this IscsiInterfaceChangeableProperties.
        :type: list[int]
        """
        self._tcp_listen_port = tcp_listen_port

    @property
    def ipv4_address(self):
        """
        Gets the ipv4_address of this IscsiInterfaceChangeableProperties.
        The IPV4 address for the interface.

        :return: The ipv4_address of this IscsiInterfaceChangeableProperties.
        :rtype: list[str]
        :required/optional: required
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """
        Sets the ipv4_address of this IscsiInterfaceChangeableProperties.
        The IPV4 address for the interface.

        :param ipv4_address: The ipv4_address of this IscsiInterfaceChangeableProperties.
        :type: list[str]
        """
        self._ipv4_address = ipv4_address

    @property
    def ipv4_subnet_mask(self):
        """
        Gets the ipv4_subnet_mask of this IscsiInterfaceChangeableProperties.
        The IPV4 subnet mask for the interface.

        :return: The ipv4_subnet_mask of this IscsiInterfaceChangeableProperties.
        :rtype: list[str]
        :required/optional: required
        """
        return self._ipv4_subnet_mask

    @ipv4_subnet_mask.setter
    def ipv4_subnet_mask(self, ipv4_subnet_mask):
        """
        Sets the ipv4_subnet_mask of this IscsiInterfaceChangeableProperties.
        The IPV4 subnet mask for the interface.

        :param ipv4_subnet_mask: The ipv4_subnet_mask of this IscsiInterfaceChangeableProperties.
        :type: list[str]
        """
        self._ipv4_subnet_mask = ipv4_subnet_mask

    @property
    def ipv4_gateway_address(self):
        """
        Gets the ipv4_gateway_address of this IscsiInterfaceChangeableProperties.
        The gateway IPV4 address for the interface.

        :return: The ipv4_gateway_address of this IscsiInterfaceChangeableProperties.
        :rtype: list[str]
        :required/optional: required
        """
        return self._ipv4_gateway_address

    @ipv4_gateway_address.setter
    def ipv4_gateway_address(self, ipv4_gateway_address):
        """
        Sets the ipv4_gateway_address of this IscsiInterfaceChangeableProperties.
        The gateway IPV4 address for the interface.

        :param ipv4_gateway_address: The ipv4_gateway_address of this IscsiInterfaceChangeableProperties.
        :type: list[str]
        """
        self._ipv4_gateway_address = ipv4_gateway_address

    @property
    def ipv4_address_config_method(self):
        """
        Gets the ipv4_address_config_method of this IscsiInterfaceChangeableProperties.
        The IPV4 configuration method for the interface. The method is either by static setting of the IP address (IPV4_CONFIG_STATIC) or by use of the dynamic host configuration protocol (IPV4_CONFIG_DHCP). Whenever there is a transition of the configuration method from IPV4_CONFIG_STATIC to IPV4_CONFIG_DHCP, the storage array performs the equivalent of a refreshIscsiDhcpParameters operation.

        :return: The ipv4_address_config_method of this IscsiInterfaceChangeableProperties.
        :rtype: list[str]
        :required/optional: required
        """
        return self._ipv4_address_config_method

    @ipv4_address_config_method.setter
    def ipv4_address_config_method(self, ipv4_address_config_method):
        """
        Sets the ipv4_address_config_method of this IscsiInterfaceChangeableProperties.
        The IPV4 configuration method for the interface. The method is either by static setting of the IP address (IPV4_CONFIG_STATIC) or by use of the dynamic host configuration protocol (IPV4_CONFIG_DHCP). Whenever there is a transition of the configuration method from IPV4_CONFIG_STATIC to IPV4_CONFIG_DHCP, the storage array performs the equivalent of a refreshIscsiDhcpParameters operation.

        :param ipv4_address_config_method: The ipv4_address_config_method of this IscsiInterfaceChangeableProperties.
        :type: list[str]
        """
        self._ipv4_address_config_method = ipv4_address_config_method

    @property
    def maximum_frame_payload_size(self):
        """
        Gets the maximum_frame_payload_size of this IscsiInterfaceChangeableProperties.
        The maximum size of the payload section in an Ethernet frame.

        :return: The maximum_frame_payload_size of this IscsiInterfaceChangeableProperties.
        :rtype: list[int]
        :required/optional: required
        """
        return self._maximum_frame_payload_size

    @maximum_frame_payload_size.setter
    def maximum_frame_payload_size(self, maximum_frame_payload_size):
        """
        Sets the maximum_frame_payload_size of this IscsiInterfaceChangeableProperties.
        The maximum size of the payload section in an Ethernet frame.

        :param maximum_frame_payload_size: The maximum_frame_payload_size of this IscsiInterfaceChangeableProperties.
        :type: list[int]
        """
        self._maximum_frame_payload_size = maximum_frame_payload_size

    @property
    def ipv4_vlan_id(self):
        """
        Gets the ipv4_vlan_id of this IscsiInterfaceChangeableProperties.
        Settings that govern the value of the IPV4 VLAN identifier for the interface.

        :return: The ipv4_vlan_id of this IscsiInterfaceChangeableProperties.
        :rtype: list[SettingControl]
        :required/optional: required
        """
        return self._ipv4_vlan_id

    @ipv4_vlan_id.setter
    def ipv4_vlan_id(self, ipv4_vlan_id):
        """
        Sets the ipv4_vlan_id of this IscsiInterfaceChangeableProperties.
        Settings that govern the value of the IPV4 VLAN identifier for the interface.

        :param ipv4_vlan_id: The ipv4_vlan_id of this IscsiInterfaceChangeableProperties.
        :type: list[SettingControl]
        """
        self._ipv4_vlan_id = ipv4_vlan_id

    @property
    def ipv4_outbound_packet_priority(self):
        """
        Gets the ipv4_outbound_packet_priority of this IscsiInterfaceChangeableProperties.
        Settings that govern the priority to associate with outbound IPV4 packets sent over the interface.

        :return: The ipv4_outbound_packet_priority of this IscsiInterfaceChangeableProperties.
        :rtype: list[SettingControl]
        :required/optional: required
        """
        return self._ipv4_outbound_packet_priority

    @ipv4_outbound_packet_priority.setter
    def ipv4_outbound_packet_priority(self, ipv4_outbound_packet_priority):
        """
        Sets the ipv4_outbound_packet_priority of this IscsiInterfaceChangeableProperties.
        Settings that govern the priority to associate with outbound IPV4 packets sent over the interface.

        :param ipv4_outbound_packet_priority: The ipv4_outbound_packet_priority of this IscsiInterfaceChangeableProperties.
        :type: list[SettingControl]
        """
        self._ipv4_outbound_packet_priority = ipv4_outbound_packet_priority

    @property
    def ipv4_enabled(self):
        """
        Gets the ipv4_enabled of this IscsiInterfaceChangeableProperties.
        A boolean which, if set to true, indicates that IPV4 addressing should be enabled for the interface.

        :return: The ipv4_enabled of this IscsiInterfaceChangeableProperties.
        :rtype: list[bool]
        :required/optional: required
        """
        return self._ipv4_enabled

    @ipv4_enabled.setter
    def ipv4_enabled(self, ipv4_enabled):
        """
        Sets the ipv4_enabled of this IscsiInterfaceChangeableProperties.
        A boolean which, if set to true, indicates that IPV4 addressing should be enabled for the interface.

        :param ipv4_enabled: The ipv4_enabled of this IscsiInterfaceChangeableProperties.
        :type: list[bool]
        """
        self._ipv4_enabled = ipv4_enabled

    @property
    def ipv6_enabled(self):
        """
        Gets the ipv6_enabled of this IscsiInterfaceChangeableProperties.
        A boolean which, if set to true, indicates that IPV6 addressing should be enabled for the interface.

        :return: The ipv6_enabled of this IscsiInterfaceChangeableProperties.
        :rtype: list[bool]
        :required/optional: required
        """
        return self._ipv6_enabled

    @ipv6_enabled.setter
    def ipv6_enabled(self, ipv6_enabled):
        """
        Sets the ipv6_enabled of this IscsiInterfaceChangeableProperties.
        A boolean which, if set to true, indicates that IPV6 addressing should be enabled for the interface.

        :param ipv6_enabled: The ipv6_enabled of this IscsiInterfaceChangeableProperties.
        :type: list[bool]
        """
        self._ipv6_enabled = ipv6_enabled

    @property
    def ipv6_local_addresses(self):
        """
        Gets the ipv6_local_addresses of this IscsiInterfaceChangeableProperties.
        The set of IPV6 local addresses that are to be assigned to the interface. This set completely replaces the previous set.

        :return: The ipv6_local_addresses of this IscsiInterfaceChangeableProperties.
        :rtype: list[IpV6AddressDataBundle]
        :required/optional: required
        """
        return self._ipv6_local_addresses

    @ipv6_local_addresses.setter
    def ipv6_local_addresses(self, ipv6_local_addresses):
        """
        Sets the ipv6_local_addresses of this IscsiInterfaceChangeableProperties.
        The set of IPV6 local addresses that are to be assigned to the interface. This set completely replaces the previous set.

        :param ipv6_local_addresses: The ipv6_local_addresses of this IscsiInterfaceChangeableProperties.
        :type: list[IpV6AddressDataBundle]
        """
        self._ipv6_local_addresses = ipv6_local_addresses

    @property
    def ipv6_routable_addresses(self):
        """
        Gets the ipv6_routable_addresses of this IscsiInterfaceChangeableProperties.
        The set of IPV6 routable addresses that are to be assigned to the interface. This set completely replaces the previous set.

        :return: The ipv6_routable_addresses of this IscsiInterfaceChangeableProperties.
        :rtype: list[IpV6AddressDataBundle]
        :required/optional: required
        """
        return self._ipv6_routable_addresses

    @ipv6_routable_addresses.setter
    def ipv6_routable_addresses(self, ipv6_routable_addresses):
        """
        Sets the ipv6_routable_addresses of this IscsiInterfaceChangeableProperties.
        The set of IPV6 routable addresses that are to be assigned to the interface. This set completely replaces the previous set.

        :param ipv6_routable_addresses: The ipv6_routable_addresses of this IscsiInterfaceChangeableProperties.
        :type: list[IpV6AddressDataBundle]
        """
        self._ipv6_routable_addresses = ipv6_routable_addresses

    @property
    def ipv6_port_router_address(self):
        """
        Gets the ipv6_port_router_address of this IscsiInterfaceChangeableProperties.
        The address to set for the IPV6 port router.

        :return: The ipv6_port_router_address of this IscsiInterfaceChangeableProperties.
        :rtype: list[IpV6AddressData]
        :required/optional: required
        """
        return self._ipv6_port_router_address

    @ipv6_port_router_address.setter
    def ipv6_port_router_address(self, ipv6_port_router_address):
        """
        Sets the ipv6_port_router_address of this IscsiInterfaceChangeableProperties.
        The address to set for the IPV6 port router.

        :param ipv6_port_router_address: The ipv6_port_router_address of this IscsiInterfaceChangeableProperties.
        :type: list[IpV6AddressData]
        """
        self._ipv6_port_router_address = ipv6_port_router_address

    @property
    def ipv6_address_config_method(self):
        """
        Gets the ipv6_address_config_method of this IscsiInterfaceChangeableProperties.
        The method to use in configuring IPV6 addresses for the interface.

        :return: The ipv6_address_config_method of this IscsiInterfaceChangeableProperties.
        :rtype: list[str]
        :required/optional: required
        """
        return self._ipv6_address_config_method

    @ipv6_address_config_method.setter
    def ipv6_address_config_method(self, ipv6_address_config_method):
        """
        Sets the ipv6_address_config_method of this IscsiInterfaceChangeableProperties.
        The method to use in configuring IPV6 addresses for the interface.

        :param ipv6_address_config_method: The ipv6_address_config_method of this IscsiInterfaceChangeableProperties.
        :type: list[str]
        """
        self._ipv6_address_config_method = ipv6_address_config_method

    @property
    def ipv6_outbound_packet_priority(self):
        """
        Gets the ipv6_outbound_packet_priority of this IscsiInterfaceChangeableProperties.
        Settings that govern priority assignment for packets sent over the interface.

        :return: The ipv6_outbound_packet_priority of this IscsiInterfaceChangeableProperties.
        :rtype: list[SettingControl]
        :required/optional: required
        """
        return self._ipv6_outbound_packet_priority

    @ipv6_outbound_packet_priority.setter
    def ipv6_outbound_packet_priority(self, ipv6_outbound_packet_priority):
        """
        Sets the ipv6_outbound_packet_priority of this IscsiInterfaceChangeableProperties.
        Settings that govern priority assignment for packets sent over the interface.

        :param ipv6_outbound_packet_priority: The ipv6_outbound_packet_priority of this IscsiInterfaceChangeableProperties.
        :type: list[SettingControl]
        """
        self._ipv6_outbound_packet_priority = ipv6_outbound_packet_priority

    @property
    def ipv6_vlan_id(self):
        """
        Gets the ipv6_vlan_id of this IscsiInterfaceChangeableProperties.
        Settings that govern VLAN identifier assignment for packets sent over the interface.

        :return: The ipv6_vlan_id of this IscsiInterfaceChangeableProperties.
        :rtype: list[SettingControl]
        :required/optional: required
        """
        return self._ipv6_vlan_id

    @ipv6_vlan_id.setter
    def ipv6_vlan_id(self, ipv6_vlan_id):
        """
        Sets the ipv6_vlan_id of this IscsiInterfaceChangeableProperties.
        Settings that govern VLAN identifier assignment for packets sent over the interface.

        :param ipv6_vlan_id: The ipv6_vlan_id of this IscsiInterfaceChangeableProperties.
        :type: list[SettingControl]
        """
        self._ipv6_vlan_id = ipv6_vlan_id

    @property
    def ipv6_hop_limit(self):
        """
        Gets the ipv6_hop_limit of this IscsiInterfaceChangeableProperties.
        The hop limit to use in IPV6 packets sent over the interface.

        :return: The ipv6_hop_limit of this IscsiInterfaceChangeableProperties.
        :rtype: list[int]
        :required/optional: required
        """
        return self._ipv6_hop_limit

    @ipv6_hop_limit.setter
    def ipv6_hop_limit(self, ipv6_hop_limit):
        """
        Sets the ipv6_hop_limit of this IscsiInterfaceChangeableProperties.
        The hop limit to use in IPV6 packets sent over the interface.

        :param ipv6_hop_limit: The ipv6_hop_limit of this IscsiInterfaceChangeableProperties.
        :type: list[int]
        """
        self._ipv6_hop_limit = ipv6_hop_limit

    @property
    def ipv6_nd_reachable_time(self):
        """
        Gets the ipv6_nd_reachable_time of this IscsiInterfaceChangeableProperties.
        The amount of time in milliseconds, within which a neighbor is assumed to be reachable

        :return: The ipv6_nd_reachable_time of this IscsiInterfaceChangeableProperties.
        :rtype: list[int]
        :required/optional: required
        """
        return self._ipv6_nd_reachable_time

    @ipv6_nd_reachable_time.setter
    def ipv6_nd_reachable_time(self, ipv6_nd_reachable_time):
        """
        Sets the ipv6_nd_reachable_time of this IscsiInterfaceChangeableProperties.
        The amount of time in milliseconds, within which a neighbor is assumed to be reachable

        :param ipv6_nd_reachable_time: The ipv6_nd_reachable_time of this IscsiInterfaceChangeableProperties.
        :type: list[int]
        """
        self._ipv6_nd_reachable_time = ipv6_nd_reachable_time

    @property
    def ipv6_nd_retransmit_time(self):
        """
        Gets the ipv6_nd_retransmit_time of this IscsiInterfaceChangeableProperties.
        The number of milliseconds between neighbor solicitation probes.

        :return: The ipv6_nd_retransmit_time of this IscsiInterfaceChangeableProperties.
        :rtype: list[int]
        :required/optional: required
        """
        return self._ipv6_nd_retransmit_time

    @ipv6_nd_retransmit_time.setter
    def ipv6_nd_retransmit_time(self, ipv6_nd_retransmit_time):
        """
        Sets the ipv6_nd_retransmit_time of this IscsiInterfaceChangeableProperties.
        The number of milliseconds between neighbor solicitation probes.

        :param ipv6_nd_retransmit_time: The ipv6_nd_retransmit_time of this IscsiInterfaceChangeableProperties.
        :type: list[int]
        """
        self._ipv6_nd_retransmit_time = ipv6_nd_retransmit_time

    @property
    def ipv6_nd_stale_timeout(self):
        """
        Gets the ipv6_nd_stale_timeout of this IscsiInterfaceChangeableProperties.
        The time in milliseconds after which information for a neighbor that cannot be verified as reachable will be considered \"stale.

        :return: The ipv6_nd_stale_timeout of this IscsiInterfaceChangeableProperties.
        :rtype: list[int]
        :required/optional: required
        """
        return self._ipv6_nd_stale_timeout

    @ipv6_nd_stale_timeout.setter
    def ipv6_nd_stale_timeout(self, ipv6_nd_stale_timeout):
        """
        Sets the ipv6_nd_stale_timeout of this IscsiInterfaceChangeableProperties.
        The time in milliseconds after which information for a neighbor that cannot be verified as reachable will be considered \"stale.

        :param ipv6_nd_stale_timeout: The ipv6_nd_stale_timeout of this IscsiInterfaceChangeableProperties.
        :type: list[int]
        """
        self._ipv6_nd_stale_timeout = ipv6_nd_stale_timeout

    @property
    def ipv6_duplicate_address_detection_attempts(self):
        """
        Gets the ipv6_duplicate_address_detection_attempts of this IscsiInterfaceChangeableProperties.
        The number of neighbor-solicitation messages to send in trying to determine IP address uniqueness.

        :return: The ipv6_duplicate_address_detection_attempts of this IscsiInterfaceChangeableProperties.
        :rtype: list[int]
        :required/optional: required
        """
        return self._ipv6_duplicate_address_detection_attempts

    @ipv6_duplicate_address_detection_attempts.setter
    def ipv6_duplicate_address_detection_attempts(self, ipv6_duplicate_address_detection_attempts):
        """
        Sets the ipv6_duplicate_address_detection_attempts of this IscsiInterfaceChangeableProperties.
        The number of neighbor-solicitation messages to send in trying to determine IP address uniqueness.

        :param ipv6_duplicate_address_detection_attempts: The ipv6_duplicate_address_detection_attempts of this IscsiInterfaceChangeableProperties.
        :type: list[int]
        """
        self._ipv6_duplicate_address_detection_attempts = ipv6_duplicate_address_detection_attempts

    @property
    def maximum_interface_speed(self):
        """
        Gets the maximum_interface_speed of this IscsiInterfaceChangeableProperties.
        This field is used to set the maximum interface speed. If autoconfiguration is supported (see the autoconfigSupport field in the EthernetInterfaceData structure), the value in this field is ignored.

        :return: The maximum_interface_speed of this IscsiInterfaceChangeableProperties.
        :rtype: list[str]
        :required/optional: required
        """
        return self._maximum_interface_speed

    @maximum_interface_speed.setter
    def maximum_interface_speed(self, maximum_interface_speed):
        """
        Sets the maximum_interface_speed of this IscsiInterfaceChangeableProperties.
        This field is used to set the maximum interface speed. If autoconfiguration is supported (see the autoconfigSupport field in the EthernetInterfaceData structure), the value in this field is ignored.

        :param maximum_interface_speed: The maximum_interface_speed of this IscsiInterfaceChangeableProperties.
        :type: list[str]
        """
        self._maximum_interface_speed = maximum_interface_speed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

