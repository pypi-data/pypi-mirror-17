# coding: utf-8

"""
DbmBlkRetrieveChunkDetails.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DbmBlkRetrieveChunkDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DbmBlkRetrieveChunkDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'chunk_crc': 'int',  # (required parameter)
            'block_size': 'int',  # (required parameter)
            'block_consistency_check': 'str',  # (required parameter)
            'structure_integrity_check': 'str',  # (required parameter)
            'sstor_lba': 'list[int]',  # (required parameter)
            'block_data': 'str',  # (required parameter)
            'source_location': 'str'
        }

        self.attribute_map = {
            'chunk_crc': 'chunkCRC',  # (required parameter)
            'block_size': 'blockSize',  # (required parameter)
            'block_consistency_check': 'blockConsistencyCheck',  # (required parameter)
            'structure_integrity_check': 'structureIntegrityCheck',  # (required parameter)
            'sstor_lba': 'sstorLBA',  # (required parameter)
            'block_data': 'blockData',  # (required parameter)
            'source_location': 'sourceLocation'
        }

        self._chunk_crc = None
        self._block_size = None
        self._block_consistency_check = None
        self._structure_integrity_check = None
        self._sstor_lba = None
        self._block_data = None
        self._source_location = None

    @property
    def chunk_crc(self):
        """
        Gets the chunk_crc of this DbmBlkRetrieveChunkDetails.
        CRC data.

        :return: The chunk_crc of this DbmBlkRetrieveChunkDetails.
        :rtype: int
        :required/optional: required
        """
        return self._chunk_crc

    @chunk_crc.setter
    def chunk_crc(self, chunk_crc):
        """
        Sets the chunk_crc of this DbmBlkRetrieveChunkDetails.
        CRC data.

        :param chunk_crc: The chunk_crc of this DbmBlkRetrieveChunkDetails.
        :type: int
        """
        self._chunk_crc = chunk_crc

    @property
    def block_size(self):
        """
        Gets the block_size of this DbmBlkRetrieveChunkDetails.
        The size of each DBM block (sector).

        :return: The block_size of this DbmBlkRetrieveChunkDetails.
        :rtype: int
        :required/optional: required
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """
        Sets the block_size of this DbmBlkRetrieveChunkDetails.
        The size of each DBM block (sector).

        :param block_size: The block_size of this DbmBlkRetrieveChunkDetails.
        :type: int
        """
        self._block_size = block_size

    @property
    def block_consistency_check(self):
        """
        Gets the block_consistency_check of this DbmBlkRetrieveChunkDetails.
        indicates whether the overall retrieval process is based on a DBM image containing one or more mirror consistency mismatches.

        :return: The block_consistency_check of this DbmBlkRetrieveChunkDetails.
        :rtype: str
        :required/optional: required
        """
        return self._block_consistency_check

    @block_consistency_check.setter
    def block_consistency_check(self, block_consistency_check):
        """
        Sets the block_consistency_check of this DbmBlkRetrieveChunkDetails.
        indicates whether the overall retrieval process is based on a DBM image containing one or more mirror consistency mismatches.

        :param block_consistency_check: The block_consistency_check of this DbmBlkRetrieveChunkDetails.
        :type: str
        """
        allowed_values = ["skipped", "passed", "failed", "__UNDEFINED"]
        if block_consistency_check not in allowed_values:
            raise ValueError(
                "Invalid value for `block_consistency_check`, must be one of {0}"
                .format(allowed_values)
            )
        self._block_consistency_check = block_consistency_check

    @property
    def structure_integrity_check(self):
        """
        Gets the structure_integrity_check of this DbmBlkRetrieveChunkDetails.
        Indicates whether the overall image has a structural fault or if the integrity wasn't checked prior to retrieval.

        :return: The structure_integrity_check of this DbmBlkRetrieveChunkDetails.
        :rtype: str
        :required/optional: required
        """
        return self._structure_integrity_check

    @structure_integrity_check.setter
    def structure_integrity_check(self, structure_integrity_check):
        """
        Sets the structure_integrity_check of this DbmBlkRetrieveChunkDetails.
        Indicates whether the overall image has a structural fault or if the integrity wasn't checked prior to retrieval.

        :param structure_integrity_check: The structure_integrity_check of this DbmBlkRetrieveChunkDetails.
        :type: str
        """
        allowed_values = ["skipped", "passed", "failed", "__UNDEFINED"]
        if structure_integrity_check not in allowed_values:
            raise ValueError(
                "Invalid value for `structure_integrity_check`, must be one of {0}"
                .format(allowed_values)
            )
        self._structure_integrity_check = structure_integrity_check

    @property
    def sstor_lba(self):
        """
        Gets the sstor_lba of this DbmBlkRetrieveChunkDetails.
        An array identifying the block addresses of the blocks whose data resides in the blockData array

        :return: The sstor_lba of this DbmBlkRetrieveChunkDetails.
        :rtype: list[int]
        :required/optional: required
        """
        return self._sstor_lba

    @sstor_lba.setter
    def sstor_lba(self, sstor_lba):
        """
        Sets the sstor_lba of this DbmBlkRetrieveChunkDetails.
        An array identifying the block addresses of the blocks whose data resides in the blockData array

        :param sstor_lba: The sstor_lba of this DbmBlkRetrieveChunkDetails.
        :type: list[int]
        """
        self._sstor_lba = sstor_lba

    @property
    def block_data(self):
        """
        Gets the block_data of this DbmBlkRetrieveChunkDetails.
        An array of block data.

        :return: The block_data of this DbmBlkRetrieveChunkDetails.
        :rtype: str
        :required/optional: required
        """
        return self._block_data

    @block_data.setter
    def block_data(self, block_data):
        """
        Sets the block_data of this DbmBlkRetrieveChunkDetails.
        An array of block data.

        :param block_data: The block_data of this DbmBlkRetrieveChunkDetails.
        :type: str
        """
        self._block_data = block_data

    @property
    def source_location(self):
        """
        Gets the source_location of this DbmBlkRetrieveChunkDetails.
        Defines which storage device to read the image from. Repeated here to ensure all chunks were read from the same place.

        :return: The source_location of this DbmBlkRetrieveChunkDetails.
        :rtype: str
        :required/optional: required
        """
        return self._source_location

    @source_location.setter
    def source_location(self, source_location):
        """
        Sets the source_location of this DbmBlkRetrieveChunkDetails.
        Defines which storage device to read the image from. Repeated here to ensure all chunks were read from the same place.

        :param source_location: The source_location of this DbmBlkRetrieveChunkDetails.
        :type: str
        """
        allowed_values = ["unknown", "dacstoreDisks", "onboardRpa", "hostImage", "__UNDEFINED"]
        if source_location not in allowed_values:
            raise ValueError(
                "Invalid value for `source_location`, must be one of {0}"
                .format(allowed_values)
            )
        self._source_location = source_location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

