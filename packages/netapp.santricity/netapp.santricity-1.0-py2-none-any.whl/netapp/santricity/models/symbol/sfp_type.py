# coding: utf-8

"""
SFPType.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class SFPType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SFPType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sfp_ident_type': 'str',  # (required parameter)
            'sfp_connect_type': 'str',  # (required parameter)
            'sfp_link_l_type': 'str',  # (required parameter)
            'sfp_transmitter_type': 'str',  # (required parameter)
            'sfp_speed': 'list[str]',  # (required parameter)
            'sfp_transmission_media': 'list[str]',  # (required parameter)
            'manufacturer_date': 'int',  # (required parameter)
            'vendor_name': 'str',  # (required parameter)
            'vendor_pn': 'str',  # (required parameter)
            'vendor_rev': 'str',  # (required parameter)
            'vendor_sn': 'str',  # (required parameter)
            'vendor_oui': 'str',  # (required parameter)
            'reserved1': 'str',  
            'reserved2': 'str'
        }

        self.attribute_map = {
            'sfp_ident_type': 'sfpIdentType',  # (required parameter)
            'sfp_connect_type': 'sfpConnectType',  # (required parameter)
            'sfp_link_l_type': 'sfpLinkLType',  # (required parameter)
            'sfp_transmitter_type': 'sfpTransmitterType',  # (required parameter)
            'sfp_speed': 'sfpSpeed',  # (required parameter)
            'sfp_transmission_media': 'sfpTransmissionMedia',  # (required parameter)
            'manufacturer_date': 'manufacturerDate',  # (required parameter)
            'vendor_name': 'vendorName',  # (required parameter)
            'vendor_pn': 'vendorPN',  # (required parameter)
            'vendor_rev': 'vendorRev',  # (required parameter)
            'vendor_sn': 'vendorSN',  # (required parameter)
            'vendor_oui': 'vendorOUI',  # (required parameter)
            'reserved1': 'reserved1',  
            'reserved2': 'reserved2'
        }

        self._sfp_ident_type = None
        self._sfp_connect_type = None
        self._sfp_link_l_type = None
        self._sfp_transmitter_type = None
        self._sfp_speed = None
        self._sfp_transmission_media = None
        self._manufacturer_date = None
        self._vendor_name = None
        self._vendor_pn = None
        self._vendor_rev = None
        self._vendor_sn = None
        self._vendor_oui = None
        self._reserved1 = None
        self._reserved2 = None

    @property
    def sfp_ident_type(self):
        """
        Gets the sfp_ident_type of this SFPType.
        Information about the SFP type.

        :return: The sfp_ident_type of this SFPType.
        :rtype: str
        :required/optional: required
        """
        return self._sfp_ident_type

    @sfp_ident_type.setter
    def sfp_ident_type(self, sfp_ident_type):
        """
        Sets the sfp_ident_type of this SFPType.
        Information about the SFP type.

        :param sfp_ident_type: The sfp_ident_type of this SFPType.
        :type: str
        """
        allowed_values = ["unknown", "gbic", "soldered", "sfp", "__UNDEFINED"]
        if sfp_ident_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sfp_ident_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._sfp_ident_type = sfp_ident_type

    @property
    def sfp_connect_type(self):
        """
        Gets the sfp_connect_type of this SFPType.
        Information about the SFP connector type.

        :return: The sfp_connect_type of this SFPType.
        :rtype: str
        :required/optional: required
        """
        return self._sfp_connect_type

    @sfp_connect_type.setter
    def sfp_connect_type(self, sfp_connect_type):
        """
        Sets the sfp_connect_type of this SFPType.
        Information about the SFP connector type.

        :param sfp_connect_type: The sfp_connect_type of this SFPType.
        :type: str
        """
        allowed_values = ["unknown", "sc", "fcs1cc", "fcs2cc", "bncortnc", "fcCoax", "fJack", "lc", "mtRj", "mu", "sg", "optPigtail", "hssdcii", "copPigtail", "rj45", "noSeparableConnector", "__UNDEFINED"]
        if sfp_connect_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sfp_connect_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._sfp_connect_type = sfp_connect_type

    @property
    def sfp_link_l_type(self):
        """
        Gets the sfp_link_l_type of this SFPType.
        Information about the SFP link length.

        :return: The sfp_link_l_type of this SFPType.
        :rtype: str
        :required/optional: required
        """
        return self._sfp_link_l_type

    @sfp_link_l_type.setter
    def sfp_link_l_type(self, sfp_link_l_type):
        """
        Sets the sfp_link_l_type of this SFPType.
        Information about the SFP link length.

        :param sfp_link_l_type: The sfp_link_l_type of this SFPType.
        :type: str
        """
        allowed_values = ["typeUnknown", "typeVlong", "typeShort", "typeIntermediate", "typeLong", "typeMedium", "typeNa", "__UNDEFINED"]
        if sfp_link_l_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sfp_link_l_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._sfp_link_l_type = sfp_link_l_type

    @property
    def sfp_transmitter_type(self):
        """
        Gets the sfp_transmitter_type of this SFPType.
        Information about the SFP transmitter type.

        :return: The sfp_transmitter_type of this SFPType.
        :rtype: str
        :required/optional: required
        """
        return self._sfp_transmitter_type

    @sfp_transmitter_type.setter
    def sfp_transmitter_type(self, sfp_transmitter_type):
        """
        Sets the sfp_transmitter_type of this SFPType.
        Information about the SFP transmitter type.

        :param sfp_transmitter_type: The sfp_transmitter_type of this SFPType.
        :type: str
        """
        allowed_values = ["unknown", "lwlLc", "eiee", "eiae", "swlwoofc", "swlwofc", "lwlLl", "na", "__UNDEFINED"]
        if sfp_transmitter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sfp_transmitter_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._sfp_transmitter_type = sfp_transmitter_type

    @property
    def sfp_speed(self):
        """
        Gets the sfp_speed of this SFPType.
        Information about the SFP speed.

        :return: The sfp_speed of this SFPType.
        :rtype: list[str]
        :required/optional: required
        """
        return self._sfp_speed

    @sfp_speed.setter
    def sfp_speed(self, sfp_speed):
        """
        Sets the sfp_speed of this SFPType.
        Information about the SFP speed.

        :param sfp_speed: The sfp_speed of this SFPType.
        :type: list[str]
        """
        self._sfp_speed = sfp_speed

    @property
    def sfp_transmission_media(self):
        """
        Gets the sfp_transmission_media of this SFPType.
        Information about the SFP transmission media.

        :return: The sfp_transmission_media of this SFPType.
        :rtype: list[str]
        :required/optional: required
        """
        return self._sfp_transmission_media

    @sfp_transmission_media.setter
    def sfp_transmission_media(self, sfp_transmission_media):
        """
        Sets the sfp_transmission_media of this SFPType.
        Information about the SFP transmission media.

        :param sfp_transmission_media: The sfp_transmission_media of this SFPType.
        :type: list[str]
        """
        self._sfp_transmission_media = sfp_transmission_media

    @property
    def manufacturer_date(self):
        """
        Gets the manufacturer_date of this SFPType.
        The date when the SFP was manufactured.

        :return: The manufacturer_date of this SFPType.
        :rtype: int
        :required/optional: required
        """
        return self._manufacturer_date

    @manufacturer_date.setter
    def manufacturer_date(self, manufacturer_date):
        """
        Sets the manufacturer_date of this SFPType.
        The date when the SFP was manufactured.

        :param manufacturer_date: The manufacturer_date of this SFPType.
        :type: int
        """
        self._manufacturer_date = manufacturer_date

    @property
    def vendor_name(self):
        """
        Gets the vendor_name of this SFPType.
        The vendor name of the SFP.

        :return: The vendor_name of this SFPType.
        :rtype: str
        :required/optional: required
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """
        Sets the vendor_name of this SFPType.
        The vendor name of the SFP.

        :param vendor_name: The vendor_name of this SFPType.
        :type: str
        """
        self._vendor_name = vendor_name

    @property
    def vendor_pn(self):
        """
        Gets the vendor_pn of this SFPType.
        The vendor part name of the SFP.

        :return: The vendor_pn of this SFPType.
        :rtype: str
        :required/optional: required
        """
        return self._vendor_pn

    @vendor_pn.setter
    def vendor_pn(self, vendor_pn):
        """
        Sets the vendor_pn of this SFPType.
        The vendor part name of the SFP.

        :param vendor_pn: The vendor_pn of this SFPType.
        :type: str
        """
        self._vendor_pn = vendor_pn

    @property
    def vendor_rev(self):
        """
        Gets the vendor_rev of this SFPType.
        The vendor revision of the SFP

        :return: The vendor_rev of this SFPType.
        :rtype: str
        :required/optional: required
        """
        return self._vendor_rev

    @vendor_rev.setter
    def vendor_rev(self, vendor_rev):
        """
        Sets the vendor_rev of this SFPType.
        The vendor revision of the SFP

        :param vendor_rev: The vendor_rev of this SFPType.
        :type: str
        """
        self._vendor_rev = vendor_rev

    @property
    def vendor_sn(self):
        """
        Gets the vendor_sn of this SFPType.
        The vendor serial number of the SFP.

        :return: The vendor_sn of this SFPType.
        :rtype: str
        :required/optional: required
        """
        return self._vendor_sn

    @vendor_sn.setter
    def vendor_sn(self, vendor_sn):
        """
        Sets the vendor_sn of this SFPType.
        The vendor serial number of the SFP.

        :param vendor_sn: The vendor_sn of this SFPType.
        :type: str
        """
        self._vendor_sn = vendor_sn

    @property
    def vendor_oui(self):
        """
        Gets the vendor_oui of this SFPType.
        The vendor unique OUI field of the SFP.

        :return: The vendor_oui of this SFPType.
        :rtype: str
        :required/optional: required
        """
        return self._vendor_oui

    @vendor_oui.setter
    def vendor_oui(self, vendor_oui):
        """
        Sets the vendor_oui of this SFPType.
        The vendor unique OUI field of the SFP.

        :param vendor_oui: The vendor_oui of this SFPType.
        :type: str
        """
        self._vendor_oui = vendor_oui

    @property
    def reserved1(self):
        """
        Gets the reserved1 of this SFPType.


        :return: The reserved1 of this SFPType.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved1

    @reserved1.setter
    def reserved1(self, reserved1):
        """
        Sets the reserved1 of this SFPType.


        :param reserved1: The reserved1 of this SFPType.
        :type: str
        """
        self._reserved1 = reserved1

    @property
    def reserved2(self):
        """
        Gets the reserved2 of this SFPType.


        :return: The reserved2 of this SFPType.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved2

    @reserved2.setter
    def reserved2(self, reserved2):
        """
        Sets the reserved2 of this SFPType.


        :param reserved2: The reserved2 of this SFPType.
        :type: str
        """
        self._reserved2 = reserved2

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

