# coding: utf-8

"""
Drawer.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class Drawer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Drawer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'drawer_ref': 'str',  # (required parameter)
            'is_open': 'bool',  # (required parameter)
            'status': 'str',  # (required parameter)
            'physical_location': 'Location',  # (required parameter)
            'repair_policy': 'RepairPolicy',  # (required parameter)
            'software_version': 'str',  # (required parameter)
            'part_number': 'str',  # (required parameter)
            'serial_number': 'str',  # (required parameter)
            'vendor_name': 'str',  # (required parameter)
            'manufacture_date': 'int',  # (required parameter)
            'fru_type': 'str',  # (required parameter)
            'drawer_type': 'str',  # (required parameter)
            'id': 'str'
        }

        self.attribute_map = {
            'drawer_ref': 'drawerRef',  # (required parameter)
            'is_open': 'isOpen',  # (required parameter)
            'status': 'status',  # (required parameter)
            'physical_location': 'physicalLocation',  # (required parameter)
            'repair_policy': 'repairPolicy',  # (required parameter)
            'software_version': 'softwareVersion',  # (required parameter)
            'part_number': 'partNumber',  # (required parameter)
            'serial_number': 'serialNumber',  # (required parameter)
            'vendor_name': 'vendorName',  # (required parameter)
            'manufacture_date': 'manufactureDate',  # (required parameter)
            'fru_type': 'fruType',  # (required parameter)
            'drawer_type': 'drawerType',  # (required parameter)
            'id': 'id'
        }

        self._drawer_ref = None
        self._is_open = None
        self._status = None
        self._physical_location = None
        self._repair_policy = None
        self._software_version = None
        self._part_number = None
        self._serial_number = None
        self._vendor_name = None
        self._manufacture_date = None
        self._fru_type = None
        self._drawer_type = None
        self._id = None

    @property
    def drawer_ref(self):
        """
        Gets the drawer_ref of this Drawer.
        The component reference associated with the drawer.

        :return: The drawer_ref of this Drawer.
        :rtype: str
        :required/optional: required
        """
        return self._drawer_ref

    @drawer_ref.setter
    def drawer_ref(self, drawer_ref):
        """
        Sets the drawer_ref of this Drawer.
        The component reference associated with the drawer.

        :param drawer_ref: The drawer_ref of this Drawer.
        :type: str
        """
        self._drawer_ref = drawer_ref

    @property
    def is_open(self):
        """
        Gets the is_open of this Drawer.
        This value is set to true when the drawer is open; otherwise it is set to false.

        :return: The is_open of this Drawer.
        :rtype: bool
        :required/optional: required
        """
        return self._is_open

    @is_open.setter
    def is_open(self, is_open):
        """
        Sets the is_open of this Drawer.
        This value is set to true when the drawer is open; otherwise it is set to false.

        :param is_open: The is_open of this Drawer.
        :type: bool
        """
        self._is_open = is_open

    @property
    def status(self):
        """
        Gets the status of this Drawer.
        This field contains the drawer status.

        :return: The status of this Drawer.
        :rtype: str
        :required/optional: required
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Drawer.
        This field contains the drawer status.

        :param status: The status of this Drawer.
        :type: str
        """
        allowed_values = ["unknown", "optimal", "failed", "opened", "removed", "degraded", "invalid", "__UNDEFINED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def physical_location(self):
        """
        Gets the physical_location of this Drawer.
        This field contains the drawer location. This will be a tray reference to the tray containing the drawer.

        :return: The physical_location of this Drawer.
        :rtype: Location
        :required/optional: required
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """
        Sets the physical_location of this Drawer.
        This field contains the drawer location. This will be a tray reference to the tray containing the drawer.

        :param physical_location: The physical_location of this Drawer.
        :type: Location
        """
        self._physical_location = physical_location

    @property
    def repair_policy(self):
        """
        Gets the repair_policy of this Drawer.
        This field contains the repair policy for the drawer component.

        :return: The repair_policy of this Drawer.
        :rtype: RepairPolicy
        :required/optional: required
        """
        return self._repair_policy

    @repair_policy.setter
    def repair_policy(self, repair_policy):
        """
        Sets the repair_policy of this Drawer.
        This field contains the repair policy for the drawer component.

        :param repair_policy: The repair_policy of this Drawer.
        :type: RepairPolicy
        """
        self._repair_policy = repair_policy

    @property
    def software_version(self):
        """
        Gets the software_version of this Drawer.
        This data is a variable length ASCII text string. It contains the firmware version for the DCM (Drawer Control and Monitor) chip on the drawer component.

        :return: The software_version of this Drawer.
        :rtype: str
        :required/optional: required
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """
        Sets the software_version of this Drawer.
        This data is a variable length ASCII text string. It contains the firmware version for the DCM (Drawer Control and Monitor) chip on the drawer component.

        :param software_version: The software_version of this Drawer.
        :type: str
        """
        self._software_version = software_version

    @property
    def part_number(self):
        """
        Gets the part_number of this Drawer.
        This data is a variable length ASCII text string. It contains the DCM (Drawer Control and Monitor) chip part number on the drawer component. This part number is from VPD data.

        :return: The part_number of this Drawer.
        :rtype: str
        :required/optional: required
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """
        Sets the part_number of this Drawer.
        This data is a variable length ASCII text string. It contains the DCM (Drawer Control and Monitor) chip part number on the drawer component. This part number is from VPD data.

        :param part_number: The part_number of this Drawer.
        :type: str
        """
        self._part_number = part_number

    @property
    def serial_number(self):
        """
        Gets the serial_number of this Drawer.
        This data is a variable length ASCII text string. It contains the DCM (Drawer Control and Monitor) chip serial number on the drawer component. This serial number is from VPD data.

        :return: The serial_number of this Drawer.
        :rtype: str
        :required/optional: required
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this Drawer.
        This data is a variable length ASCII text string. It contains the DCM (Drawer Control and Monitor) chip serial number on the drawer component. This serial number is from VPD data.

        :param serial_number: The serial_number of this Drawer.
        :type: str
        """
        self._serial_number = serial_number

    @property
    def vendor_name(self):
        """
        Gets the vendor_name of this Drawer.
        This data is a variable length ASCII text string. It contains the DCM (Drawer Control and Monitor) chip manufacturer name, obtained from VPD data.

        :return: The vendor_name of this Drawer.
        :rtype: str
        :required/optional: required
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """
        Sets the vendor_name of this Drawer.
        This data is a variable length ASCII text string. It contains the DCM (Drawer Control and Monitor) chip manufacturer name, obtained from VPD data.

        :param vendor_name: The vendor_name of this Drawer.
        :type: str
        """
        self._vendor_name = vendor_name

    @property
    def manufacture_date(self):
        """
        Gets the manufacture_date of this Drawer.
        This data is a variable length ASCII text string. It contains the DCM (Drawer Control and Monitor) manufacture date, obtained from VPD data.

        :return: The manufacture_date of this Drawer.
        :rtype: int
        :required/optional: required
        """
        return self._manufacture_date

    @manufacture_date.setter
    def manufacture_date(self, manufacture_date):
        """
        Sets the manufacture_date of this Drawer.
        This data is a variable length ASCII text string. It contains the DCM (Drawer Control and Monitor) manufacture date, obtained from VPD data.

        :param manufacture_date: The manufacture_date of this Drawer.
        :type: int
        """
        self._manufacture_date = manufacture_date

    @property
    def fru_type(self):
        """
        Gets the fru_type of this Drawer.
        This data is a variable length ASCII text string. It contains the Field Replaceable Unit (FRU) type, obtained from VPD data.

        :return: The fru_type of this Drawer.
        :rtype: str
        :required/optional: required
        """
        return self._fru_type

    @fru_type.setter
    def fru_type(self, fru_type):
        """
        Sets the fru_type of this Drawer.
        This data is a variable length ASCII text string. It contains the Field Replaceable Unit (FRU) type, obtained from VPD data.

        :param fru_type: The fru_type of this Drawer.
        :type: str
        """
        self._fru_type = fru_type

    @property
    def drawer_type(self):
        """
        Gets the drawer_type of this Drawer.
        This data is a variable length ASCII text string describing the type of drawer.

        :return: The drawer_type of this Drawer.
        :rtype: str
        :required/optional: required
        """
        return self._drawer_type

    @drawer_type.setter
    def drawer_type(self, drawer_type):
        """
        Sets the drawer_type of this Drawer.
        This data is a variable length ASCII text string describing the type of drawer.

        :param drawer_type: The drawer_type of this Drawer.
        :type: str
        """
        self._drawer_type = drawer_type

    @property
    def id(self):
        """
        Gets the id of this Drawer.


        :return: The id of this Drawer.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Drawer.


        :param id: The id of this Drawer.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

