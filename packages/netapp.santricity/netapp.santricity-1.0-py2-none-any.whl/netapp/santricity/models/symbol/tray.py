# coding: utf-8

"""
Tray.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class Tray(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Tray - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',  # (required parameter)
            'orientation': 'str',  # (required parameter)
            'num_controller_slots': 'int',  # (required parameter)
            'num_drive_slots': 'int',  # (required parameter)
            'tray_id': 'int',  # (required parameter)
            'tray_ref': 'str',  # (required parameter)
            'non_redundant_access': 'bool',  # (required parameter)
            'part_number': 'str',  # (required parameter)
            'serial_number': 'str',  # (required parameter)
            'vendor_name': 'str',  # (required parameter)
            'manufacturer_date': 'int',  # (required parameter)
            'fru_type': 'str',  # (required parameter)
            'tray_id_mismatch': 'bool',  # (required parameter)
            'tray_id_conflict': 'bool',  # (required parameter)
            'esm_version_mismatch': 'bool',  # (required parameter)
            'esm_miswire': 'bool',  # (required parameter)
            'drv_mh_speed_mismatch': 'bool',  # (required parameter)
            'unsupported_tray': 'bool',  # (required parameter)
            'working_channel': 'int',  # (required parameter)
            'max_speed': 'str',  # (required parameter)
            'tray_technology_type': 'str',  # (required parameter)
            'esm_group_error': 'bool',  # (required parameter)
            'uncertified_tray': 'bool',  # (required parameter)
            'locate_tray': 'bool',  # (required parameter)
            'esm_hardware_mismatch': 'bool',  # (required parameter)
            'has_configurable_tray_id': 'bool',  # (required parameter)
            'front_end_interface_technology': 'str',  # (required parameter)
            'drive_technologies': 'list[str]',  # (required parameter)
            'num_drive_compartments': 'int',  # (required parameter)
            'num_drive_slots_per_compartment': 'int',  # (required parameter)
            'tray_attributes': 'list[TrayAttribute]',  # (required parameter)
            'is_misconfigured': 'bool',  # (required parameter)
            'esm_factory_defaults_mismatch': 'bool',  # (required parameter)
            'physical_location': 'Location',  # (required parameter)
            'num_drawers': 'int',  # (required parameter)
            'drive_layout': 'DriveLayout',  # (required parameter)
            'factory_defaults_data': 'FactoryDefaultsVersionData',  # (required parameter)
            'locate_in_progress': 'bool',  # (required parameter)
            'has_tray_identity_indicator': 'bool',  # (required parameter)
            'id': 'str'
        }

        self.attribute_map = {
            'type': 'type',  # (required parameter)
            'orientation': 'orientation',  # (required parameter)
            'num_controller_slots': 'numControllerSlots',  # (required parameter)
            'num_drive_slots': 'numDriveSlots',  # (required parameter)
            'tray_id': 'trayId',  # (required parameter)
            'tray_ref': 'trayRef',  # (required parameter)
            'non_redundant_access': 'nonRedundantAccess',  # (required parameter)
            'part_number': 'partNumber',  # (required parameter)
            'serial_number': 'serialNumber',  # (required parameter)
            'vendor_name': 'vendorName',  # (required parameter)
            'manufacturer_date': 'manufacturerDate',  # (required parameter)
            'fru_type': 'fruType',  # (required parameter)
            'tray_id_mismatch': 'trayIDMismatch',  # (required parameter)
            'tray_id_conflict': 'trayIDConflict',  # (required parameter)
            'esm_version_mismatch': 'esmVersionMismatch',  # (required parameter)
            'esm_miswire': 'esmMiswire',  # (required parameter)
            'drv_mh_speed_mismatch': 'drvMHSpeedMismatch',  # (required parameter)
            'unsupported_tray': 'unsupportedTray',  # (required parameter)
            'working_channel': 'workingChannel',  # (required parameter)
            'max_speed': 'maxSpeed',  # (required parameter)
            'tray_technology_type': 'trayTechnologyType',  # (required parameter)
            'esm_group_error': 'esmGroupError',  # (required parameter)
            'uncertified_tray': 'uncertifiedTray',  # (required parameter)
            'locate_tray': 'locateTray',  # (required parameter)
            'esm_hardware_mismatch': 'esmHardwareMismatch',  # (required parameter)
            'has_configurable_tray_id': 'hasConfigurableTrayId',  # (required parameter)
            'front_end_interface_technology': 'frontEndInterfaceTechnology',  # (required parameter)
            'drive_technologies': 'driveTechnologies',  # (required parameter)
            'num_drive_compartments': 'numDriveCompartments',  # (required parameter)
            'num_drive_slots_per_compartment': 'numDriveSlotsPerCompartment',  # (required parameter)
            'tray_attributes': 'trayAttributes',  # (required parameter)
            'is_misconfigured': 'isMisconfigured',  # (required parameter)
            'esm_factory_defaults_mismatch': 'esmFactoryDefaultsMismatch',  # (required parameter)
            'physical_location': 'physicalLocation',  # (required parameter)
            'num_drawers': 'numDrawers',  # (required parameter)
            'drive_layout': 'driveLayout',  # (required parameter)
            'factory_defaults_data': 'factoryDefaultsData',  # (required parameter)
            'locate_in_progress': 'locateInProgress',  # (required parameter)
            'has_tray_identity_indicator': 'hasTrayIdentityIndicator',  # (required parameter)
            'id': 'id'
        }

        self._type = None
        self._orientation = None
        self._num_controller_slots = None
        self._num_drive_slots = None
        self._tray_id = None
        self._tray_ref = None
        self._non_redundant_access = None
        self._part_number = None
        self._serial_number = None
        self._vendor_name = None
        self._manufacturer_date = None
        self._fru_type = None
        self._tray_id_mismatch = None
        self._tray_id_conflict = None
        self._esm_version_mismatch = None
        self._esm_miswire = None
        self._drv_mh_speed_mismatch = None
        self._unsupported_tray = None
        self._working_channel = None
        self._max_speed = None
        self._tray_technology_type = None
        self._esm_group_error = None
        self._uncertified_tray = None
        self._locate_tray = None
        self._esm_hardware_mismatch = None
        self._has_configurable_tray_id = None
        self._front_end_interface_technology = None
        self._drive_technologies = None
        self._num_drive_compartments = None
        self._num_drive_slots_per_compartment = None
        self._tray_attributes = None
        self._is_misconfigured = None
        self._esm_factory_defaults_mismatch = None
        self._physical_location = None
        self._num_drawers = None
        self._drive_layout = None
        self._factory_defaults_data = None
        self._locate_in_progress = None
        self._has_tray_identity_indicator = None
        self._id = None

    @property
    def type(self):
        """
        Gets the type of this Tray.
        An indication of the type of the tray.

        :return: The type of this Tray.
        :rtype: str
        :required/optional: required
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Tray.
        An indication of the type of the tray.

        :param type: The type of this Tray.
        :type: str
        """
        allowed_values = ["sym1000", "sym2000", "sym2772", "pciraid", "generic", "sym2200", "sym1200", "sym2882", "sym1500", "fc4600", "ss3600", "md1000", "md3000", "xbb2", "fc6900", "md1200", "md1220", "de1600", "de5600", "de6600", "de7600", "de6650", "sc12", "sc24", "de212c", "de224c", "de460c", "__UNDEFINED"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def orientation(self):
        """
        Gets the orientation of this Tray.
        An indication of the physical orientation (horizontal or vertical) of the tray.

        :return: The orientation of this Tray.
        :rtype: str
        :required/optional: required
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """
        Sets the orientation of this Tray.
        An indication of the physical orientation (horizontal or vertical) of the tray.

        :param orientation: The orientation of this Tray.
        :type: str
        """
        allowed_values = ["horizontal", "vertical", "__UNDEFINED"]
        if orientation not in allowed_values:
            raise ValueError(
                "Invalid value for `orientation`, must be one of {0}"
                .format(allowed_values)
            )
        self._orientation = orientation

    @property
    def num_controller_slots(self):
        """
        Gets the num_controller_slots of this Tray.
        The number of slots available for holding RAID controller boards (i.e., set to zero for a drive-only tray).

        :return: The num_controller_slots of this Tray.
        :rtype: int
        :required/optional: required
        """
        return self._num_controller_slots

    @num_controller_slots.setter
    def num_controller_slots(self, num_controller_slots):
        """
        Sets the num_controller_slots of this Tray.
        The number of slots available for holding RAID controller boards (i.e., set to zero for a drive-only tray).

        :param num_controller_slots: The num_controller_slots of this Tray.
        :type: int
        """
        self._num_controller_slots = num_controller_slots

    @property
    def num_drive_slots(self):
        """
        Gets the num_drive_slots of this Tray.
        The total number of slots available for holding disk drives.

        :return: The num_drive_slots of this Tray.
        :rtype: int
        :required/optional: required
        """
        return self._num_drive_slots

    @num_drive_slots.setter
    def num_drive_slots(self, num_drive_slots):
        """
        Sets the num_drive_slots of this Tray.
        The total number of slots available for holding disk drives.

        :param num_drive_slots: The num_drive_slots of this Tray.
        :type: int
        """
        self._num_drive_slots = num_drive_slots

    @property
    def tray_id(self):
        """
        Gets the tray_id of this Tray.
        The tray identifier value, which is typically set using physical switches on the tray itself.

        :return: The tray_id of this Tray.
        :rtype: int
        :required/optional: required
        """
        return self._tray_id

    @tray_id.setter
    def tray_id(self, tray_id):
        """
        Sets the tray_id of this Tray.
        The tray identifier value, which is typically set using physical switches on the tray itself.

        :param tray_id: The tray_id of this Tray.
        :type: int
        """
        self._tray_id = tray_id

    @property
    def tray_ref(self):
        """
        Gets the tray_ref of this Tray.
        The identifier value for this tray. Other objects may use this reference value to refer to the tray.

        :return: The tray_ref of this Tray.
        :rtype: str
        :required/optional: required
        """
        return self._tray_ref

    @tray_ref.setter
    def tray_ref(self, tray_ref):
        """
        Sets the tray_ref of this Tray.
        The identifier value for this tray. Other objects may use this reference value to refer to the tray.

        :param tray_ref: The tray_ref of this Tray.
        :type: str
        """
        self._tray_ref = tray_ref

    @property
    def non_redundant_access(self):
        """
        Gets the non_redundant_access of this Tray.
        True, if the tray does not have redundant access.

        :return: The non_redundant_access of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._non_redundant_access

    @non_redundant_access.setter
    def non_redundant_access(self, non_redundant_access):
        """
        Sets the non_redundant_access of this Tray.
        True, if the tray does not have redundant access.

        :param non_redundant_access: The non_redundant_access of this Tray.
        :type: bool
        """
        self._non_redundant_access = non_redundant_access

    @property
    def part_number(self):
        """
        Gets the part_number of this Tray.
        The part number of the tray from VPD data.

        :return: The part_number of this Tray.
        :rtype: str
        :required/optional: required
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """
        Sets the part_number of this Tray.
        The part number of the tray from VPD data.

        :param part_number: The part_number of this Tray.
        :type: str
        """
        self._part_number = part_number

    @property
    def serial_number(self):
        """
        Gets the serial_number of this Tray.
        The serial number of the tray.

        :return: The serial_number of this Tray.
        :rtype: str
        :required/optional: required
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this Tray.
        The serial number of the tray.

        :param serial_number: The serial_number of this Tray.
        :type: str
        """
        self._serial_number = serial_number

    @property
    def vendor_name(self):
        """
        Gets the vendor_name of this Tray.
        The name of the manufacturer of the tray.

        :return: The vendor_name of this Tray.
        :rtype: str
        :required/optional: required
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """
        Sets the vendor_name of this Tray.
        The name of the manufacturer of the tray.

        :param vendor_name: The vendor_name of this Tray.
        :type: str
        """
        self._vendor_name = vendor_name

    @property
    def manufacturer_date(self):
        """
        Gets the manufacturer_date of this Tray.
        The date the tray was manufactured.

        :return: The manufacturer_date of this Tray.
        :rtype: int
        :required/optional: required
        """
        return self._manufacturer_date

    @manufacturer_date.setter
    def manufacturer_date(self, manufacturer_date):
        """
        Sets the manufacturer_date of this Tray.
        The date the tray was manufactured.

        :param manufacturer_date: The manufacturer_date of this Tray.
        :type: int
        """
        self._manufacturer_date = manufacturer_date

    @property
    def fru_type(self):
        """
        Gets the fru_type of this Tray.
        The field replaceable unit type of the tray.

        :return: The fru_type of this Tray.
        :rtype: str
        :required/optional: required
        """
        return self._fru_type

    @fru_type.setter
    def fru_type(self, fru_type):
        """
        Sets the fru_type of this Tray.
        The field replaceable unit type of the tray.

        :param fru_type: The fru_type of this Tray.
        :type: str
        """
        self._fru_type = fru_type

    @property
    def tray_id_mismatch(self):
        """
        Gets the tray_id_mismatch of this Tray.
        True if the IDs on the ESMs do not match.

        :return: The tray_id_mismatch of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._tray_id_mismatch

    @tray_id_mismatch.setter
    def tray_id_mismatch(self, tray_id_mismatch):
        """
        Sets the tray_id_mismatch of this Tray.
        True if the IDs on the ESMs do not match.

        :param tray_id_mismatch: The tray_id_mismatch of this Tray.
        :type: bool
        """
        self._tray_id_mismatch = tray_id_mismatch

    @property
    def tray_id_conflict(self):
        """
        Gets the tray_id_conflict of this Tray.
        True if this tray ID conflicts with that of another tray.

        :return: The tray_id_conflict of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._tray_id_conflict

    @tray_id_conflict.setter
    def tray_id_conflict(self, tray_id_conflict):
        """
        Sets the tray_id_conflict of this Tray.
        True if this tray ID conflicts with that of another tray.

        :param tray_id_conflict: The tray_id_conflict of this Tray.
        :type: bool
        """
        self._tray_id_conflict = tray_id_conflict

    @property
    def esm_version_mismatch(self):
        """
        Gets the esm_version_mismatch of this Tray.
        True if the ESM firmware versions do not match.

        :return: The esm_version_mismatch of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._esm_version_mismatch

    @esm_version_mismatch.setter
    def esm_version_mismatch(self, esm_version_mismatch):
        """
        Sets the esm_version_mismatch of this Tray.
        True if the ESM firmware versions do not match.

        :param esm_version_mismatch: The esm_version_mismatch of this Tray.
        :type: bool
        """
        self._esm_version_mismatch = esm_version_mismatch

    @property
    def esm_miswire(self):
        """
        Gets the esm_miswire of this Tray.
        True if this tray has an ESM join miswire.

        :return: The esm_miswire of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._esm_miswire

    @esm_miswire.setter
    def esm_miswire(self, esm_miswire):
        """
        Sets the esm_miswire of this Tray.
        True if this tray has an ESM join miswire.

        :param esm_miswire: The esm_miswire of this Tray.
        :type: bool
        """
        self._esm_miswire = esm_miswire

    @property
    def drv_mh_speed_mismatch(self):
        """
        Gets the drv_mh_speed_mismatch of this Tray.
        True if this tray has a drive-side minihub speed mismatch.

        :return: The drv_mh_speed_mismatch of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._drv_mh_speed_mismatch

    @drv_mh_speed_mismatch.setter
    def drv_mh_speed_mismatch(self, drv_mh_speed_mismatch):
        """
        Sets the drv_mh_speed_mismatch of this Tray.
        True if this tray has a drive-side minihub speed mismatch.

        :param drv_mh_speed_mismatch: The drv_mh_speed_mismatch of this Tray.
        :type: bool
        """
        self._drv_mh_speed_mismatch = drv_mh_speed_mismatch

    @property
    def unsupported_tray(self):
        """
        Gets the unsupported_tray of this Tray.
        True if this tray is an unrecognized/unsupported hardware type.

        :return: The unsupported_tray of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._unsupported_tray

    @unsupported_tray.setter
    def unsupported_tray(self, unsupported_tray):
        """
        Sets the unsupported_tray of this Tray.
        True if this tray is an unrecognized/unsupported hardware type.

        :param unsupported_tray: The unsupported_tray of this Tray.
        :type: bool
        """
        self._unsupported_tray = unsupported_tray

    @property
    def working_channel(self):
        """
        Gets the working_channel of this Tray.
        The channel to the tray that is still operational (if nonRedundantAccess is True).

        :return: The working_channel of this Tray.
        :rtype: int
        :required/optional: required
        """
        return self._working_channel

    @working_channel.setter
    def working_channel(self, working_channel):
        """
        Sets the working_channel of this Tray.
        The channel to the tray that is still operational (if nonRedundantAccess is True).

        :param working_channel: The working_channel of this Tray.
        :type: int
        """
        self._working_channel = working_channel

    @property
    def max_speed(self):
        """
        Gets the max_speed of this Tray.
        The maximum speed of the drive channels,

        :return: The max_speed of this Tray.
        :rtype: str
        :required/optional: required
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """
        Sets the max_speed of this Tray.
        The maximum speed of the drive channels,

        :param max_speed: The max_speed of this Tray.
        :type: str
        """
        allowed_values = ["speedUnknown", "speed1gig", "speed2gig", "speed4gig", "speed10gig", "speed15gig", "speed3gig", "speed10meg", "speed100meg", "speed2pt5Gig", "speed5gig", "speed20gig", "speed30gig", "speed60gig", "speed8gig", "speed6gig", "speed40gig", "speed16gig", "speed56gig", "speed12gig", "__UNDEFINED"]
        if max_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `max_speed`, must be one of {0}"
                .format(allowed_values)
            )
        self._max_speed = max_speed

    @property
    def tray_technology_type(self):
        """
        Gets the tray_technology_type of this Tray.
        The interface technology. This field is deprecated. Equivalent information is available in the driveTechnologies and frontEndInterfaceTechnology fields.

        :return: The tray_technology_type of this Tray.
        :rtype: str
        :required/optional: required
        """
        return self._tray_technology_type

    @tray_technology_type.setter
    def tray_technology_type(self, tray_technology_type):
        """
        Sets the tray_technology_type of this Tray.
        The interface technology. This field is deprecated. Equivalent information is available in the driveTechnologies and frontEndInterfaceTechnology fields.

        :param tray_technology_type: The tray_technology_type of this Tray.
        :type: str
        """
        allowed_values = ["unknown", "scsiScsi", "fibreFibre", "fibreSata", "fibrePata", "__UNDEFINED"]
        if tray_technology_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tray_technology_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._tray_technology_type = tray_technology_type

    @property
    def esm_group_error(self):
        """
        Gets the esm_group_error of this Tray.
        True if SBOD ESM trays are not properly clustered.

        :return: The esm_group_error of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._esm_group_error

    @esm_group_error.setter
    def esm_group_error(self, esm_group_error):
        """
        Sets the esm_group_error of this Tray.
        True if SBOD ESM trays are not properly clustered.

        :param esm_group_error: The esm_group_error of this Tray.
        :type: bool
        """
        self._esm_group_error = esm_group_error

    @property
    def uncertified_tray(self):
        """
        Gets the uncertified_tray of this Tray.
        True if this tray is an uncertified hardware type.

        :return: The uncertified_tray of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._uncertified_tray

    @uncertified_tray.setter
    def uncertified_tray(self, uncertified_tray):
        """
        Sets the uncertified_tray of this Tray.
        True if this tray is an uncertified hardware type.

        :param uncertified_tray: The uncertified_tray of this Tray.
        :type: bool
        """
        self._uncertified_tray = uncertified_tray

    @property
    def locate_tray(self):
        """
        Gets the locate_tray of this Tray.
        True if this tray supports a locate operation.

        :return: The locate_tray of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._locate_tray

    @locate_tray.setter
    def locate_tray(self, locate_tray):
        """
        Sets the locate_tray of this Tray.
        True if this tray supports a locate operation.

        :param locate_tray: The locate_tray of this Tray.
        :type: bool
        """
        self._locate_tray = locate_tray

    @property
    def esm_hardware_mismatch(self):
        """
        Gets the esm_hardware_mismatch of this Tray.
        True if the ESM hardware components in the tray are mismatched.

        :return: The esm_hardware_mismatch of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._esm_hardware_mismatch

    @esm_hardware_mismatch.setter
    def esm_hardware_mismatch(self, esm_hardware_mismatch):
        """
        Sets the esm_hardware_mismatch of this Tray.
        True if the ESM hardware components in the tray are mismatched.

        :param esm_hardware_mismatch: The esm_hardware_mismatch of this Tray.
        :type: bool
        """
        self._esm_hardware_mismatch = esm_hardware_mismatch

    @property
    def has_configurable_tray_id(self):
        """
        Gets the has_configurable_tray_id of this Tray.
        True if the tray ID can be set using the updateTray procedure.

        :return: The has_configurable_tray_id of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._has_configurable_tray_id

    @has_configurable_tray_id.setter
    def has_configurable_tray_id(self, has_configurable_tray_id):
        """
        Sets the has_configurable_tray_id of this Tray.
        True if the tray ID can be set using the updateTray procedure.

        :param has_configurable_tray_id: The has_configurable_tray_id of this Tray.
        :type: bool
        """
        self._has_configurable_tray_id = has_configurable_tray_id

    @property
    def front_end_interface_technology(self):
        """
        Gets the front_end_interface_technology of this Tray.
        The front-end I/O interface technology of the tray.

        :return: The front_end_interface_technology of this Tray.
        :rtype: str
        :required/optional: required
        """
        return self._front_end_interface_technology

    @front_end_interface_technology.setter
    def front_end_interface_technology(self, front_end_interface_technology):
        """
        Sets the front_end_interface_technology of this Tray.
        The front-end I/O interface technology of the tray.

        :param front_end_interface_technology: The front_end_interface_technology of this Tray.
        :type: str
        """
        allowed_values = ["notImplemented", "scsi", "fc", "sata", "sas", "iscsi", "ib", "fcoe", "__UNDEFINED"]
        if front_end_interface_technology not in allowed_values:
            raise ValueError(
                "Invalid value for `front_end_interface_technology`, must be one of {0}"
                .format(allowed_values)
            )
        self._front_end_interface_technology = front_end_interface_technology

    @property
    def drive_technologies(self):
        """
        Gets the drive_technologies of this Tray.
        A list of drive technologies that are present in the tray.

        :return: The drive_technologies of this Tray.
        :rtype: list[str]
        :required/optional: required
        """
        return self._drive_technologies

    @drive_technologies.setter
    def drive_technologies(self, drive_technologies):
        """
        Sets the drive_technologies of this Tray.
        A list of drive technologies that are present in the tray.

        :param drive_technologies: The drive_technologies of this Tray.
        :type: list[str]
        """
        self._drive_technologies = drive_technologies

    @property
    def num_drive_compartments(self):
        """
        Gets the num_drive_compartments of this Tray.
        The number of drive compartments in the tray. Some drive trays are subdivided into \"compartments,\" each having the same number of drive slots. Looking at the front of such an enclosure, multiple compartments are arranged side by side along one dimension, while drives within a compartment are arranged side by side along the other dimension, allowing for greater overall drive density within the constraints of a given enclosure form factor. (Even when arranged as a series of compartments, drive slot numbering is still relative to the entire tray.)

        :return: The num_drive_compartments of this Tray.
        :rtype: int
        :required/optional: required
        """
        return self._num_drive_compartments

    @num_drive_compartments.setter
    def num_drive_compartments(self, num_drive_compartments):
        """
        Sets the num_drive_compartments of this Tray.
        The number of drive compartments in the tray. Some drive trays are subdivided into \"compartments,\" each having the same number of drive slots. Looking at the front of such an enclosure, multiple compartments are arranged side by side along one dimension, while drives within a compartment are arranged side by side along the other dimension, allowing for greater overall drive density within the constraints of a given enclosure form factor. (Even when arranged as a series of compartments, drive slot numbering is still relative to the entire tray.)

        :param num_drive_compartments: The num_drive_compartments of this Tray.
        :type: int
        """
        self._num_drive_compartments = num_drive_compartments

    @property
    def num_drive_slots_per_compartment(self):
        """
        Gets the num_drive_slots_per_compartment of this Tray.
        The number of drive slots within an individual drive compartment.

        :return: The num_drive_slots_per_compartment of this Tray.
        :rtype: int
        :required/optional: required
        """
        return self._num_drive_slots_per_compartment

    @num_drive_slots_per_compartment.setter
    def num_drive_slots_per_compartment(self, num_drive_slots_per_compartment):
        """
        Sets the num_drive_slots_per_compartment of this Tray.
        The number of drive slots within an individual drive compartment.

        :param num_drive_slots_per_compartment: The num_drive_slots_per_compartment of this Tray.
        :type: int
        """
        self._num_drive_slots_per_compartment = num_drive_slots_per_compartment

    @property
    def tray_attributes(self):
        """
        Gets the tray_attributes of this Tray.
        The tray attribute data (see setTrayAttributes procedure).

        :return: The tray_attributes of this Tray.
        :rtype: list[TrayAttribute]
        :required/optional: required
        """
        return self._tray_attributes

    @tray_attributes.setter
    def tray_attributes(self, tray_attributes):
        """
        Sets the tray_attributes of this Tray.
        The tray attribute data (see setTrayAttributes procedure).

        :param tray_attributes: The tray_attributes of this Tray.
        :type: list[TrayAttribute]
        """
        self._tray_attributes = tray_attributes

    @property
    def is_misconfigured(self):
        """
        Gets the is_misconfigured of this Tray.
        True, if the tray has invalid configuration settings.

        :return: The is_misconfigured of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._is_misconfigured

    @is_misconfigured.setter
    def is_misconfigured(self, is_misconfigured):
        """
        Sets the is_misconfigured of this Tray.
        True, if the tray has invalid configuration settings.

        :param is_misconfigured: The is_misconfigured of this Tray.
        :type: bool
        """
        self._is_misconfigured = is_misconfigured

    @property
    def esm_factory_defaults_mismatch(self):
        """
        Gets the esm_factory_defaults_mismatch of this Tray.
        True, if the two ESMs in the tray are reporting different version information for their factory default settings.

        :return: The esm_factory_defaults_mismatch of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._esm_factory_defaults_mismatch

    @esm_factory_defaults_mismatch.setter
    def esm_factory_defaults_mismatch(self, esm_factory_defaults_mismatch):
        """
        Sets the esm_factory_defaults_mismatch of this Tray.
        True, if the two ESMs in the tray are reporting different version information for their factory default settings.

        :param esm_factory_defaults_mismatch: The esm_factory_defaults_mismatch of this Tray.
        :type: bool
        """
        self._esm_factory_defaults_mismatch = esm_factory_defaults_mismatch

    @property
    def physical_location(self):
        """
        Gets the physical_location of this Tray.
        The physical location of the tray. The parent reference in Location identifies the storage array itself, and the position field is the tray position number as identified in setSATrayPositions procedure call, or the constant TRAY_POSITION_UNKNOWN.

        :return: The physical_location of this Tray.
        :rtype: Location
        :required/optional: required
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """
        Sets the physical_location of this Tray.
        The physical location of the tray. The parent reference in Location identifies the storage array itself, and the position field is the tray position number as identified in setSATrayPositions procedure call, or the constant TRAY_POSITION_UNKNOWN.

        :param physical_location: The physical_location of this Tray.
        :type: Location
        """
        self._physical_location = physical_location

    @property
    def num_drawers(self):
        """
        Gets the num_drawers of this Tray.
        The total number of drawers available in the tray.

        :return: The num_drawers of this Tray.
        :rtype: int
        :required/optional: required
        """
        return self._num_drawers

    @num_drawers.setter
    def num_drawers(self, num_drawers):
        """
        Sets the num_drawers of this Tray.
        The total number of drawers available in the tray.

        :param num_drawers: The num_drawers of this Tray.
        :type: int
        """
        self._num_drawers = num_drawers

    @property
    def drive_layout(self):
        """
        Gets the drive_layout of this Tray.
        If the tray contains drawers, this field specifies the layout within the drawer. Otherwise, this field specifies the layout for the tray.

        :return: The drive_layout of this Tray.
        :rtype: DriveLayout
        :required/optional: required
        """
        return self._drive_layout

    @drive_layout.setter
    def drive_layout(self, drive_layout):
        """
        Sets the drive_layout of this Tray.
        If the tray contains drawers, this field specifies the layout within the drawer. Otherwise, this field specifies the layout for the tray.

        :param drive_layout: The drive_layout of this Tray.
        :type: DriveLayout
        """
        self._drive_layout = drive_layout

    @property
    def factory_defaults_data(self):
        """
        Gets the factory_defaults_data of this Tray.
        This field contains information about the version of the tray's factory default settings.

        :return: The factory_defaults_data of this Tray.
        :rtype: FactoryDefaultsVersionData
        :required/optional: required
        """
        return self._factory_defaults_data

    @factory_defaults_data.setter
    def factory_defaults_data(self, factory_defaults_data):
        """
        Sets the factory_defaults_data of this Tray.
        This field contains information about the version of the tray's factory default settings.

        :param factory_defaults_data: The factory_defaults_data of this Tray.
        :type: FactoryDefaultsVersionData
        """
        self._factory_defaults_data = factory_defaults_data

    @property
    def locate_in_progress(self):
        """
        Gets the locate_in_progress of this Tray.
        Indicates that a locate operation for the device is currently active. The device will show a visual indication to aid an operator in locating the tray.

        :return: The locate_in_progress of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._locate_in_progress

    @locate_in_progress.setter
    def locate_in_progress(self, locate_in_progress):
        """
        Sets the locate_in_progress of this Tray.
        Indicates that a locate operation for the device is currently active. The device will show a visual indication to aid an operator in locating the tray.

        :param locate_in_progress: The locate_in_progress of this Tray.
        :type: bool
        """
        self._locate_in_progress = locate_in_progress

    @property
    def has_tray_identity_indicator(self):
        """
        Gets the has_tray_identity_indicator of this Tray.
        The device contains 7-segment indicators used to display the Tray Identity.

        :return: The has_tray_identity_indicator of this Tray.
        :rtype: bool
        :required/optional: required
        """
        return self._has_tray_identity_indicator

    @has_tray_identity_indicator.setter
    def has_tray_identity_indicator(self, has_tray_identity_indicator):
        """
        Sets the has_tray_identity_indicator of this Tray.
        The device contains 7-segment indicators used to display the Tray Identity.

        :param has_tray_identity_indicator: The has_tray_identity_indicator of this Tray.
        :type: bool
        """
        self._has_tray_identity_indicator = has_tray_identity_indicator

    @property
    def id(self):
        """
        Gets the id of this Tray.


        :return: The id of this Tray.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Tray.


        :param id: The id of this Tray.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

