# coding: utf-8

"""
CacheBackupDeviceVpd.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class CacheBackupDeviceVpd(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CacheBackupDeviceVpd - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'manufacturer': 'str',  # (required parameter)
            'manufacture_date': 'int',  # (required parameter)
            'product_id': 'str',  # (required parameter)
            'product_rev_level': 'str',  # (required parameter)
            'part_number': 'str',  # (required parameter)
            'serial_number': 'str'
        }

        self.attribute_map = {
            'manufacturer': 'manufacturer',  # (required parameter)
            'manufacture_date': 'manufactureDate',  # (required parameter)
            'product_id': 'productId',  # (required parameter)
            'product_rev_level': 'productRevLevel',  # (required parameter)
            'part_number': 'partNumber',  # (required parameter)
            'serial_number': 'serialNumber'
        }

        self._manufacturer = None
        self._manufacture_date = None
        self._product_id = None
        self._product_rev_level = None
        self._part_number = None
        self._serial_number = None

    @property
    def manufacturer(self):
        """
        Gets the manufacturer of this CacheBackupDeviceVpd.
        The variable-length ASCII text string that identifies the device manufacturer..

        :return: The manufacturer of this CacheBackupDeviceVpd.
        :rtype: str
        :required/optional: required
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """
        Sets the manufacturer of this CacheBackupDeviceVpd.
        The variable-length ASCII text string that identifies the device manufacturer..

        :param manufacturer: The manufacturer of this CacheBackupDeviceVpd.
        :type: str
        """
        self._manufacturer = manufacturer

    @property
    def manufacture_date(self):
        """
        Gets the manufacture_date of this CacheBackupDeviceVpd.
        The date of manufacture of the device, represented in seconds since midnight GMT on January 1, 1970.

        :return: The manufacture_date of this CacheBackupDeviceVpd.
        :rtype: int
        :required/optional: required
        """
        return self._manufacture_date

    @manufacture_date.setter
    def manufacture_date(self, manufacture_date):
        """
        Sets the manufacture_date of this CacheBackupDeviceVpd.
        The date of manufacture of the device, represented in seconds since midnight GMT on January 1, 1970.

        :param manufacture_date: The manufacture_date of this CacheBackupDeviceVpd.
        :type: int
        """
        self._manufacture_date = manufacture_date

    @property
    def product_id(self):
        """
        Gets the product_id of this CacheBackupDeviceVpd.
        The variable-length ASCII text string that identifies the device by name.

        :return: The product_id of this CacheBackupDeviceVpd.
        :rtype: str
        :required/optional: required
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this CacheBackupDeviceVpd.
        The variable-length ASCII text string that identifies the device by name.

        :param product_id: The product_id of this CacheBackupDeviceVpd.
        :type: str
        """
        self._product_id = product_id

    @property
    def product_rev_level(self):
        """
        Gets the product_rev_level of this CacheBackupDeviceVpd.
        The variable-length ASCII text string that identifies the device revision level.

        :return: The product_rev_level of this CacheBackupDeviceVpd.
        :rtype: str
        :required/optional: required
        """
        return self._product_rev_level

    @product_rev_level.setter
    def product_rev_level(self, product_rev_level):
        """
        Sets the product_rev_level of this CacheBackupDeviceVpd.
        The variable-length ASCII text string that identifies the device revision level.

        :param product_rev_level: The product_rev_level of this CacheBackupDeviceVpd.
        :type: str
        """
        self._product_rev_level = product_rev_level

    @property
    def part_number(self):
        """
        Gets the part_number of this CacheBackupDeviceVpd.
        The variable-length ASCII text string that identifies the device part number.

        :return: The part_number of this CacheBackupDeviceVpd.
        :rtype: str
        :required/optional: required
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """
        Sets the part_number of this CacheBackupDeviceVpd.
        The variable-length ASCII text string that identifies the device part number.

        :param part_number: The part_number of this CacheBackupDeviceVpd.
        :type: str
        """
        self._part_number = part_number

    @property
    def serial_number(self):
        """
        Gets the serial_number of this CacheBackupDeviceVpd.
        The variable-length ASCII text string that identifies the device serial number.

        :return: The serial_number of this CacheBackupDeviceVpd.
        :rtype: str
        :required/optional: required
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this CacheBackupDeviceVpd.
        The variable-length ASCII text string that identifies the device serial number.

        :param serial_number: The serial_number of this CacheBackupDeviceVpd.
        :type: str
        """
        self._serial_number = serial_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

