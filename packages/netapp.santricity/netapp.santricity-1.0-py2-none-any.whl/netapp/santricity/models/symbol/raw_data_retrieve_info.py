# coding: utf-8

"""
RawDataRetrieveInfo.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class RawDataRetrieveInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RawDataRetrieveInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',  # (required parameter)
            'last_chunk': 'bool',  # (required parameter)
            'this_sequence_number': 'int',  # (required parameter)
            'details': 'RawDataRetrieveChunkDetails',  # (required parameter)
            'percent_complete': 'int'
        }

        self.attribute_map = {
            'type': 'type',  # (required parameter)
            'last_chunk': 'lastChunk',  # (required parameter)
            'this_sequence_number': 'thisSequenceNumber',  # (required parameter)
            'details': 'details',  # (required parameter)
            'percent_complete': 'percentComplete'
        }

        self._type = None
        self._last_chunk = None
        self._this_sequence_number = None
        self._details = None
        self._percent_complete = None

    @property
    def type(self):
        """
        Gets the type of this RawDataRetrieveInfo.
        The data transfer type.

        :return: The type of this RawDataRetrieveInfo.
        :rtype: str
        :required/optional: required
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RawDataRetrieveInfo.
        The data transfer type.

        :param type: The type of this RawDataRetrieveInfo.
        :type: str
        """
        allowed_values = ["unknown", "dq", "dbmblk", "dbmrec", "dbmCheck", "enclosureStateCapture", "dplCoreDumpBundle", "ioStatistics", "fdiDemsLogs", "drivePerformanceHistory", "iocDump", "driveHealthLogs", "ctrlPerfLogs", "dom0SupportData", "retrieveWlcAnalytics", "autoLoadBalanceStatisticsLog", "__UNDEFINED"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def last_chunk(self):
        """
        Gets the last_chunk of this RawDataRetrieveInfo.
        True for the last chunk of data; otherwise false.

        :return: The last_chunk of this RawDataRetrieveInfo.
        :rtype: bool
        :required/optional: required
        """
        return self._last_chunk

    @last_chunk.setter
    def last_chunk(self, last_chunk):
        """
        Sets the last_chunk of this RawDataRetrieveInfo.
        True for the last chunk of data; otherwise false.

        :param last_chunk: The last_chunk of this RawDataRetrieveInfo.
        :type: bool
        """
        self._last_chunk = last_chunk

    @property
    def this_sequence_number(self):
        """
        Gets the this_sequence_number of this RawDataRetrieveInfo.
        The sequence number of the current chunk of data being delivered to the controller.

        :return: The this_sequence_number of this RawDataRetrieveInfo.
        :rtype: int
        :required/optional: required
        """
        return self._this_sequence_number

    @this_sequence_number.setter
    def this_sequence_number(self, this_sequence_number):
        """
        Sets the this_sequence_number of this RawDataRetrieveInfo.
        The sequence number of the current chunk of data being delivered to the controller.

        :param this_sequence_number: The this_sequence_number of this RawDataRetrieveInfo.
        :type: int
        """
        self._this_sequence_number = this_sequence_number

    @property
    def details(self):
        """
        Gets the details of this RawDataRetrieveInfo.
        The transfer type-specific details.

        :return: The details of this RawDataRetrieveInfo.
        :rtype: RawDataRetrieveChunkDetails
        :required/optional: required
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this RawDataRetrieveInfo.
        The transfer type-specific details.

        :param details: The details of this RawDataRetrieveInfo.
        :type: RawDataRetrieveChunkDetails
        """
        self._details = details

    @property
    def percent_complete(self):
        """
        Gets the percent_complete of this RawDataRetrieveInfo.
        This value is a number in the range of 0 to 100 indicating the percent complete.

        :return: The percent_complete of this RawDataRetrieveInfo.
        :rtype: int
        :required/optional: required
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """
        Sets the percent_complete of this RawDataRetrieveInfo.
        This value is a number in the range of 0 to 100 indicating the percent complete.

        :param percent_complete: The percent_complete of this RawDataRetrieveInfo.
        :type: int
        """
        self._percent_complete = percent_complete

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

