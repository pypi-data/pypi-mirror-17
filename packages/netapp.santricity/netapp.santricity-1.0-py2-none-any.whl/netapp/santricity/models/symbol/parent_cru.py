# coding: utf-8

"""
ParentCru.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class ParentCru(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ParentCru - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',  # (required parameter)
            'parent_controller': 'str',  
            'parent_esm': 'str',  
            'parent_fan': 'str',  
            'parent_interconnect_cru': 'str',  
            'parent_support_cru': 'str',  
            'parent_drawer': 'str'
        }

        self.attribute_map = {
            'type': 'type',  # (required parameter)
            'parent_controller': 'parentController',  
            'parent_esm': 'parentEsm',  
            'parent_fan': 'parentFan',  
            'parent_interconnect_cru': 'parentInterconnectCru',  
            'parent_support_cru': 'parentSupportCru',  
            'parent_drawer': 'parentDrawer'
        }

        self._type = None
        self._parent_controller = None
        self._parent_esm = None
        self._parent_fan = None
        self._parent_interconnect_cru = None
        self._parent_support_cru = None
        self._parent_drawer = None

    @property
    def type(self):
        """
        Gets the type of this ParentCru.
        This enumeration object is used to specify the type of reference that is contained in a ParentCru union.

        :return: The type of this ParentCru.
        :rtype: str
        :required/optional: required
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ParentCru.
        This enumeration object is used to specify the type of reference that is contained in a ParentCru union.

        :param type: The type of this ParentCru.
        :type: str
        """
        allowed_values = ["controller", "esm", "fan", "iccCru", "supportCru", "drawer", "__UNDEFINED"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def parent_controller(self):
        """
        Gets the parent_controller of this ParentCru.
        This field contains a reference to the parent controller. It is only valid if the type field is equal to PARENT_CRU_TYPE_CONTROLLER.

        :return: The parent_controller of this ParentCru.
        :rtype: str
        :required/optional: optional
        """
        return self._parent_controller

    @parent_controller.setter
    def parent_controller(self, parent_controller):
        """
        Sets the parent_controller of this ParentCru.
        This field contains a reference to the parent controller. It is only valid if the type field is equal to PARENT_CRU_TYPE_CONTROLLER.

        :param parent_controller: The parent_controller of this ParentCru.
        :type: str
        """
        self._parent_controller = parent_controller

    @property
    def parent_esm(self):
        """
        Gets the parent_esm of this ParentCru.
        This field contains a reference to the parent ESM. It is only valid if the type field is equal to PARENT_CRU_TYPE_ESM.

        :return: The parent_esm of this ParentCru.
        :rtype: str
        :required/optional: optional
        """
        return self._parent_esm

    @parent_esm.setter
    def parent_esm(self, parent_esm):
        """
        Sets the parent_esm of this ParentCru.
        This field contains a reference to the parent ESM. It is only valid if the type field is equal to PARENT_CRU_TYPE_ESM.

        :param parent_esm: The parent_esm of this ParentCru.
        :type: str
        """
        self._parent_esm = parent_esm

    @property
    def parent_fan(self):
        """
        Gets the parent_fan of this ParentCru.
        This field contains a reference to the parent Fan. It is only valid if the type field is equal to PARENT_CRU_TYPE_FAN.

        :return: The parent_fan of this ParentCru.
        :rtype: str
        :required/optional: optional
        """
        return self._parent_fan

    @parent_fan.setter
    def parent_fan(self, parent_fan):
        """
        Sets the parent_fan of this ParentCru.
        This field contains a reference to the parent Fan. It is only valid if the type field is equal to PARENT_CRU_TYPE_FAN.

        :param parent_fan: The parent_fan of this ParentCru.
        :type: str
        """
        self._parent_fan = parent_fan

    @property
    def parent_interconnect_cru(self):
        """
        Gets the parent_interconnect_cru of this ParentCru.
        This field contains a reference to the parent interconnect CRU. It is only valid if the type field is equal to PARENT_CRU_TYPE_ICC_CRU.

        :return: The parent_interconnect_cru of this ParentCru.
        :rtype: str
        :required/optional: optional
        """
        return self._parent_interconnect_cru

    @parent_interconnect_cru.setter
    def parent_interconnect_cru(self, parent_interconnect_cru):
        """
        Sets the parent_interconnect_cru of this ParentCru.
        This field contains a reference to the parent interconnect CRU. It is only valid if the type field is equal to PARENT_CRU_TYPE_ICC_CRU.

        :param parent_interconnect_cru: The parent_interconnect_cru of this ParentCru.
        :type: str
        """
        self._parent_interconnect_cru = parent_interconnect_cru

    @property
    def parent_support_cru(self):
        """
        Gets the parent_support_cru of this ParentCru.
        This field contains a reference to the parent support CRU. It is only valid if the type field is equal to PARENT_CRU_TYPE_SUPPORT_CRU.

        :return: The parent_support_cru of this ParentCru.
        :rtype: str
        :required/optional: optional
        """
        return self._parent_support_cru

    @parent_support_cru.setter
    def parent_support_cru(self, parent_support_cru):
        """
        Sets the parent_support_cru of this ParentCru.
        This field contains a reference to the parent support CRU. It is only valid if the type field is equal to PARENT_CRU_TYPE_SUPPORT_CRU.

        :param parent_support_cru: The parent_support_cru of this ParentCru.
        :type: str
        """
        self._parent_support_cru = parent_support_cru

    @property
    def parent_drawer(self):
        """
        Gets the parent_drawer of this ParentCru.
        This field contains a reference to the parent drawer. It is only valid if the type field is equal to PARENT_CRU_TYPE_DRAWER.

        :return: The parent_drawer of this ParentCru.
        :rtype: str
        :required/optional: optional
        """
        return self._parent_drawer

    @parent_drawer.setter
    def parent_drawer(self, parent_drawer):
        """
        Sets the parent_drawer of this ParentCru.
        This field contains a reference to the parent drawer. It is only valid if the type field is equal to PARENT_CRU_TYPE_DRAWER.

        :param parent_drawer: The parent_drawer of this ParentCru.
        :type: str
        """
        self._parent_drawer = parent_drawer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

