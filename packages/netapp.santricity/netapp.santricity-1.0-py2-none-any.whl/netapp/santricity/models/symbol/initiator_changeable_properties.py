# coding: utf-8

"""
InitiatorChangeableProperties.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class InitiatorChangeableProperties(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        InitiatorChangeableProperties - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'node_name': 'list[ScsiNodeName]',  # (required parameter)
            'label': 'list[str]',  # (required parameter)
            'configured_auth_methods': 'list[AuthenticationBundle]',  # (required parameter)
            'host_ref': 'list[str]'
        }

        self.attribute_map = {
            'node_name': 'nodeName',  # (required parameter)
            'label': 'label',  # (required parameter)
            'configured_auth_methods': 'configuredAuthMethods',  # (required parameter)
            'host_ref': 'hostRef'
        }

        self._node_name = None
        self._label = None
        self._configured_auth_methods = None
        self._host_ref = None

    @property
    def node_name(self):
        """
        Gets the node_name of this InitiatorChangeableProperties.
        The node name for the initiator.

        :return: The node_name of this InitiatorChangeableProperties.
        :rtype: list[ScsiNodeName]
        :required/optional: required
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """
        Sets the node_name of this InitiatorChangeableProperties.
        The node name for the initiator.

        :param node_name: The node_name of this InitiatorChangeableProperties.
        :type: list[ScsiNodeName]
        """
        self._node_name = node_name

    @property
    def label(self):
        """
        Gets the label of this InitiatorChangeableProperties.
        The user-assigned, descriptive label string for the initiator.

        :return: The label of this InitiatorChangeableProperties.
        :rtype: list[str]
        :required/optional: required
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this InitiatorChangeableProperties.
        The user-assigned, descriptive label string for the initiator.

        :param label: The label of this InitiatorChangeableProperties.
        :type: list[str]
        """
        self._label = label

    @property
    def configured_auth_methods(self):
        """
        Gets the configured_auth_methods of this InitiatorChangeableProperties.
        The set of the authentication methods for the initiator. When creating a new initiator, this field defines the authentication methods that the new initiator will have. When updating an existing initiator, this field replaces all existing authentication methods; depending on how the caller populates the list, authentication methods may be added, deleted, or modified. Secrets associated with authentication methods may be modified in this manner. The way to indicate that there is no password is to set the length indicator on the field named secret within AuthMethodTypeData (which is the type of the individual elements of AuthenticationBundle) to zero.

        :return: The configured_auth_methods of this InitiatorChangeableProperties.
        :rtype: list[AuthenticationBundle]
        :required/optional: required
        """
        return self._configured_auth_methods

    @configured_auth_methods.setter
    def configured_auth_methods(self, configured_auth_methods):
        """
        Sets the configured_auth_methods of this InitiatorChangeableProperties.
        The set of the authentication methods for the initiator. When creating a new initiator, this field defines the authentication methods that the new initiator will have. When updating an existing initiator, this field replaces all existing authentication methods; depending on how the caller populates the list, authentication methods may be added, deleted, or modified. Secrets associated with authentication methods may be modified in this manner. The way to indicate that there is no password is to set the length indicator on the field named secret within AuthMethodTypeData (which is the type of the individual elements of AuthenticationBundle) to zero.

        :param configured_auth_methods: The configured_auth_methods of this InitiatorChangeableProperties.
        :type: list[AuthenticationBundle]
        """
        self._configured_auth_methods = configured_auth_methods

    @property
    def host_ref(self):
        """
        Gets the host_ref of this InitiatorChangeableProperties.
        A reference to the host with which this initiator is associated.

        :return: The host_ref of this InitiatorChangeableProperties.
        :rtype: list[str]
        :required/optional: required
        """
        return self._host_ref

    @host_ref.setter
    def host_ref(self, host_ref):
        """
        Sets the host_ref of this InitiatorChangeableProperties.
        A reference to the host with which this initiator is associated.

        :param host_ref: The host_ref of this InitiatorChangeableProperties.
        :type: list[str]
        """
        self._host_ref = host_ref

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

