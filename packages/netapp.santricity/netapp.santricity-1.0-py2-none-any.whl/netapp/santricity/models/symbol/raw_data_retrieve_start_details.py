# coding: utf-8

"""
RawDataRetrieveStartDetails.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class RawDataRetrieveStartDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RawDataRetrieveStartDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'raw_data_transfer_type': 'str',  # (required parameter)
            'dq': 'DqRetrieveStartDetails',  
            'dbm_rec': 'DbmRecRetrieveStartDetails',  
            'dbm_blk': 'DbmBlkRetrieveStartDetails',  
            'dbm_check': 'DbmCheckRetrieveStartDetails',  
            'enclosure_state_capture': 'EnclosureStateCaptureRetrieveStartDetails',  
            'dpl_core_dump': 'DPLCoreDumpRetrieveStartDetails',  
            'io_statistics': 'IoStatisticsRetrieveStartDetails',  
            'fdi_dems_log': 'FdiDemsLogRetrieveStartDetails',  
            'drive_performance_history': 'DrivePerformanceHistoryRetrieveStartDetails',  
            'ioc_dump': 'IOCDumpRetrieveStartDetails',  
            'drive_health_logs': 'DriveHealthLogsStartDetails',  
            'ctrl_performance_parms': 'PerformanceRingStartDetails',  
            'dom0_support_data_start_details': 'Dom0SupportDataStartDetails',  
            'wlc_analytics_start_details': 'WlcAnalyticsStartDetails',  
            'auto_load_balance_statistics_log': 'AutoLoadBalanceStatsLogRetrieveStartDetails'
        }

        self.attribute_map = {
            'raw_data_transfer_type': 'rawDataTransferType',  # (required parameter)
            'dq': 'dq',  
            'dbm_rec': 'dbmRec',  
            'dbm_blk': 'dbmBlk',  
            'dbm_check': 'dbmCheck',  
            'enclosure_state_capture': 'enclosureStateCapture',  
            'dpl_core_dump': 'dplCoreDump',  
            'io_statistics': 'ioStatistics',  
            'fdi_dems_log': 'fdiDemsLog',  
            'drive_performance_history': 'drivePerformanceHistory',  
            'ioc_dump': 'iocDump',  
            'drive_health_logs': 'driveHealthLogs',  
            'ctrl_performance_parms': 'ctrlPerformanceParms',  
            'dom0_support_data_start_details': 'dom0SupportDataStartDetails',  
            'wlc_analytics_start_details': 'wlcAnalyticsStartDetails',  
            'auto_load_balance_statistics_log': 'autoLoadBalanceStatisticsLog'
        }

        self._raw_data_transfer_type = None
        self._dq = None
        self._dbm_rec = None
        self._dbm_blk = None
        self._dbm_check = None
        self._enclosure_state_capture = None
        self._dpl_core_dump = None
        self._io_statistics = None
        self._fdi_dems_log = None
        self._drive_performance_history = None
        self._ioc_dump = None
        self._drive_health_logs = None
        self._ctrl_performance_parms = None
        self._dom0_support_data_start_details = None
        self._wlc_analytics_start_details = None
        self._auto_load_balance_statistics_log = None

    @property
    def raw_data_transfer_type(self):
        """
        Gets the raw_data_transfer_type of this RawDataRetrieveStartDetails.
        This enumeration lists the raw data transfer types.

        :return: The raw_data_transfer_type of this RawDataRetrieveStartDetails.
        :rtype: str
        :required/optional: required
        """
        return self._raw_data_transfer_type

    @raw_data_transfer_type.setter
    def raw_data_transfer_type(self, raw_data_transfer_type):
        """
        Sets the raw_data_transfer_type of this RawDataRetrieveStartDetails.
        This enumeration lists the raw data transfer types.

        :param raw_data_transfer_type: The raw_data_transfer_type of this RawDataRetrieveStartDetails.
        :type: str
        """
        allowed_values = ["unknown", "dq", "dbmblk", "dbmrec", "dbmCheck", "enclosureStateCapture", "dplCoreDumpBundle", "ioStatistics", "fdiDemsLogs", "drivePerformanceHistory", "iocDump", "driveHealthLogs", "ctrlPerfLogs", "dom0SupportData", "retrieveWlcAnalytics", "autoLoadBalanceStatisticsLog", "__UNDEFINED"]
        if raw_data_transfer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `raw_data_transfer_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._raw_data_transfer_type = raw_data_transfer_type

    @property
    def dq(self):
        """
        Gets the dq of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DQ.

        :return: The dq of this RawDataRetrieveStartDetails.
        :rtype: DqRetrieveStartDetails
        :required/optional: optional
        """
        return self._dq

    @dq.setter
    def dq(self, dq):
        """
        Sets the dq of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DQ.

        :param dq: The dq of this RawDataRetrieveStartDetails.
        :type: DqRetrieveStartDetails
        """
        self._dq = dq

    @property
    def dbm_rec(self):
        """
        Gets the dbm_rec of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DBMREC.

        :return: The dbm_rec of this RawDataRetrieveStartDetails.
        :rtype: DbmRecRetrieveStartDetails
        :required/optional: optional
        """
        return self._dbm_rec

    @dbm_rec.setter
    def dbm_rec(self, dbm_rec):
        """
        Sets the dbm_rec of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DBMREC.

        :param dbm_rec: The dbm_rec of this RawDataRetrieveStartDetails.
        :type: DbmRecRetrieveStartDetails
        """
        self._dbm_rec = dbm_rec

    @property
    def dbm_blk(self):
        """
        Gets the dbm_blk of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DBMBLK.

        :return: The dbm_blk of this RawDataRetrieveStartDetails.
        :rtype: DbmBlkRetrieveStartDetails
        :required/optional: optional
        """
        return self._dbm_blk

    @dbm_blk.setter
    def dbm_blk(self, dbm_blk):
        """
        Sets the dbm_blk of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DBMBLK.

        :param dbm_blk: The dbm_blk of this RawDataRetrieveStartDetails.
        :type: DbmBlkRetrieveStartDetails
        """
        self._dbm_blk = dbm_blk

    @property
    def dbm_check(self):
        """
        Gets the dbm_check of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DBM_CHECK.

        :return: The dbm_check of this RawDataRetrieveStartDetails.
        :rtype: DbmCheckRetrieveStartDetails
        :required/optional: optional
        """
        return self._dbm_check

    @dbm_check.setter
    def dbm_check(self, dbm_check):
        """
        Sets the dbm_check of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DBM_CHECK.

        :param dbm_check: The dbm_check of this RawDataRetrieveStartDetails.
        :type: DbmCheckRetrieveStartDetails
        """
        self._dbm_check = dbm_check

    @property
    def enclosure_state_capture(self):
        """
        Gets the enclosure_state_capture of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_ENCLOSURE_STATE_CAPTURE.

        :return: The enclosure_state_capture of this RawDataRetrieveStartDetails.
        :rtype: EnclosureStateCaptureRetrieveStartDetails
        :required/optional: optional
        """
        return self._enclosure_state_capture

    @enclosure_state_capture.setter
    def enclosure_state_capture(self, enclosure_state_capture):
        """
        Sets the enclosure_state_capture of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_ENCLOSURE_STATE_CAPTURE.

        :param enclosure_state_capture: The enclosure_state_capture of this RawDataRetrieveStartDetails.
        :type: EnclosureStateCaptureRetrieveStartDetails
        """
        self._enclosure_state_capture = enclosure_state_capture

    @property
    def dpl_core_dump(self):
        """
        Gets the dpl_core_dump of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DPL_CORE_DUMP_BUNDLE.

        :return: The dpl_core_dump of this RawDataRetrieveStartDetails.
        :rtype: DPLCoreDumpRetrieveStartDetails
        :required/optional: optional
        """
        return self._dpl_core_dump

    @dpl_core_dump.setter
    def dpl_core_dump(self, dpl_core_dump):
        """
        Sets the dpl_core_dump of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DPL_CORE_DUMP_BUNDLE.

        :param dpl_core_dump: The dpl_core_dump of this RawDataRetrieveStartDetails.
        :type: DPLCoreDumpRetrieveStartDetails
        """
        self._dpl_core_dump = dpl_core_dump

    @property
    def io_statistics(self):
        """
        Gets the io_statistics of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_IO_STATISTICS.

        :return: The io_statistics of this RawDataRetrieveStartDetails.
        :rtype: IoStatisticsRetrieveStartDetails
        :required/optional: optional
        """
        return self._io_statistics

    @io_statistics.setter
    def io_statistics(self, io_statistics):
        """
        Sets the io_statistics of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_IO_STATISTICS.

        :param io_statistics: The io_statistics of this RawDataRetrieveStartDetails.
        :type: IoStatisticsRetrieveStartDetails
        """
        self._io_statistics = io_statistics

    @property
    def fdi_dems_log(self):
        """
        Gets the fdi_dems_log of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_FDI_DEMS_LOGS.

        :return: The fdi_dems_log of this RawDataRetrieveStartDetails.
        :rtype: FdiDemsLogRetrieveStartDetails
        :required/optional: optional
        """
        return self._fdi_dems_log

    @fdi_dems_log.setter
    def fdi_dems_log(self, fdi_dems_log):
        """
        Sets the fdi_dems_log of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_FDI_DEMS_LOGS.

        :param fdi_dems_log: The fdi_dems_log of this RawDataRetrieveStartDetails.
        :type: FdiDemsLogRetrieveStartDetails
        """
        self._fdi_dems_log = fdi_dems_log

    @property
    def drive_performance_history(self):
        """
        Gets the drive_performance_history of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DRIVE_PERFORMANCE_HISTORY.

        :return: The drive_performance_history of this RawDataRetrieveStartDetails.
        :rtype: DrivePerformanceHistoryRetrieveStartDetails
        :required/optional: optional
        """
        return self._drive_performance_history

    @drive_performance_history.setter
    def drive_performance_history(self, drive_performance_history):
        """
        Sets the drive_performance_history of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_DRIVE_PERFORMANCE_HISTORY.

        :param drive_performance_history: The drive_performance_history of this RawDataRetrieveStartDetails.
        :type: DrivePerformanceHistoryRetrieveStartDetails
        """
        self._drive_performance_history = drive_performance_history

    @property
    def ioc_dump(self):
        """
        Gets the ioc_dump of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_IOC_DUMP.

        :return: The ioc_dump of this RawDataRetrieveStartDetails.
        :rtype: IOCDumpRetrieveStartDetails
        :required/optional: optional
        """
        return self._ioc_dump

    @ioc_dump.setter
    def ioc_dump(self, ioc_dump):
        """
        Sets the ioc_dump of this RawDataRetrieveStartDetails.
        This field is present only if the type value is equal to RAWDATA_IOC_DUMP.

        :param ioc_dump: The ioc_dump of this RawDataRetrieveStartDetails.
        :type: IOCDumpRetrieveStartDetails
        """
        self._ioc_dump = ioc_dump

    @property
    def drive_health_logs(self):
        """
        Gets the drive_health_logs of this RawDataRetrieveStartDetails.
        This is the case for when drive health logs are being returned in the raw data retrieve operation.

        :return: The drive_health_logs of this RawDataRetrieveStartDetails.
        :rtype: DriveHealthLogsStartDetails
        :required/optional: optional
        """
        return self._drive_health_logs

    @drive_health_logs.setter
    def drive_health_logs(self, drive_health_logs):
        """
        Sets the drive_health_logs of this RawDataRetrieveStartDetails.
        This is the case for when drive health logs are being returned in the raw data retrieve operation.

        :param drive_health_logs: The drive_health_logs of this RawDataRetrieveStartDetails.
        :type: DriveHealthLogsStartDetails
        """
        self._drive_health_logs = drive_health_logs

    @property
    def ctrl_performance_parms(self):
        """
        Gets the ctrl_performance_parms of this RawDataRetrieveStartDetails.


        :return: The ctrl_performance_parms of this RawDataRetrieveStartDetails.
        :rtype: PerformanceRingStartDetails
        :required/optional: optional
        """
        return self._ctrl_performance_parms

    @ctrl_performance_parms.setter
    def ctrl_performance_parms(self, ctrl_performance_parms):
        """
        Sets the ctrl_performance_parms of this RawDataRetrieveStartDetails.


        :param ctrl_performance_parms: The ctrl_performance_parms of this RawDataRetrieveStartDetails.
        :type: PerformanceRingStartDetails
        """
        self._ctrl_performance_parms = ctrl_performance_parms

    @property
    def dom0_support_data_start_details(self):
        """
        Gets the dom0_support_data_start_details of this RawDataRetrieveStartDetails.
        Specifies the details required to start Dom0 support data retrieval for each data type.

        :return: The dom0_support_data_start_details of this RawDataRetrieveStartDetails.
        :rtype: Dom0SupportDataStartDetails
        :required/optional: optional
        """
        return self._dom0_support_data_start_details

    @dom0_support_data_start_details.setter
    def dom0_support_data_start_details(self, dom0_support_data_start_details):
        """
        Sets the dom0_support_data_start_details of this RawDataRetrieveStartDetails.
        Specifies the details required to start Dom0 support data retrieval for each data type.

        :param dom0_support_data_start_details: The dom0_support_data_start_details of this RawDataRetrieveStartDetails.
        :type: Dom0SupportDataStartDetails
        """
        self._dom0_support_data_start_details = dom0_support_data_start_details

    @property
    def wlc_analytics_start_details(self):
        """
        Gets the wlc_analytics_start_details of this RawDataRetrieveStartDetails.
        Data to be used for the start of workload analytics data retrieve.

        :return: The wlc_analytics_start_details of this RawDataRetrieveStartDetails.
        :rtype: WlcAnalyticsStartDetails
        :required/optional: optional
        """
        return self._wlc_analytics_start_details

    @wlc_analytics_start_details.setter
    def wlc_analytics_start_details(self, wlc_analytics_start_details):
        """
        Sets the wlc_analytics_start_details of this RawDataRetrieveStartDetails.
        Data to be used for the start of workload analytics data retrieve.

        :param wlc_analytics_start_details: The wlc_analytics_start_details of this RawDataRetrieveStartDetails.
        :type: WlcAnalyticsStartDetails
        """
        self._wlc_analytics_start_details = wlc_analytics_start_details

    @property
    def auto_load_balance_statistics_log(self):
        """
        Gets the auto_load_balance_statistics_log of this RawDataRetrieveStartDetails.
        Specifies the details to start an Auto Load Balance statistics log data retrieval.

        :return: The auto_load_balance_statistics_log of this RawDataRetrieveStartDetails.
        :rtype: AutoLoadBalanceStatsLogRetrieveStartDetails
        :required/optional: optional
        """
        return self._auto_load_balance_statistics_log

    @auto_load_balance_statistics_log.setter
    def auto_load_balance_statistics_log(self, auto_load_balance_statistics_log):
        """
        Sets the auto_load_balance_statistics_log of this RawDataRetrieveStartDetails.
        Specifies the details to start an Auto Load Balance statistics log data retrieval.

        :param auto_load_balance_statistics_log: The auto_load_balance_statistics_log of this RawDataRetrieveStartDetails.
        :type: AutoLoadBalanceStatsLogRetrieveStartDetails
        """
        self._auto_load_balance_statistics_log = auto_load_balance_statistics_log

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

