# coding: utf-8

"""
ImplementationCounterGroup.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class ImplementationCounterGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ImplementationCounterGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'controller_ref': 'str',  # (required parameter)
            'base_time': 'int',  # (required parameter)
            'read_hit_ops': 'int',  # (required parameter)
            'read_hit_bytes': 'int',  # (required parameter)
            'read_hit_time_total': 'int',  # (required parameter)
            'read_hit_time_max': 'int',  # (required parameter)
            'read_hit_stripes': 'int',  # (required parameter)
            'read_hit_segments': 'int',  # (required parameter)
            'read_ops': 'int',  # (required parameter)
            'read_bytes': 'int',  # (required parameter)
            'read_time_total': 'int',  # (required parameter)
            'read_time_max': 'int',  # (required parameter)
            'read_stripes': 'int',  # (required parameter)
            'read_segments': 'int',  # (required parameter)
            'write_hit_ops': 'int',  # (required parameter)
            'write_hit_bytes': 'int',  # (required parameter)
            'write_hit_time_total': 'int',  # (required parameter)
            'write_hit_time_max': 'int',  # (required parameter)
            'write_hit_stripes': 'int',  # (required parameter)
            'write_hit_segments': 'int',  # (required parameter)
            'write_ops': 'int',  # (required parameter)
            'write_bytes': 'int',  # (required parameter)
            'write_time_total': 'int',  # (required parameter)
            'write_time_max': 'int',  # (required parameter)
            'write_stripes': 'int',  # (required parameter)
            'write_segments': 'int',  # (required parameter)
            'other_ops': 'int',  # (required parameter)
            'other_time_total': 'int',  # (required parameter)
            'other_time_max': 'int',  # (required parameter)
            'idle_time': 'int',  # (required parameter)
            'write_ops_by_algorithm': 'list[int]',  # (required parameter)
            'read_hit_time_total_sq': 'int',  # (required parameter)
            'read_time_total_sq': 'int',  # (required parameter)
            'write_hit_time_total_sq': 'int',  # (required parameter)
            'write_time_total_sq': 'int',  # (required parameter)
            'other_time_total_sq': 'int',  # (required parameter)
            'err_redundancy_chk_unrecovered_reads': 'int',  # (required parameter)
            'err_redundancy_chk_recovered_reads': 'int',  # (required parameter)
            'err_redundancy_chk_indeterminate_reads': 'int',  # (required parameter)
            'flash_cache_read_hit_ops': 'int',  # (required parameter)
            'flash_cache_read_hit_bytes': 'int',  # (required parameter)
            'flash_cache_read_hit_time_total': 'int',  # (required parameter)
            'flash_cache_read_hit_time_max': 'int',  # (required parameter)
            'flash_cache_read_hit_time_total_sq': 'int'
        }

        self.attribute_map = {
            'controller_ref': 'controllerRef',  # (required parameter)
            'base_time': 'baseTime',  # (required parameter)
            'read_hit_ops': 'readHitOps',  # (required parameter)
            'read_hit_bytes': 'readHitBytes',  # (required parameter)
            'read_hit_time_total': 'readHitTimeTotal',  # (required parameter)
            'read_hit_time_max': 'readHitTimeMax',  # (required parameter)
            'read_hit_stripes': 'readHitStripes',  # (required parameter)
            'read_hit_segments': 'readHitSegments',  # (required parameter)
            'read_ops': 'readOps',  # (required parameter)
            'read_bytes': 'readBytes',  # (required parameter)
            'read_time_total': 'readTimeTotal',  # (required parameter)
            'read_time_max': 'readTimeMax',  # (required parameter)
            'read_stripes': 'readStripes',  # (required parameter)
            'read_segments': 'readSegments',  # (required parameter)
            'write_hit_ops': 'writeHitOps',  # (required parameter)
            'write_hit_bytes': 'writeHitBytes',  # (required parameter)
            'write_hit_time_total': 'writeHitTimeTotal',  # (required parameter)
            'write_hit_time_max': 'writeHitTimeMax',  # (required parameter)
            'write_hit_stripes': 'writeHitStripes',  # (required parameter)
            'write_hit_segments': 'writeHitSegments',  # (required parameter)
            'write_ops': 'writeOps',  # (required parameter)
            'write_bytes': 'writeBytes',  # (required parameter)
            'write_time_total': 'writeTimeTotal',  # (required parameter)
            'write_time_max': 'writeTimeMax',  # (required parameter)
            'write_stripes': 'writeStripes',  # (required parameter)
            'write_segments': 'writeSegments',  # (required parameter)
            'other_ops': 'otherOps',  # (required parameter)
            'other_time_total': 'otherTimeTotal',  # (required parameter)
            'other_time_max': 'otherTimeMax',  # (required parameter)
            'idle_time': 'idleTime',  # (required parameter)
            'write_ops_by_algorithm': 'writeOpsByAlgorithm',  # (required parameter)
            'read_hit_time_total_sq': 'readHitTimeTotalSq',  # (required parameter)
            'read_time_total_sq': 'readTimeTotalSq',  # (required parameter)
            'write_hit_time_total_sq': 'writeHitTimeTotalSq',  # (required parameter)
            'write_time_total_sq': 'writeTimeTotalSq',  # (required parameter)
            'other_time_total_sq': 'otherTimeTotalSq',  # (required parameter)
            'err_redundancy_chk_unrecovered_reads': 'errRedundancyChkUnrecoveredReads',  # (required parameter)
            'err_redundancy_chk_recovered_reads': 'errRedundancyChkRecoveredReads',  # (required parameter)
            'err_redundancy_chk_indeterminate_reads': 'errRedundancyChkIndeterminateReads',  # (required parameter)
            'flash_cache_read_hit_ops': 'flashCacheReadHitOps',  # (required parameter)
            'flash_cache_read_hit_bytes': 'flashCacheReadHitBytes',  # (required parameter)
            'flash_cache_read_hit_time_total': 'flashCacheReadHitTimeTotal',  # (required parameter)
            'flash_cache_read_hit_time_max': 'flashCacheReadHitTimeMax',  # (required parameter)
            'flash_cache_read_hit_time_total_sq': 'flashCacheReadHitTimeTotalSq'
        }

        self._controller_ref = None
        self._base_time = None
        self._read_hit_ops = None
        self._read_hit_bytes = None
        self._read_hit_time_total = None
        self._read_hit_time_max = None
        self._read_hit_stripes = None
        self._read_hit_segments = None
        self._read_ops = None
        self._read_bytes = None
        self._read_time_total = None
        self._read_time_max = None
        self._read_stripes = None
        self._read_segments = None
        self._write_hit_ops = None
        self._write_hit_bytes = None
        self._write_hit_time_total = None
        self._write_hit_time_max = None
        self._write_hit_stripes = None
        self._write_hit_segments = None
        self._write_ops = None
        self._write_bytes = None
        self._write_time_total = None
        self._write_time_max = None
        self._write_stripes = None
        self._write_segments = None
        self._other_ops = None
        self._other_time_total = None
        self._other_time_max = None
        self._idle_time = None
        self._write_ops_by_algorithm = None
        self._read_hit_time_total_sq = None
        self._read_time_total_sq = None
        self._write_hit_time_total_sq = None
        self._write_time_total_sq = None
        self._other_time_total_sq = None
        self._err_redundancy_chk_unrecovered_reads = None
        self._err_redundancy_chk_recovered_reads = None
        self._err_redundancy_chk_indeterminate_reads = None
        self._flash_cache_read_hit_ops = None
        self._flash_cache_read_hit_bytes = None
        self._flash_cache_read_hit_time_total = None
        self._flash_cache_read_hit_time_max = None
        self._flash_cache_read_hit_time_total_sq = None

    @property
    def controller_ref(self):
        """
        Gets the controller_ref of this ImplementationCounterGroup.
        A reference to the controller that accumulated the counters for this group.

        :return: The controller_ref of this ImplementationCounterGroup.
        :rtype: str
        :required/optional: required
        """
        return self._controller_ref

    @controller_ref.setter
    def controller_ref(self, controller_ref):
        """
        Sets the controller_ref of this ImplementationCounterGroup.
        A reference to the controller that accumulated the counters for this group.

        :param controller_ref: The controller_ref of this ImplementationCounterGroup.
        :type: str
        """
        self._controller_ref = controller_ref

    @property
    def base_time(self):
        """
        Gets the base_time of this ImplementationCounterGroup.
        The time that the counters were last reset. Time is the number of seconds since midnight, January 1, 1970.

        :return: The base_time of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._base_time

    @base_time.setter
    def base_time(self, base_time):
        """
        Sets the base_time of this ImplementationCounterGroup.
        The time that the counters were last reset. Time is the number of seconds since midnight, January 1, 1970.

        :param base_time: The base_time of this ImplementationCounterGroup.
        :type: int
        """
        self._base_time = base_time

    @property
    def read_hit_ops(self):
        """
        Gets the read_hit_ops of this ImplementationCounterGroup.
        The number of read operations that hit cache.

        :return: The read_hit_ops of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_hit_ops

    @read_hit_ops.setter
    def read_hit_ops(self, read_hit_ops):
        """
        Sets the read_hit_ops of this ImplementationCounterGroup.
        The number of read operations that hit cache.

        :param read_hit_ops: The read_hit_ops of this ImplementationCounterGroup.
        :type: int
        """
        self._read_hit_ops = read_hit_ops

    @property
    def read_hit_bytes(self):
        """
        Gets the read_hit_bytes of this ImplementationCounterGroup.
        The number of bytes read that hit cache.

        :return: The read_hit_bytes of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_hit_bytes

    @read_hit_bytes.setter
    def read_hit_bytes(self, read_hit_bytes):
        """
        Sets the read_hit_bytes of this ImplementationCounterGroup.
        The number of bytes read that hit cache.

        :param read_hit_bytes: The read_hit_bytes of this ImplementationCounterGroup.
        :type: int
        """
        self._read_hit_bytes = read_hit_bytes

    @property
    def read_hit_time_total(self):
        """
        Gets the read_hit_time_total of this ImplementationCounterGroup.
        The total time in microseconds spent in read operations that hit cache.

        :return: The read_hit_time_total of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_hit_time_total

    @read_hit_time_total.setter
    def read_hit_time_total(self, read_hit_time_total):
        """
        Sets the read_hit_time_total of this ImplementationCounterGroup.
        The total time in microseconds spent in read operations that hit cache.

        :param read_hit_time_total: The read_hit_time_total of this ImplementationCounterGroup.
        :type: int
        """
        self._read_hit_time_total = read_hit_time_total

    @property
    def read_hit_time_max(self):
        """
        Gets the read_hit_time_max of this ImplementationCounterGroup.
        The maximum time in microseconds spent in any one read operation that hit cache.

        :return: The read_hit_time_max of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_hit_time_max

    @read_hit_time_max.setter
    def read_hit_time_max(self, read_hit_time_max):
        """
        Sets the read_hit_time_max of this ImplementationCounterGroup.
        The maximum time in microseconds spent in any one read operation that hit cache.

        :param read_hit_time_max: The read_hit_time_max of this ImplementationCounterGroup.
        :type: int
        """
        self._read_hit_time_max = read_hit_time_max

    @property
    def read_hit_stripes(self):
        """
        Gets the read_hit_stripes of this ImplementationCounterGroup.
        The number of stripe reads that hit cache.

        :return: The read_hit_stripes of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_hit_stripes

    @read_hit_stripes.setter
    def read_hit_stripes(self, read_hit_stripes):
        """
        Sets the read_hit_stripes of this ImplementationCounterGroup.
        The number of stripe reads that hit cache.

        :param read_hit_stripes: The read_hit_stripes of this ImplementationCounterGroup.
        :type: int
        """
        self._read_hit_stripes = read_hit_stripes

    @property
    def read_hit_segments(self):
        """
        Gets the read_hit_segments of this ImplementationCounterGroup.
        The number of segment reads that hit cache.

        :return: The read_hit_segments of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_hit_segments

    @read_hit_segments.setter
    def read_hit_segments(self, read_hit_segments):
        """
        Sets the read_hit_segments of this ImplementationCounterGroup.
        The number of segment reads that hit cache.

        :param read_hit_segments: The read_hit_segments of this ImplementationCounterGroup.
        :type: int
        """
        self._read_hit_segments = read_hit_segments

    @property
    def read_ops(self):
        """
        Gets the read_ops of this ImplementationCounterGroup.
        The number of read operations.

        :return: The read_ops of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_ops

    @read_ops.setter
    def read_ops(self, read_ops):
        """
        Sets the read_ops of this ImplementationCounterGroup.
        The number of read operations.

        :param read_ops: The read_ops of this ImplementationCounterGroup.
        :type: int
        """
        self._read_ops = read_ops

    @property
    def read_bytes(self):
        """
        Gets the read_bytes of this ImplementationCounterGroup.
        The number of bytes read.

        :return: The read_bytes of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_bytes

    @read_bytes.setter
    def read_bytes(self, read_bytes):
        """
        Sets the read_bytes of this ImplementationCounterGroup.
        The number of bytes read.

        :param read_bytes: The read_bytes of this ImplementationCounterGroup.
        :type: int
        """
        self._read_bytes = read_bytes

    @property
    def read_time_total(self):
        """
        Gets the read_time_total of this ImplementationCounterGroup.
        The total time in microseconds spent in read operations.

        :return: The read_time_total of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_time_total

    @read_time_total.setter
    def read_time_total(self, read_time_total):
        """
        Sets the read_time_total of this ImplementationCounterGroup.
        The total time in microseconds spent in read operations.

        :param read_time_total: The read_time_total of this ImplementationCounterGroup.
        :type: int
        """
        self._read_time_total = read_time_total

    @property
    def read_time_max(self):
        """
        Gets the read_time_max of this ImplementationCounterGroup.
        The maximum time in microseconds spent in any one read operation.

        :return: The read_time_max of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_time_max

    @read_time_max.setter
    def read_time_max(self, read_time_max):
        """
        Sets the read_time_max of this ImplementationCounterGroup.
        The maximum time in microseconds spent in any one read operation.

        :param read_time_max: The read_time_max of this ImplementationCounterGroup.
        :type: int
        """
        self._read_time_max = read_time_max

    @property
    def read_stripes(self):
        """
        Gets the read_stripes of this ImplementationCounterGroup.
        The number of stripe reads.

        :return: The read_stripes of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_stripes

    @read_stripes.setter
    def read_stripes(self, read_stripes):
        """
        Sets the read_stripes of this ImplementationCounterGroup.
        The number of stripe reads.

        :param read_stripes: The read_stripes of this ImplementationCounterGroup.
        :type: int
        """
        self._read_stripes = read_stripes

    @property
    def read_segments(self):
        """
        Gets the read_segments of this ImplementationCounterGroup.
        The number of segment reads.

        :return: The read_segments of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_segments

    @read_segments.setter
    def read_segments(self, read_segments):
        """
        Sets the read_segments of this ImplementationCounterGroup.
        The number of segment reads.

        :param read_segments: The read_segments of this ImplementationCounterGroup.
        :type: int
        """
        self._read_segments = read_segments

    @property
    def write_hit_ops(self):
        """
        Gets the write_hit_ops of this ImplementationCounterGroup.
        The number of write operations that hit cache.

        :return: The write_hit_ops of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_hit_ops

    @write_hit_ops.setter
    def write_hit_ops(self, write_hit_ops):
        """
        Sets the write_hit_ops of this ImplementationCounterGroup.
        The number of write operations that hit cache.

        :param write_hit_ops: The write_hit_ops of this ImplementationCounterGroup.
        :type: int
        """
        self._write_hit_ops = write_hit_ops

    @property
    def write_hit_bytes(self):
        """
        Gets the write_hit_bytes of this ImplementationCounterGroup.
        The number of bytes written that hit cache.

        :return: The write_hit_bytes of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_hit_bytes

    @write_hit_bytes.setter
    def write_hit_bytes(self, write_hit_bytes):
        """
        Sets the write_hit_bytes of this ImplementationCounterGroup.
        The number of bytes written that hit cache.

        :param write_hit_bytes: The write_hit_bytes of this ImplementationCounterGroup.
        :type: int
        """
        self._write_hit_bytes = write_hit_bytes

    @property
    def write_hit_time_total(self):
        """
        Gets the write_hit_time_total of this ImplementationCounterGroup.
        The total time in microseconds spent in write operations that hit cache.

        :return: The write_hit_time_total of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_hit_time_total

    @write_hit_time_total.setter
    def write_hit_time_total(self, write_hit_time_total):
        """
        Sets the write_hit_time_total of this ImplementationCounterGroup.
        The total time in microseconds spent in write operations that hit cache.

        :param write_hit_time_total: The write_hit_time_total of this ImplementationCounterGroup.
        :type: int
        """
        self._write_hit_time_total = write_hit_time_total

    @property
    def write_hit_time_max(self):
        """
        Gets the write_hit_time_max of this ImplementationCounterGroup.
        The maximum time in microseconds spent in any one write operation that hit cache.

        :return: The write_hit_time_max of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_hit_time_max

    @write_hit_time_max.setter
    def write_hit_time_max(self, write_hit_time_max):
        """
        Sets the write_hit_time_max of this ImplementationCounterGroup.
        The maximum time in microseconds spent in any one write operation that hit cache.

        :param write_hit_time_max: The write_hit_time_max of this ImplementationCounterGroup.
        :type: int
        """
        self._write_hit_time_max = write_hit_time_max

    @property
    def write_hit_stripes(self):
        """
        Gets the write_hit_stripes of this ImplementationCounterGroup.
        The number of stripe writes that hit cache.

        :return: The write_hit_stripes of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_hit_stripes

    @write_hit_stripes.setter
    def write_hit_stripes(self, write_hit_stripes):
        """
        Sets the write_hit_stripes of this ImplementationCounterGroup.
        The number of stripe writes that hit cache.

        :param write_hit_stripes: The write_hit_stripes of this ImplementationCounterGroup.
        :type: int
        """
        self._write_hit_stripes = write_hit_stripes

    @property
    def write_hit_segments(self):
        """
        Gets the write_hit_segments of this ImplementationCounterGroup.
        The number of segment writes that hit cache.

        :return: The write_hit_segments of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_hit_segments

    @write_hit_segments.setter
    def write_hit_segments(self, write_hit_segments):
        """
        Sets the write_hit_segments of this ImplementationCounterGroup.
        The number of segment writes that hit cache.

        :param write_hit_segments: The write_hit_segments of this ImplementationCounterGroup.
        :type: int
        """
        self._write_hit_segments = write_hit_segments

    @property
    def write_ops(self):
        """
        Gets the write_ops of this ImplementationCounterGroup.
        The number of write operations.

        :return: The write_ops of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_ops

    @write_ops.setter
    def write_ops(self, write_ops):
        """
        Sets the write_ops of this ImplementationCounterGroup.
        The number of write operations.

        :param write_ops: The write_ops of this ImplementationCounterGroup.
        :type: int
        """
        self._write_ops = write_ops

    @property
    def write_bytes(self):
        """
        Gets the write_bytes of this ImplementationCounterGroup.
        The number of bytes written.

        :return: The write_bytes of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_bytes

    @write_bytes.setter
    def write_bytes(self, write_bytes):
        """
        Sets the write_bytes of this ImplementationCounterGroup.
        The number of bytes written.

        :param write_bytes: The write_bytes of this ImplementationCounterGroup.
        :type: int
        """
        self._write_bytes = write_bytes

    @property
    def write_time_total(self):
        """
        Gets the write_time_total of this ImplementationCounterGroup.
        The total time in microseconds spent in write operations.

        :return: The write_time_total of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_time_total

    @write_time_total.setter
    def write_time_total(self, write_time_total):
        """
        Sets the write_time_total of this ImplementationCounterGroup.
        The total time in microseconds spent in write operations.

        :param write_time_total: The write_time_total of this ImplementationCounterGroup.
        :type: int
        """
        self._write_time_total = write_time_total

    @property
    def write_time_max(self):
        """
        Gets the write_time_max of this ImplementationCounterGroup.
        The maximum time in microseconds spent in any one write operation.

        :return: The write_time_max of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_time_max

    @write_time_max.setter
    def write_time_max(self, write_time_max):
        """
        Sets the write_time_max of this ImplementationCounterGroup.
        The maximum time in microseconds spent in any one write operation.

        :param write_time_max: The write_time_max of this ImplementationCounterGroup.
        :type: int
        """
        self._write_time_max = write_time_max

    @property
    def write_stripes(self):
        """
        Gets the write_stripes of this ImplementationCounterGroup.
        The number of stripe writes.

        :return: The write_stripes of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_stripes

    @write_stripes.setter
    def write_stripes(self, write_stripes):
        """
        Sets the write_stripes of this ImplementationCounterGroup.
        The number of stripe writes.

        :param write_stripes: The write_stripes of this ImplementationCounterGroup.
        :type: int
        """
        self._write_stripes = write_stripes

    @property
    def write_segments(self):
        """
        Gets the write_segments of this ImplementationCounterGroup.
        The number of segment writes.

        :return: The write_segments of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_segments

    @write_segments.setter
    def write_segments(self, write_segments):
        """
        Sets the write_segments of this ImplementationCounterGroup.
        The number of segment writes.

        :param write_segments: The write_segments of this ImplementationCounterGroup.
        :type: int
        """
        self._write_segments = write_segments

    @property
    def other_ops(self):
        """
        Gets the other_ops of this ImplementationCounterGroup.
        The number of non-read-write operations.

        :return: The other_ops of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._other_ops

    @other_ops.setter
    def other_ops(self, other_ops):
        """
        Sets the other_ops of this ImplementationCounterGroup.
        The number of non-read-write operations.

        :param other_ops: The other_ops of this ImplementationCounterGroup.
        :type: int
        """
        self._other_ops = other_ops

    @property
    def other_time_total(self):
        """
        Gets the other_time_total of this ImplementationCounterGroup.
        The total time in microseconds spent in non-read-write operations.

        :return: The other_time_total of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._other_time_total

    @other_time_total.setter
    def other_time_total(self, other_time_total):
        """
        Sets the other_time_total of this ImplementationCounterGroup.
        The total time in microseconds spent in non-read-write operations.

        :param other_time_total: The other_time_total of this ImplementationCounterGroup.
        :type: int
        """
        self._other_time_total = other_time_total

    @property
    def other_time_max(self):
        """
        Gets the other_time_max of this ImplementationCounterGroup.
        The maximum time in microseconds spent in any one non-read-write operation.

        :return: The other_time_max of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._other_time_max

    @other_time_max.setter
    def other_time_max(self, other_time_max):
        """
        Sets the other_time_max of this ImplementationCounterGroup.
        The maximum time in microseconds spent in any one non-read-write operation.

        :param other_time_max: The other_time_max of this ImplementationCounterGroup.
        :type: int
        """
        self._other_time_max = other_time_max

    @property
    def idle_time(self):
        """
        Gets the idle_time of this ImplementationCounterGroup.
        The total time in microseconds spent idle since baseTime.

        :return: The idle_time of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._idle_time

    @idle_time.setter
    def idle_time(self, idle_time):
        """
        Sets the idle_time of this ImplementationCounterGroup.
        The total time in microseconds spent idle since baseTime.

        :param idle_time: The idle_time of this ImplementationCounterGroup.
        :type: int
        """
        self._idle_time = idle_time

    @property
    def write_ops_by_algorithm(self):
        """
        Gets the write_ops_by_algorithm of this ImplementationCounterGroup.
        This field is used to record the number of write operations for a given RAID implementation algorithm. The algorithms are numbered 0..(NUMBER_OF_ALGORITHMS - 1). The actual algorithm represented by a given algorithm number depends on the RAID level of the object of interest. For RAID 0 objects, algorithm 0 is Single, Algorithm 2 is Complex, and Algorithm 3 is Fast. For RAID 3/5, Algorithm 0 is Full, Algorithm 1 is Partial, Algorithm 2 is RMW, Algorithm 3 is No Parity, and Algorithm 4 is Fast.

        :return: The write_ops_by_algorithm of this ImplementationCounterGroup.
        :rtype: list[int]
        :required/optional: required
        """
        return self._write_ops_by_algorithm

    @write_ops_by_algorithm.setter
    def write_ops_by_algorithm(self, write_ops_by_algorithm):
        """
        Sets the write_ops_by_algorithm of this ImplementationCounterGroup.
        This field is used to record the number of write operations for a given RAID implementation algorithm. The algorithms are numbered 0..(NUMBER_OF_ALGORITHMS - 1). The actual algorithm represented by a given algorithm number depends on the RAID level of the object of interest. For RAID 0 objects, algorithm 0 is Single, Algorithm 2 is Complex, and Algorithm 3 is Fast. For RAID 3/5, Algorithm 0 is Full, Algorithm 1 is Partial, Algorithm 2 is RMW, Algorithm 3 is No Parity, and Algorithm 4 is Fast.

        :param write_ops_by_algorithm: The write_ops_by_algorithm of this ImplementationCounterGroup.
        :type: list[int]
        """
        self._write_ops_by_algorithm = write_ops_by_algorithm

    @property
    def read_hit_time_total_sq(self):
        """
        Gets the read_hit_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of microseconds spent in read operations that hit cache.

        :return: The read_hit_time_total_sq of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_hit_time_total_sq

    @read_hit_time_total_sq.setter
    def read_hit_time_total_sq(self, read_hit_time_total_sq):
        """
        Sets the read_hit_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of microseconds spent in read operations that hit cache.

        :param read_hit_time_total_sq: The read_hit_time_total_sq of this ImplementationCounterGroup.
        :type: int
        """
        self._read_hit_time_total_sq = read_hit_time_total_sq

    @property
    def read_time_total_sq(self):
        """
        Gets the read_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of microseconds spent in read operations.

        :return: The read_time_total_sq of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_time_total_sq

    @read_time_total_sq.setter
    def read_time_total_sq(self, read_time_total_sq):
        """
        Sets the read_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of microseconds spent in read operations.

        :param read_time_total_sq: The read_time_total_sq of this ImplementationCounterGroup.
        :type: int
        """
        self._read_time_total_sq = read_time_total_sq

    @property
    def write_hit_time_total_sq(self):
        """
        Gets the write_hit_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of microseconds spent in write operations that hit cache.

        :return: The write_hit_time_total_sq of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_hit_time_total_sq

    @write_hit_time_total_sq.setter
    def write_hit_time_total_sq(self, write_hit_time_total_sq):
        """
        Sets the write_hit_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of microseconds spent in write operations that hit cache.

        :param write_hit_time_total_sq: The write_hit_time_total_sq of this ImplementationCounterGroup.
        :type: int
        """
        self._write_hit_time_total_sq = write_hit_time_total_sq

    @property
    def write_time_total_sq(self):
        """
        Gets the write_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of microseconds spent in write operations.

        :return: The write_time_total_sq of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_time_total_sq

    @write_time_total_sq.setter
    def write_time_total_sq(self, write_time_total_sq):
        """
        Sets the write_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of microseconds spent in write operations.

        :param write_time_total_sq: The write_time_total_sq of this ImplementationCounterGroup.
        :type: int
        """
        self._write_time_total_sq = write_time_total_sq

    @property
    def other_time_total_sq(self):
        """
        Gets the other_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of microseconds spent in non read-write operations.

        :return: The other_time_total_sq of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._other_time_total_sq

    @other_time_total_sq.setter
    def other_time_total_sq(self, other_time_total_sq):
        """
        Sets the other_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of microseconds spent in non read-write operations.

        :param other_time_total_sq: The other_time_total_sq of this ImplementationCounterGroup.
        :type: int
        """
        self._other_time_total_sq = other_time_total_sq

    @property
    def err_redundancy_chk_unrecovered_reads(self):
        """
        Gets the err_redundancy_chk_unrecovered_reads of this ImplementationCounterGroup.
        The number of read requests that have failed due to redundancy group inconsistencies.

        :return: The err_redundancy_chk_unrecovered_reads of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._err_redundancy_chk_unrecovered_reads

    @err_redundancy_chk_unrecovered_reads.setter
    def err_redundancy_chk_unrecovered_reads(self, err_redundancy_chk_unrecovered_reads):
        """
        Sets the err_redundancy_chk_unrecovered_reads of this ImplementationCounterGroup.
        The number of read requests that have failed due to redundancy group inconsistencies.

        :param err_redundancy_chk_unrecovered_reads: The err_redundancy_chk_unrecovered_reads of this ImplementationCounterGroup.
        :type: int
        """
        self._err_redundancy_chk_unrecovered_reads = err_redundancy_chk_unrecovered_reads

    @property
    def err_redundancy_chk_recovered_reads(self):
        """
        Gets the err_redundancy_chk_recovered_reads of this ImplementationCounterGroup.
        The number of read requests that have experienced a redundancy group inconsistency that was subsequently recovered by retrying the consistency check.

        :return: The err_redundancy_chk_recovered_reads of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._err_redundancy_chk_recovered_reads

    @err_redundancy_chk_recovered_reads.setter
    def err_redundancy_chk_recovered_reads(self, err_redundancy_chk_recovered_reads):
        """
        Sets the err_redundancy_chk_recovered_reads of this ImplementationCounterGroup.
        The number of read requests that have experienced a redundancy group inconsistency that was subsequently recovered by retrying the consistency check.

        :param err_redundancy_chk_recovered_reads: The err_redundancy_chk_recovered_reads of this ImplementationCounterGroup.
        :type: int
        """
        self._err_redundancy_chk_recovered_reads = err_redundancy_chk_recovered_reads

    @property
    def err_redundancy_chk_indeterminate_reads(self):
        """
        Gets the err_redundancy_chk_indeterminate_reads of this ImplementationCounterGroup.
        The number of read requests for which the consistency of the redundancy data could not be determined, but for which the read was carried out to completion.

        :return: The err_redundancy_chk_indeterminate_reads of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._err_redundancy_chk_indeterminate_reads

    @err_redundancy_chk_indeterminate_reads.setter
    def err_redundancy_chk_indeterminate_reads(self, err_redundancy_chk_indeterminate_reads):
        """
        Sets the err_redundancy_chk_indeterminate_reads of this ImplementationCounterGroup.
        The number of read requests for which the consistency of the redundancy data could not be determined, but for which the read was carried out to completion.

        :param err_redundancy_chk_indeterminate_reads: The err_redundancy_chk_indeterminate_reads of this ImplementationCounterGroup.
        :type: int
        """
        self._err_redundancy_chk_indeterminate_reads = err_redundancy_chk_indeterminate_reads

    @property
    def flash_cache_read_hit_ops(self):
        """
        Gets the flash_cache_read_hit_ops of this ImplementationCounterGroup.
        The number of flash cache read hit operations.

        :return: The flash_cache_read_hit_ops of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._flash_cache_read_hit_ops

    @flash_cache_read_hit_ops.setter
    def flash_cache_read_hit_ops(self, flash_cache_read_hit_ops):
        """
        Sets the flash_cache_read_hit_ops of this ImplementationCounterGroup.
        The number of flash cache read hit operations.

        :param flash_cache_read_hit_ops: The flash_cache_read_hit_ops of this ImplementationCounterGroup.
        :type: int
        """
        self._flash_cache_read_hit_ops = flash_cache_read_hit_ops

    @property
    def flash_cache_read_hit_bytes(self):
        """
        Gets the flash_cache_read_hit_bytes of this ImplementationCounterGroup.
        The number of flash cache read hit bytes.

        :return: The flash_cache_read_hit_bytes of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._flash_cache_read_hit_bytes

    @flash_cache_read_hit_bytes.setter
    def flash_cache_read_hit_bytes(self, flash_cache_read_hit_bytes):
        """
        Sets the flash_cache_read_hit_bytes of this ImplementationCounterGroup.
        The number of flash cache read hit bytes.

        :param flash_cache_read_hit_bytes: The flash_cache_read_hit_bytes of this ImplementationCounterGroup.
        :type: int
        """
        self._flash_cache_read_hit_bytes = flash_cache_read_hit_bytes

    @property
    def flash_cache_read_hit_time_total(self):
        """
        Gets the flash_cache_read_hit_time_total of this ImplementationCounterGroup.
        The sum of all response times for all reads that have cache hits, in microseconds.

        :return: The flash_cache_read_hit_time_total of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._flash_cache_read_hit_time_total

    @flash_cache_read_hit_time_total.setter
    def flash_cache_read_hit_time_total(self, flash_cache_read_hit_time_total):
        """
        Sets the flash_cache_read_hit_time_total of this ImplementationCounterGroup.
        The sum of all response times for all reads that have cache hits, in microseconds.

        :param flash_cache_read_hit_time_total: The flash_cache_read_hit_time_total of this ImplementationCounterGroup.
        :type: int
        """
        self._flash_cache_read_hit_time_total = flash_cache_read_hit_time_total

    @property
    def flash_cache_read_hit_time_max(self):
        """
        Gets the flash_cache_read_hit_time_max of this ImplementationCounterGroup.
        Maximum I/O time in microseconds for any one read I/O that has a cache hit.

        :return: The flash_cache_read_hit_time_max of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._flash_cache_read_hit_time_max

    @flash_cache_read_hit_time_max.setter
    def flash_cache_read_hit_time_max(self, flash_cache_read_hit_time_max):
        """
        Sets the flash_cache_read_hit_time_max of this ImplementationCounterGroup.
        Maximum I/O time in microseconds for any one read I/O that has a cache hit.

        :param flash_cache_read_hit_time_max: The flash_cache_read_hit_time_max of this ImplementationCounterGroup.
        :type: int
        """
        self._flash_cache_read_hit_time_max = flash_cache_read_hit_time_max

    @property
    def flash_cache_read_hit_time_total_sq(self):
        """
        Gets the flash_cache_read_hit_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of the response times for all reads that have cache hits, in microseconds (used for standard deviation).

        :return: The flash_cache_read_hit_time_total_sq of this ImplementationCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._flash_cache_read_hit_time_total_sq

    @flash_cache_read_hit_time_total_sq.setter
    def flash_cache_read_hit_time_total_sq(self, flash_cache_read_hit_time_total_sq):
        """
        Sets the flash_cache_read_hit_time_total_sq of this ImplementationCounterGroup.
        The sum of the squares of the response times for all reads that have cache hits, in microseconds (used for standard deviation).

        :param flash_cache_read_hit_time_total_sq: The flash_cache_read_hit_time_total_sq of this ImplementationCounterGroup.
        :type: int
        """
        self._flash_cache_read_hit_time_total_sq = flash_cache_read_hit_time_total_sq

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

