# coding: utf-8

"""
PersistentRegistration.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class PersistentRegistration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PersistentRegistration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'volume_ref': 'str',  # (required parameter)
            'lun': 'int',  # (required parameter)
            'cluster_ref': 'str',  # (required parameter)
            'host_ref': 'str',  # (required parameter)
            'reservation_type_id': 'str',  # (required parameter)
            'registrant_list': 'RegistrantList',  # (required parameter)
            'ptpl_a': 'bool'
        }

        self.attribute_map = {
            'volume_ref': 'volumeRef',  # (required parameter)
            'lun': 'lun',  # (required parameter)
            'cluster_ref': 'clusterRef',  # (required parameter)
            'host_ref': 'hostRef',  # (required parameter)
            'reservation_type_id': 'reservationTypeID',  # (required parameter)
            'registrant_list': 'registrantList',  # (required parameter)
            'ptpl_a': 'ptpl_A'
        }

        self._volume_ref = None
        self._lun = None
        self._cluster_ref = None
        self._host_ref = None
        self._reservation_type_id = None
        self._registrant_list = None
        self._ptpl_a = None

    @property
    def volume_ref(self):
        """
        Gets the volume_ref of this PersistentRegistration.
        The volume identifier.

        :return: The volume_ref of this PersistentRegistration.
        :rtype: str
        :required/optional: required
        """
        return self._volume_ref

    @volume_ref.setter
    def volume_ref(self, volume_ref):
        """
        Sets the volume_ref of this PersistentRegistration.
        The volume identifier.

        :param volume_ref: The volume_ref of this PersistentRegistration.
        :type: str
        """
        self._volume_ref = volume_ref

    @property
    def lun(self):
        """
        Gets the lun of this PersistentRegistration.
        LUN (mapped).

        :return: The lun of this PersistentRegistration.
        :rtype: int
        :required/optional: required
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """
        Sets the lun of this PersistentRegistration.
        LUN (mapped).

        :param lun: The lun of this PersistentRegistration.
        :type: int
        """
        self._lun = lun

    @property
    def cluster_ref(self):
        """
        Gets the cluster_ref of this PersistentRegistration.
        Group that volume is accessible by.

        :return: The cluster_ref of this PersistentRegistration.
        :rtype: str
        :required/optional: required
        """
        return self._cluster_ref

    @cluster_ref.setter
    def cluster_ref(self, cluster_ref):
        """
        Sets the cluster_ref of this PersistentRegistration.
        Group that volume is accessible by.

        :param cluster_ref: The cluster_ref of this PersistentRegistration.
        :type: str
        """
        self._cluster_ref = cluster_ref

    @property
    def host_ref(self):
        """
        Gets the host_ref of this PersistentRegistration.
        Host that volume is accessible by.

        :return: The host_ref of this PersistentRegistration.
        :rtype: str
        :required/optional: required
        """
        return self._host_ref

    @host_ref.setter
    def host_ref(self, host_ref):
        """
        Sets the host_ref of this PersistentRegistration.
        Host that volume is accessible by.

        :param host_ref: The host_ref of this PersistentRegistration.
        :type: str
        """
        self._host_ref = host_ref

    @property
    def reservation_type_id(self):
        """
        Gets the reservation_type_id of this PersistentRegistration.
        Reservation type.

        :return: The reservation_type_id of this PersistentRegistration.
        :rtype: str
        :required/optional: required
        """
        return self._reservation_type_id

    @reservation_type_id.setter
    def reservation_type_id(self, reservation_type_id):
        """
        Sets the reservation_type_id of this PersistentRegistration.
        Reservation type.

        :param reservation_type_id: The reservation_type_id of this PersistentRegistration.
        :type: str
        """
        allowed_values = ["noReservation", "writeExcl", "exclAccess", "writeExclRegOnly", "exclAccessRegOnly", "writeExclAllReg", "exclAccessAllReg", "__UNDEFINED"]
        if reservation_type_id not in allowed_values:
            raise ValueError(
                "Invalid value for `reservation_type_id`, must be one of {0}"
                .format(allowed_values)
            )
        self._reservation_type_id = reservation_type_id

    @property
    def registrant_list(self):
        """
        Gets the registrant_list of this PersistentRegistration.
        List of registrants.

        :return: The registrant_list of this PersistentRegistration.
        :rtype: RegistrantList
        :required/optional: required
        """
        return self._registrant_list

    @registrant_list.setter
    def registrant_list(self, registrant_list):
        """
        Sets the registrant_list of this PersistentRegistration.
        List of registrants.

        :param registrant_list: The registrant_list of this PersistentRegistration.
        :type: RegistrantList
        """
        self._registrant_list = registrant_list

    @property
    def ptpl_a(self):
        """
        Gets the ptpl_a of this PersistentRegistration.
        Persist through power loss active.

        :return: The ptpl_a of this PersistentRegistration.
        :rtype: bool
        :required/optional: required
        """
        return self._ptpl_a

    @ptpl_a.setter
    def ptpl_a(self, ptpl_a):
        """
        Sets the ptpl_a of this PersistentRegistration.
        Persist through power loss active.

        :param ptpl_a: The ptpl_a of this PersistentRegistration.
        :type: bool
        """
        self._ptpl_a = ptpl_a

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

