# coding: utf-8

"""
Initiator.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class Initiator(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Initiator - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'initiator_ref': 'str',  # (required parameter)
            'node_name': 'ScsiNodeName',  # (required parameter)
            'alias': 'ScsiAlias',  # (required parameter)
            'label': 'str',  # (required parameter)
            'configured_auth_methods': 'AuthenticationBundle',  # (required parameter)
            'host_ref': 'str',  # (required parameter)
            'initiator_inactive': 'bool',  # (required parameter)
            'id': 'str'
        }

        self.attribute_map = {
            'initiator_ref': 'initiatorRef',  # (required parameter)
            'node_name': 'nodeName',  # (required parameter)
            'alias': 'alias',  # (required parameter)
            'label': 'label',  # (required parameter)
            'configured_auth_methods': 'configuredAuthMethods',  # (required parameter)
            'host_ref': 'hostRef',  # (required parameter)
            'initiator_inactive': 'initiatorInactive',  # (required parameter)
            'id': 'id'
        }

        self._initiator_ref = None
        self._node_name = None
        self._alias = None
        self._label = None
        self._configured_auth_methods = None
        self._host_ref = None
        self._initiator_inactive = None
        self._id = None

    @property
    def initiator_ref(self):
        """
        Gets the initiator_ref of this Initiator.
        The reference that uniquely identifies an instance of this object.

        :return: The initiator_ref of this Initiator.
        :rtype: str
        :required/optional: required
        """
        return self._initiator_ref

    @initiator_ref.setter
    def initiator_ref(self, initiator_ref):
        """
        Sets the initiator_ref of this Initiator.
        The reference that uniquely identifies an instance of this object.

        :param initiator_ref: The initiator_ref of this Initiator.
        :type: str
        """
        self._initiator_ref = initiator_ref

    @property
    def node_name(self):
        """
        Gets the node_name of this Initiator.
        The unique node name associated with the initiator.

        :return: The node_name of this Initiator.
        :rtype: ScsiNodeName
        :required/optional: required
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """
        Sets the node_name of this Initiator.
        The unique node name associated with the initiator.

        :param node_name: The node_name of this Initiator.
        :type: ScsiNodeName
        """
        self._node_name = node_name

    @property
    def alias(self):
        """
        Gets the alias of this Initiator.
        An additional name that can be assigned to an initiator, which is usually \"friendlier\" than the node name.

        :return: The alias of this Initiator.
        :rtype: ScsiAlias
        :required/optional: required
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this Initiator.
        An additional name that can be assigned to an initiator, which is usually \"friendlier\" than the node name.

        :param alias: The alias of this Initiator.
        :type: ScsiAlias
        """
        self._alias = alias

    @property
    def label(self):
        """
        Gets the label of this Initiator.
        An additional \"friendly\" name that can be assigned to an initiator through the Storage Manager application.

        :return: The label of this Initiator.
        :rtype: str
        :required/optional: required
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Initiator.
        An additional \"friendly\" name that can be assigned to an initiator through the Storage Manager application.

        :param label: The label of this Initiator.
        :type: str
        """
        self._label = label

    @property
    def configured_auth_methods(self):
        """
        Gets the configured_auth_methods of this Initiator.
        The authentication methods that have been configured for the initiator. Associated secrets are not exposed. instead the type field of the EncryptedPassword is set to ENCRYPT_UNSPECIFIED.

        :return: The configured_auth_methods of this Initiator.
        :rtype: AuthenticationBundle
        :required/optional: required
        """
        return self._configured_auth_methods

    @configured_auth_methods.setter
    def configured_auth_methods(self, configured_auth_methods):
        """
        Sets the configured_auth_methods of this Initiator.
        The authentication methods that have been configured for the initiator. Associated secrets are not exposed. instead the type field of the EncryptedPassword is set to ENCRYPT_UNSPECIFIED.

        :param configured_auth_methods: The configured_auth_methods of this Initiator.
        :type: AuthenticationBundle
        """
        self._configured_auth_methods = configured_auth_methods

    @property
    def host_ref(self):
        """
        Gets the host_ref of this Initiator.
        A reference to the Host object to which the initiator belongs.

        :return: The host_ref of this Initiator.
        :rtype: str
        :required/optional: required
        """
        return self._host_ref

    @host_ref.setter
    def host_ref(self, host_ref):
        """
        Sets the host_ref of this Initiator.
        A reference to the Host object to which the initiator belongs.

        :param host_ref: The host_ref of this Initiator.
        :type: str
        """
        self._host_ref = host_ref

    @property
    def initiator_inactive(self):
        """
        Gets the initiator_inactive of this Initiator.
        The initiator is marked inactive.

        :return: The initiator_inactive of this Initiator.
        :rtype: bool
        :required/optional: required
        """
        return self._initiator_inactive

    @initiator_inactive.setter
    def initiator_inactive(self, initiator_inactive):
        """
        Sets the initiator_inactive of this Initiator.
        The initiator is marked inactive.

        :param initiator_inactive: The initiator_inactive of this Initiator.
        :type: bool
        """
        self._initiator_inactive = initiator_inactive

    @property
    def id(self):
        """
        Gets the id of this Initiator.


        :return: The id of this Initiator.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Initiator.


        :param id: The id of this Initiator.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

