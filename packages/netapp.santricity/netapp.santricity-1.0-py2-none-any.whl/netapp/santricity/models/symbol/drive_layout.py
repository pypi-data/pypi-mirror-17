# coding: utf-8

"""
DriveLayout.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DriveLayout(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DriveLayout - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'drive_orientation': 'str',  # (required parameter)
            'num_rows': 'int',  # (required parameter)
            'num_columns': 'int',  # (required parameter)
            'primary_traversal': 'str',  # (required parameter)
            'secondary_traversal': 'str'
        }

        self.attribute_map = {
            'drive_orientation': 'driveOrientation',  # (required parameter)
            'num_rows': 'numRows',  # (required parameter)
            'num_columns': 'numColumns',  # (required parameter)
            'primary_traversal': 'primaryTraversal',  # (required parameter)
            'secondary_traversal': 'secondaryTraversal'
        }

        self._drive_orientation = None
        self._num_rows = None
        self._num_columns = None
        self._primary_traversal = None
        self._secondary_traversal = None

    @property
    def drive_orientation(self):
        """
        Gets the drive_orientation of this DriveLayout.
        The drive orientation in the drawer or tray.

        :return: The drive_orientation of this DriveLayout.
        :rtype: str
        :required/optional: required
        """
        return self._drive_orientation

    @drive_orientation.setter
    def drive_orientation(self, drive_orientation):
        """
        Sets the drive_orientation of this DriveLayout.
        The drive orientation in the drawer or tray.

        :param drive_orientation: The drive_orientation of this DriveLayout.
        :type: str
        """
        allowed_values = ["none", "horizontal", "vertical", "__UNDEFINED"]
        if drive_orientation not in allowed_values:
            raise ValueError(
                "Invalid value for `drive_orientation`, must be one of {0}"
                .format(allowed_values)
            )
        self._drive_orientation = drive_orientation

    @property
    def num_rows(self):
        """
        Gets the num_rows of this DriveLayout.
        The number of rows in the drive layout. If driveOrientation field is set to \"None\", the value of this field should be zero.

        :return: The num_rows of this DriveLayout.
        :rtype: int
        :required/optional: required
        """
        return self._num_rows

    @num_rows.setter
    def num_rows(self, num_rows):
        """
        Sets the num_rows of this DriveLayout.
        The number of rows in the drive layout. If driveOrientation field is set to \"None\", the value of this field should be zero.

        :param num_rows: The num_rows of this DriveLayout.
        :type: int
        """
        self._num_rows = num_rows

    @property
    def num_columns(self):
        """
        Gets the num_columns of this DriveLayout.
        The number of columns in the drive layout. If driveOrientation field is set to \"None\", the value of this field should be zero.

        :return: The num_columns of this DriveLayout.
        :rtype: int
        :required/optional: required
        """
        return self._num_columns

    @num_columns.setter
    def num_columns(self, num_columns):
        """
        Sets the num_columns of this DriveLayout.
        The number of columns in the drive layout. If driveOrientation field is set to \"None\", the value of this field should be zero.

        :param num_columns: The num_columns of this DriveLayout.
        :type: int
        """
        self._num_columns = num_columns

    @property
    def primary_traversal(self):
        """
        Gets the primary_traversal of this DriveLayout.
        The primary traversal method for the drawer or tray. If driveOrientation field is set to \"None\", the value of this field should be TRAVERSAL_NONE

        :return: The primary_traversal of this DriveLayout.
        :rtype: str
        :required/optional: required
        """
        return self._primary_traversal

    @primary_traversal.setter
    def primary_traversal(self, primary_traversal):
        """
        Sets the primary_traversal of this DriveLayout.
        The primary traversal method for the drawer or tray. If driveOrientation field is set to \"None\", the value of this field should be TRAVERSAL_NONE

        :param primary_traversal: The primary_traversal of this DriveLayout.
        :type: str
        """
        allowed_values = ["none", "leftToRight", "rightToLeft", "topToBottom", "frontToBack", "__UNDEFINED"]
        if primary_traversal not in allowed_values:
            raise ValueError(
                "Invalid value for `primary_traversal`, must be one of {0}"
                .format(allowed_values)
            )
        self._primary_traversal = primary_traversal

    @property
    def secondary_traversal(self):
        """
        Gets the secondary_traversal of this DriveLayout.
        The secondary traversal method for the drawer or tray. If driveOrientation field is set to \"None\", the value of this field should be TRAVERSAL_NONE

        :return: The secondary_traversal of this DriveLayout.
        :rtype: str
        :required/optional: required
        """
        return self._secondary_traversal

    @secondary_traversal.setter
    def secondary_traversal(self, secondary_traversal):
        """
        Sets the secondary_traversal of this DriveLayout.
        The secondary traversal method for the drawer or tray. If driveOrientation field is set to \"None\", the value of this field should be TRAVERSAL_NONE

        :param secondary_traversal: The secondary_traversal of this DriveLayout.
        :type: str
        """
        allowed_values = ["none", "leftToRight", "rightToLeft", "topToBottom", "frontToBack", "__UNDEFINED"]
        if secondary_traversal not in allowed_values:
            raise ValueError(
                "Invalid value for `secondary_traversal`, must be one of {0}"
                .format(allowed_values)
            )
        self._secondary_traversal = secondary_traversal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

