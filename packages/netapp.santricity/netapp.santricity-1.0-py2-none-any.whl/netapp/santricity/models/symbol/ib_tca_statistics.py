# coding: utf-8

"""
IbTcaStatistics.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class IbTcaStatistics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IbTcaStatistics - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'host_board_ref': 'str',  # (required parameter)
            'maximum_qpairs_used_simultaneously': 'int',  # (required parameter)
            'minimum_qpairs_used_simultaneously': 'int',  # (required parameter)
            'average_qpairs_used_simultaneously': 'int',  # (required parameter)
            'maximum_depth_of_any_qpair': 'int',  # (required parameter)
            'minimum_depth_of_any_qpair': 'int',  # (required parameter)
            'average_depth_of_any_qpair': 'int'
        }

        self.attribute_map = {
            'host_board_ref': 'hostBoardRef',  # (required parameter)
            'maximum_qpairs_used_simultaneously': 'maximumQpairsUsedSimultaneously',  # (required parameter)
            'minimum_qpairs_used_simultaneously': 'minimumQpairsUsedSimultaneously',  # (required parameter)
            'average_qpairs_used_simultaneously': 'averageQpairsUsedSimultaneously',  # (required parameter)
            'maximum_depth_of_any_qpair': 'maximumDepthOfAnyQpair',  # (required parameter)
            'minimum_depth_of_any_qpair': 'minimumDepthOfAnyQpair',  # (required parameter)
            'average_depth_of_any_qpair': 'averageDepthOfAnyQpair'
        }

        self._host_board_ref = None
        self._maximum_qpairs_used_simultaneously = None
        self._minimum_qpairs_used_simultaneously = None
        self._average_qpairs_used_simultaneously = None
        self._maximum_depth_of_any_qpair = None
        self._minimum_depth_of_any_qpair = None
        self._average_depth_of_any_qpair = None

    @property
    def host_board_ref(self):
        """
        Gets the host_board_ref of this IbTcaStatistics.
        A reference to the host board for which the statistics apply.

        :return: The host_board_ref of this IbTcaStatistics.
        :rtype: str
        :required/optional: required
        """
        return self._host_board_ref

    @host_board_ref.setter
    def host_board_ref(self, host_board_ref):
        """
        Sets the host_board_ref of this IbTcaStatistics.
        A reference to the host board for which the statistics apply.

        :param host_board_ref: The host_board_ref of this IbTcaStatistics.
        :type: str
        """
        self._host_board_ref = host_board_ref

    @property
    def maximum_qpairs_used_simultaneously(self):
        """
        Gets the maximum_qpairs_used_simultaneously of this IbTcaStatistics.
        The maximum number of queue pairs that were in use simultaneously.

        :return: The maximum_qpairs_used_simultaneously of this IbTcaStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._maximum_qpairs_used_simultaneously

    @maximum_qpairs_used_simultaneously.setter
    def maximum_qpairs_used_simultaneously(self, maximum_qpairs_used_simultaneously):
        """
        Sets the maximum_qpairs_used_simultaneously of this IbTcaStatistics.
        The maximum number of queue pairs that were in use simultaneously.

        :param maximum_qpairs_used_simultaneously: The maximum_qpairs_used_simultaneously of this IbTcaStatistics.
        :type: int
        """
        self._maximum_qpairs_used_simultaneously = maximum_qpairs_used_simultaneously

    @property
    def minimum_qpairs_used_simultaneously(self):
        """
        Gets the minimum_qpairs_used_simultaneously of this IbTcaStatistics.
        The minimum number of queue pairs that were in use simultaneously.

        :return: The minimum_qpairs_used_simultaneously of this IbTcaStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._minimum_qpairs_used_simultaneously

    @minimum_qpairs_used_simultaneously.setter
    def minimum_qpairs_used_simultaneously(self, minimum_qpairs_used_simultaneously):
        """
        Sets the minimum_qpairs_used_simultaneously of this IbTcaStatistics.
        The minimum number of queue pairs that were in use simultaneously.

        :param minimum_qpairs_used_simultaneously: The minimum_qpairs_used_simultaneously of this IbTcaStatistics.
        :type: int
        """
        self._minimum_qpairs_used_simultaneously = minimum_qpairs_used_simultaneously

    @property
    def average_qpairs_used_simultaneously(self):
        """
        Gets the average_qpairs_used_simultaneously of this IbTcaStatistics.
        The average number of queue pairs that were in use simultaneously.

        :return: The average_qpairs_used_simultaneously of this IbTcaStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._average_qpairs_used_simultaneously

    @average_qpairs_used_simultaneously.setter
    def average_qpairs_used_simultaneously(self, average_qpairs_used_simultaneously):
        """
        Sets the average_qpairs_used_simultaneously of this IbTcaStatistics.
        The average number of queue pairs that were in use simultaneously.

        :param average_qpairs_used_simultaneously: The average_qpairs_used_simultaneously of this IbTcaStatistics.
        :type: int
        """
        self._average_qpairs_used_simultaneously = average_qpairs_used_simultaneously

    @property
    def maximum_depth_of_any_qpair(self):
        """
        Gets the maximum_depth_of_any_qpair of this IbTcaStatistics.
        The maximum depth attained by any queue pair of the TCA.

        :return: The maximum_depth_of_any_qpair of this IbTcaStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._maximum_depth_of_any_qpair

    @maximum_depth_of_any_qpair.setter
    def maximum_depth_of_any_qpair(self, maximum_depth_of_any_qpair):
        """
        Sets the maximum_depth_of_any_qpair of this IbTcaStatistics.
        The maximum depth attained by any queue pair of the TCA.

        :param maximum_depth_of_any_qpair: The maximum_depth_of_any_qpair of this IbTcaStatistics.
        :type: int
        """
        self._maximum_depth_of_any_qpair = maximum_depth_of_any_qpair

    @property
    def minimum_depth_of_any_qpair(self):
        """
        Gets the minimum_depth_of_any_qpair of this IbTcaStatistics.
        The minimum depth attained by any queue pair of the TCA.

        :return: The minimum_depth_of_any_qpair of this IbTcaStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._minimum_depth_of_any_qpair

    @minimum_depth_of_any_qpair.setter
    def minimum_depth_of_any_qpair(self, minimum_depth_of_any_qpair):
        """
        Sets the minimum_depth_of_any_qpair of this IbTcaStatistics.
        The minimum depth attained by any queue pair of the TCA.

        :param minimum_depth_of_any_qpair: The minimum_depth_of_any_qpair of this IbTcaStatistics.
        :type: int
        """
        self._minimum_depth_of_any_qpair = minimum_depth_of_any_qpair

    @property
    def average_depth_of_any_qpair(self):
        """
        Gets the average_depth_of_any_qpair of this IbTcaStatistics.
        The average depth attained across all queue pairs of the TCA.

        :return: The average_depth_of_any_qpair of this IbTcaStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._average_depth_of_any_qpair

    @average_depth_of_any_qpair.setter
    def average_depth_of_any_qpair(self, average_depth_of_any_qpair):
        """
        Sets the average_depth_of_any_qpair of this IbTcaStatistics.
        The average depth attained across all queue pairs of the TCA.

        :param average_depth_of_any_qpair: The average_depth_of_any_qpair of this IbTcaStatistics.
        :type: int
        """
        self._average_depth_of_any_qpair = average_depth_of_any_qpair

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

