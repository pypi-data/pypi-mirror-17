# coding: utf-8

"""
IOCDumpInfo.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class IOCDumpInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IOCDumpInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ioc_dump_tag': 'int',  # (required parameter)
            'capture_time': 'int',  # (required parameter)
            'channel': 'int',  # (required parameter)
            'capture_size': 'int',  # (required parameter)
            'fw_version': 'str',  # (required parameter)
            'ioc_dump_reason': 'str'
        }

        self.attribute_map = {
            'ioc_dump_tag': 'iocDumpTag',  # (required parameter)
            'capture_time': 'captureTime',  # (required parameter)
            'channel': 'channel',  # (required parameter)
            'capture_size': 'captureSize',  # (required parameter)
            'fw_version': 'fwVersion',  # (required parameter)
            'ioc_dump_reason': 'iocDumpReason'
        }

        self._ioc_dump_tag = None
        self._capture_time = None
        self._channel = None
        self._capture_size = None
        self._fw_version = None
        self._ioc_dump_reason = None

    @property
    def ioc_dump_tag(self):
        """
        Gets the ioc_dump_tag of this IOCDumpInfo.
        The IOC Dump Tag. Each IOC Dump has a unique tag value.

        :return: The ioc_dump_tag of this IOCDumpInfo.
        :rtype: int
        :required/optional: required
        """
        return self._ioc_dump_tag

    @ioc_dump_tag.setter
    def ioc_dump_tag(self, ioc_dump_tag):
        """
        Sets the ioc_dump_tag of this IOCDumpInfo.
        The IOC Dump Tag. Each IOC Dump has a unique tag value.

        :param ioc_dump_tag: The ioc_dump_tag of this IOCDumpInfo.
        :type: int
        """
        self._ioc_dump_tag = ioc_dump_tag

    @property
    def capture_time(self):
        """
        Gets the capture_time of this IOCDumpInfo.
        The time that the IOC Dump was captured measured in seconds since January 1, 1970.

        :return: The capture_time of this IOCDumpInfo.
        :rtype: int
        :required/optional: required
        """
        return self._capture_time

    @capture_time.setter
    def capture_time(self, capture_time):
        """
        Sets the capture_time of this IOCDumpInfo.
        The time that the IOC Dump was captured measured in seconds since January 1, 1970.

        :param capture_time: The capture_time of this IOCDumpInfo.
        :type: int
        """
        self._capture_time = capture_time

    @property
    def channel(self):
        """
        Gets the channel of this IOCDumpInfo.
        The channel number.

        :return: The channel of this IOCDumpInfo.
        :rtype: int
        :required/optional: required
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """
        Sets the channel of this IOCDumpInfo.
        The channel number.

        :param channel: The channel of this IOCDumpInfo.
        :type: int
        """
        self._channel = channel

    @property
    def capture_size(self):
        """
        Gets the capture_size of this IOCDumpInfo.
        The size of the IOC Dump in megabytes.

        :return: The capture_size of this IOCDumpInfo.
        :rtype: int
        :required/optional: required
        """
        return self._capture_size

    @capture_size.setter
    def capture_size(self, capture_size):
        """
        Sets the capture_size of this IOCDumpInfo.
        The size of the IOC Dump in megabytes.

        :param capture_size: The capture_size of this IOCDumpInfo.
        :type: int
        """
        self._capture_size = capture_size

    @property
    def fw_version(self):
        """
        Gets the fw_version of this IOCDumpInfo.
        The controller firmware version at the time the IOC Dump was captured.

        :return: The fw_version of this IOCDumpInfo.
        :rtype: str
        :required/optional: required
        """
        return self._fw_version

    @fw_version.setter
    def fw_version(self, fw_version):
        """
        Sets the fw_version of this IOCDumpInfo.
        The controller firmware version at the time the IOC Dump was captured.

        :param fw_version: The fw_version of this IOCDumpInfo.
        :type: str
        """
        self._fw_version = fw_version

    @property
    def ioc_dump_reason(self):
        """
        Gets the ioc_dump_reason of this IOCDumpInfo.
        The reason for the IOC Dump.

        :return: The ioc_dump_reason of this IOCDumpInfo.
        :rtype: str
        :required/optional: required
        """
        return self._ioc_dump_reason

    @ioc_dump_reason.setter
    def ioc_dump_reason(self, ioc_dump_reason):
        """
        Sets the ioc_dump_reason of this IOCDumpInfo.
        The reason for the IOC Dump.

        :param ioc_dump_reason: The ioc_dump_reason of this IOCDumpInfo.
        :type: str
        """
        allowed_values = ["unknown", "userInitiated", "reboot", "other", "__UNDEFINED"]
        if ioc_dump_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `ioc_dump_reason`, must be one of {0}"
                .format(allowed_values)
            )
        self._ioc_dump_reason = ioc_dump_reason

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

