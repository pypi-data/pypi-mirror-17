# coding: utf-8

"""
ChannelDiagWrRdVfyResults.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class ChannelDiagWrRdVfyResults(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ChannelDiagWrRdVfyResults - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device': 'ChannelDiagDevice',  # (required parameter)
            'status': 'str',  # (required parameter)
            'actual_time_interval': 'int',  # (required parameter)
            'iterations_attempted': 'int',  # (required parameter)
            'channel_resets_detected': 'int',  # (required parameter)
            'iterations_passed': 'int',  # (required parameter)
            'iterations_failed_with_miscompares': 'int',  # (required parameter)
            'iterations_failed_with_setup_errors': 'int',  # (required parameter)
            'iterations_failed_with_outbound_timeouts': 'int',  # (required parameter)
            'iterations_failed_with_outbound_resets': 'int',  # (required parameter)
            'iterations_failed_with_outbound_misc_errors': 'int',  # (required parameter)
            'iterations_failed_with_inbound_timeouts': 'int',  # (required parameter)
            'iterations_failed_with_inbound_resets': 'int',  # (required parameter)
            'iterations_failed_with_inbound_misc_errors': 'int',  # (required parameter)
            'average_elapsed_time_for_outbound_phases': 'int',  # (required parameter)
            'variance_in_elapsed_time_for_outbound_phases': 'int',  # (required parameter)
            'average_elapsed_time_for_inbound_phases': 'int',  # (required parameter)
            'variance_in_elapsed_time_for_inbound_phases': 'int',  # (required parameter)
            'interface_dependent_results': 'ChannelDiagInterfaceDepResults',  # (required parameter)
            'drive_channel': 'int'
        }

        self.attribute_map = {
            'device': 'device',  # (required parameter)
            'status': 'status',  # (required parameter)
            'actual_time_interval': 'actualTimeInterval',  # (required parameter)
            'iterations_attempted': 'iterationsAttempted',  # (required parameter)
            'channel_resets_detected': 'channelResetsDetected',  # (required parameter)
            'iterations_passed': 'iterationsPassed',  # (required parameter)
            'iterations_failed_with_miscompares': 'iterationsFailedWithMiscompares',  # (required parameter)
            'iterations_failed_with_setup_errors': 'iterationsFailedWithSetupErrors',  # (required parameter)
            'iterations_failed_with_outbound_timeouts': 'iterationsFailedWithOutboundTimeouts',  # (required parameter)
            'iterations_failed_with_outbound_resets': 'iterationsFailedWithOutboundResets',  # (required parameter)
            'iterations_failed_with_outbound_misc_errors': 'iterationsFailedWithOutboundMiscErrors',  # (required parameter)
            'iterations_failed_with_inbound_timeouts': 'iterationsFailedWithInboundTimeouts',  # (required parameter)
            'iterations_failed_with_inbound_resets': 'iterationsFailedWithInboundResets',  # (required parameter)
            'iterations_failed_with_inbound_misc_errors': 'iterationsFailedWithInboundMiscErrors',  # (required parameter)
            'average_elapsed_time_for_outbound_phases': 'averageElapsedTimeForOutboundPhases',  # (required parameter)
            'variance_in_elapsed_time_for_outbound_phases': 'varianceInElapsedTimeForOutboundPhases',  # (required parameter)
            'average_elapsed_time_for_inbound_phases': 'averageElapsedTimeForInboundPhases',  # (required parameter)
            'variance_in_elapsed_time_for_inbound_phases': 'varianceInElapsedTimeForInboundPhases',  # (required parameter)
            'interface_dependent_results': 'interfaceDependentResults',  # (required parameter)
            'drive_channel': 'driveChannel'
        }

        self._device = None
        self._status = None
        self._actual_time_interval = None
        self._iterations_attempted = None
        self._channel_resets_detected = None
        self._iterations_passed = None
        self._iterations_failed_with_miscompares = None
        self._iterations_failed_with_setup_errors = None
        self._iterations_failed_with_outbound_timeouts = None
        self._iterations_failed_with_outbound_resets = None
        self._iterations_failed_with_outbound_misc_errors = None
        self._iterations_failed_with_inbound_timeouts = None
        self._iterations_failed_with_inbound_resets = None
        self._iterations_failed_with_inbound_misc_errors = None
        self._average_elapsed_time_for_outbound_phases = None
        self._variance_in_elapsed_time_for_outbound_phases = None
        self._average_elapsed_time_for_inbound_phases = None
        self._variance_in_elapsed_time_for_inbound_phases = None
        self._interface_dependent_results = None
        self._drive_channel = None

    @property
    def device(self):
        """
        Gets the device of this ChannelDiagWrRdVfyResults.
        The device on which the channel diagnostic test was performed

        :return: The device of this ChannelDiagWrRdVfyResults.
        :rtype: ChannelDiagDevice
        :required/optional: required
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this ChannelDiagWrRdVfyResults.
        The device on which the channel diagnostic test was performed

        :param device: The device of this ChannelDiagWrRdVfyResults.
        :type: ChannelDiagDevice
        """
        self._device = device

    @property
    def status(self):
        """
        Gets the status of this ChannelDiagWrRdVfyResults.
        A status code providing general information about the outcome of the diagnostic test.

        :return: The status of this ChannelDiagWrRdVfyResults.
        :rtype: str
        :required/optional: required
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ChannelDiagWrRdVfyResults.
        A status code providing general information about the outcome of the diagnostic test.

        :param status: The status of this ChannelDiagWrRdVfyResults.
        :type: str
        """
        allowed_values = ["complete", "incomplete", "cancelled", "timeExpired", "notStarted", "__UNDEFINED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def actual_time_interval(self):
        """
        Gets the actual_time_interval of this ChannelDiagWrRdVfyResults.
        The number of seconds the diagnostic test actually ran.

        :return: The actual_time_interval of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._actual_time_interval

    @actual_time_interval.setter
    def actual_time_interval(self, actual_time_interval):
        """
        Sets the actual_time_interval of this ChannelDiagWrRdVfyResults.
        The number of seconds the diagnostic test actually ran.

        :param actual_time_interval: The actual_time_interval of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._actual_time_interval = actual_time_interval

    @property
    def iterations_attempted(self):
        """
        Gets the iterations_attempted of this ChannelDiagWrRdVfyResults.
        The total number of iterations attempted

        :return: The iterations_attempted of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._iterations_attempted

    @iterations_attempted.setter
    def iterations_attempted(self, iterations_attempted):
        """
        Sets the iterations_attempted of this ChannelDiagWrRdVfyResults.
        The total number of iterations attempted

        :param iterations_attempted: The iterations_attempted of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._iterations_attempted = iterations_attempted

    @property
    def channel_resets_detected(self):
        """
        Gets the channel_resets_detected of this ChannelDiagWrRdVfyResults.
        The device on which the tests were performed.

        :return: The channel_resets_detected of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._channel_resets_detected

    @channel_resets_detected.setter
    def channel_resets_detected(self, channel_resets_detected):
        """
        Sets the channel_resets_detected of this ChannelDiagWrRdVfyResults.
        The device on which the tests were performed.

        :param channel_resets_detected: The channel_resets_detected of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._channel_resets_detected = channel_resets_detected

    @property
    def iterations_passed(self):
        """
        Gets the iterations_passed of this ChannelDiagWrRdVfyResults.
        The number of iterations that completed successfully/

        :return: The iterations_passed of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._iterations_passed

    @iterations_passed.setter
    def iterations_passed(self, iterations_passed):
        """
        Sets the iterations_passed of this ChannelDiagWrRdVfyResults.
        The number of iterations that completed successfully/

        :param iterations_passed: The iterations_passed of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._iterations_passed = iterations_passed

    @property
    def iterations_failed_with_miscompares(self):
        """
        Gets the iterations_failed_with_miscompares of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to data miscompares.

        :return: The iterations_failed_with_miscompares of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._iterations_failed_with_miscompares

    @iterations_failed_with_miscompares.setter
    def iterations_failed_with_miscompares(self, iterations_failed_with_miscompares):
        """
        Sets the iterations_failed_with_miscompares of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to data miscompares.

        :param iterations_failed_with_miscompares: The iterations_failed_with_miscompares of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._iterations_failed_with_miscompares = iterations_failed_with_miscompares

    @property
    def iterations_failed_with_setup_errors(self):
        """
        Gets the iterations_failed_with_setup_errors of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to setup errors prior to starting the iteration.

        :return: The iterations_failed_with_setup_errors of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._iterations_failed_with_setup_errors

    @iterations_failed_with_setup_errors.setter
    def iterations_failed_with_setup_errors(self, iterations_failed_with_setup_errors):
        """
        Sets the iterations_failed_with_setup_errors of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to setup errors prior to starting the iteration.

        :param iterations_failed_with_setup_errors: The iterations_failed_with_setup_errors of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._iterations_failed_with_setup_errors = iterations_failed_with_setup_errors

    @property
    def iterations_failed_with_outbound_timeouts(self):
        """
        Gets the iterations_failed_with_outbound_timeouts of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due I/O timeouts on outbound-data commands.

        :return: The iterations_failed_with_outbound_timeouts of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._iterations_failed_with_outbound_timeouts

    @iterations_failed_with_outbound_timeouts.setter
    def iterations_failed_with_outbound_timeouts(self, iterations_failed_with_outbound_timeouts):
        """
        Sets the iterations_failed_with_outbound_timeouts of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due I/O timeouts on outbound-data commands.

        :param iterations_failed_with_outbound_timeouts: The iterations_failed_with_outbound_timeouts of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._iterations_failed_with_outbound_timeouts = iterations_failed_with_outbound_timeouts

    @property
    def iterations_failed_with_outbound_resets(self):
        """
        Gets the iterations_failed_with_outbound_resets of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to channel-level resets that occurred during outbound-data commands.

        :return: The iterations_failed_with_outbound_resets of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._iterations_failed_with_outbound_resets

    @iterations_failed_with_outbound_resets.setter
    def iterations_failed_with_outbound_resets(self, iterations_failed_with_outbound_resets):
        """
        Sets the iterations_failed_with_outbound_resets of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to channel-level resets that occurred during outbound-data commands.

        :param iterations_failed_with_outbound_resets: The iterations_failed_with_outbound_resets of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._iterations_failed_with_outbound_resets = iterations_failed_with_outbound_resets

    @property
    def iterations_failed_with_outbound_misc_errors(self):
        """
        Gets the iterations_failed_with_outbound_misc_errors of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to other command failures (e.g., check conditions, aborted commands, channel-level resets, etc.) on outbound data commands.

        :return: The iterations_failed_with_outbound_misc_errors of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._iterations_failed_with_outbound_misc_errors

    @iterations_failed_with_outbound_misc_errors.setter
    def iterations_failed_with_outbound_misc_errors(self, iterations_failed_with_outbound_misc_errors):
        """
        Sets the iterations_failed_with_outbound_misc_errors of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to other command failures (e.g., check conditions, aborted commands, channel-level resets, etc.) on outbound data commands.

        :param iterations_failed_with_outbound_misc_errors: The iterations_failed_with_outbound_misc_errors of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._iterations_failed_with_outbound_misc_errors = iterations_failed_with_outbound_misc_errors

    @property
    def iterations_failed_with_inbound_timeouts(self):
        """
        Gets the iterations_failed_with_inbound_timeouts of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due I/O timeouts on inbound-data commands.

        :return: The iterations_failed_with_inbound_timeouts of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._iterations_failed_with_inbound_timeouts

    @iterations_failed_with_inbound_timeouts.setter
    def iterations_failed_with_inbound_timeouts(self, iterations_failed_with_inbound_timeouts):
        """
        Sets the iterations_failed_with_inbound_timeouts of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due I/O timeouts on inbound-data commands.

        :param iterations_failed_with_inbound_timeouts: The iterations_failed_with_inbound_timeouts of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._iterations_failed_with_inbound_timeouts = iterations_failed_with_inbound_timeouts

    @property
    def iterations_failed_with_inbound_resets(self):
        """
        Gets the iterations_failed_with_inbound_resets of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to channel-level resets that occurred during inbound-data commands.

        :return: The iterations_failed_with_inbound_resets of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._iterations_failed_with_inbound_resets

    @iterations_failed_with_inbound_resets.setter
    def iterations_failed_with_inbound_resets(self, iterations_failed_with_inbound_resets):
        """
        Sets the iterations_failed_with_inbound_resets of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to channel-level resets that occurred during inbound-data commands.

        :param iterations_failed_with_inbound_resets: The iterations_failed_with_inbound_resets of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._iterations_failed_with_inbound_resets = iterations_failed_with_inbound_resets

    @property
    def iterations_failed_with_inbound_misc_errors(self):
        """
        Gets the iterations_failed_with_inbound_misc_errors of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to other command failures (e.g., check conditions, aborted commands, channel-level resets, etc.) on inbound-data commands.

        :return: The iterations_failed_with_inbound_misc_errors of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._iterations_failed_with_inbound_misc_errors

    @iterations_failed_with_inbound_misc_errors.setter
    def iterations_failed_with_inbound_misc_errors(self, iterations_failed_with_inbound_misc_errors):
        """
        Sets the iterations_failed_with_inbound_misc_errors of this ChannelDiagWrRdVfyResults.
        The number of iterations that failed due to other command failures (e.g., check conditions, aborted commands, channel-level resets, etc.) on inbound-data commands.

        :param iterations_failed_with_inbound_misc_errors: The iterations_failed_with_inbound_misc_errors of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._iterations_failed_with_inbound_misc_errors = iterations_failed_with_inbound_misc_errors

    @property
    def average_elapsed_time_for_outbound_phases(self):
        """
        Gets the average_elapsed_time_for_outbound_phases of this ChannelDiagWrRdVfyResults.
        The average elapsed command-processing time, in microseconds) for the outbound-data phases of all successful iterations.

        :return: The average_elapsed_time_for_outbound_phases of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._average_elapsed_time_for_outbound_phases

    @average_elapsed_time_for_outbound_phases.setter
    def average_elapsed_time_for_outbound_phases(self, average_elapsed_time_for_outbound_phases):
        """
        Sets the average_elapsed_time_for_outbound_phases of this ChannelDiagWrRdVfyResults.
        The average elapsed command-processing time, in microseconds) for the outbound-data phases of all successful iterations.

        :param average_elapsed_time_for_outbound_phases: The average_elapsed_time_for_outbound_phases of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._average_elapsed_time_for_outbound_phases = average_elapsed_time_for_outbound_phases

    @property
    def variance_in_elapsed_time_for_outbound_phases(self):
        """
        Gets the variance_in_elapsed_time_for_outbound_phases of this ChannelDiagWrRdVfyResults.
        The statistical variance of the elapsed command-processing time for the outbound-data phases of all successful variations.

        :return: The variance_in_elapsed_time_for_outbound_phases of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._variance_in_elapsed_time_for_outbound_phases

    @variance_in_elapsed_time_for_outbound_phases.setter
    def variance_in_elapsed_time_for_outbound_phases(self, variance_in_elapsed_time_for_outbound_phases):
        """
        Sets the variance_in_elapsed_time_for_outbound_phases of this ChannelDiagWrRdVfyResults.
        The statistical variance of the elapsed command-processing time for the outbound-data phases of all successful variations.

        :param variance_in_elapsed_time_for_outbound_phases: The variance_in_elapsed_time_for_outbound_phases of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._variance_in_elapsed_time_for_outbound_phases = variance_in_elapsed_time_for_outbound_phases

    @property
    def average_elapsed_time_for_inbound_phases(self):
        """
        Gets the average_elapsed_time_for_inbound_phases of this ChannelDiagWrRdVfyResults.
        The average elapsed command-processing time, in microseconds) for the inbound-data phases of all successful iterations.

        :return: The average_elapsed_time_for_inbound_phases of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._average_elapsed_time_for_inbound_phases

    @average_elapsed_time_for_inbound_phases.setter
    def average_elapsed_time_for_inbound_phases(self, average_elapsed_time_for_inbound_phases):
        """
        Sets the average_elapsed_time_for_inbound_phases of this ChannelDiagWrRdVfyResults.
        The average elapsed command-processing time, in microseconds) for the inbound-data phases of all successful iterations.

        :param average_elapsed_time_for_inbound_phases: The average_elapsed_time_for_inbound_phases of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._average_elapsed_time_for_inbound_phases = average_elapsed_time_for_inbound_phases

    @property
    def variance_in_elapsed_time_for_inbound_phases(self):
        """
        Gets the variance_in_elapsed_time_for_inbound_phases of this ChannelDiagWrRdVfyResults.
        The statistical variance of the elapsed command-processing time for the inbound-data phases of all successful variations.

        :return: The variance_in_elapsed_time_for_inbound_phases of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._variance_in_elapsed_time_for_inbound_phases

    @variance_in_elapsed_time_for_inbound_phases.setter
    def variance_in_elapsed_time_for_inbound_phases(self, variance_in_elapsed_time_for_inbound_phases):
        """
        Sets the variance_in_elapsed_time_for_inbound_phases of this ChannelDiagWrRdVfyResults.
        The statistical variance of the elapsed command-processing time for the inbound-data phases of all successful variations.

        :param variance_in_elapsed_time_for_inbound_phases: The variance_in_elapsed_time_for_inbound_phases of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._variance_in_elapsed_time_for_inbound_phases = variance_in_elapsed_time_for_inbound_phases

    @property
    def interface_dependent_results(self):
        """
        Gets the interface_dependent_results of this ChannelDiagWrRdVfyResults.
        A set of channel diagnostic test results that depend on the particular I/O interface technology of the tested channel.

        :return: The interface_dependent_results of this ChannelDiagWrRdVfyResults.
        :rtype: ChannelDiagInterfaceDepResults
        :required/optional: required
        """
        return self._interface_dependent_results

    @interface_dependent_results.setter
    def interface_dependent_results(self, interface_dependent_results):
        """
        Sets the interface_dependent_results of this ChannelDiagWrRdVfyResults.
        A set of channel diagnostic test results that depend on the particular I/O interface technology of the tested channel.

        :param interface_dependent_results: The interface_dependent_results of this ChannelDiagWrRdVfyResults.
        :type: ChannelDiagInterfaceDepResults
        """
        self._interface_dependent_results = interface_dependent_results

    @property
    def drive_channel(self):
        """
        Gets the drive_channel of this ChannelDiagWrRdVfyResults.
        The number of the drive channel on which testing was performed.

        :return: The drive_channel of this ChannelDiagWrRdVfyResults.
        :rtype: int
        :required/optional: required
        """
        return self._drive_channel

    @drive_channel.setter
    def drive_channel(self, drive_channel):
        """
        Sets the drive_channel of this ChannelDiagWrRdVfyResults.
        The number of the drive channel on which testing was performed.

        :param drive_channel: The drive_channel of this ChannelDiagWrRdVfyResults.
        :type: int
        """
        self._drive_channel = drive_channel

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

