# coding: utf-8

"""
Gbic.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class Gbic(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Gbic - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'gbic_ref': 'str',  # (required parameter)
            'status': 'str',  # (required parameter)
            'physical_location': 'Location',  # (required parameter)
            'gbic_type': 'str',  # (required parameter)
            'gbic_port': 'str',  # (required parameter)
            'parent_data': 'GBICParentTypeData',  # (required parameter)
            'reserved1': 'str',  
            'reserved2': 'str'
        }

        self.attribute_map = {
            'gbic_ref': 'gbicRef',  # (required parameter)
            'status': 'status',  # (required parameter)
            'physical_location': 'physicalLocation',  # (required parameter)
            'gbic_type': 'gbicType',  # (required parameter)
            'gbic_port': 'gbicPort',  # (required parameter)
            'parent_data': 'parentData',  # (required parameter)
            'reserved1': 'reserved1',  
            'reserved2': 'reserved2'
        }

        self._gbic_ref = None
        self._status = None
        self._physical_location = None
        self._gbic_type = None
        self._gbic_port = None
        self._parent_data = None
        self._reserved1 = None
        self._reserved2 = None

    @property
    def gbic_ref(self):
        """
        Gets the gbic_ref of this Gbic.
        The reference for this physical GBIC.

        :return: The gbic_ref of this Gbic.
        :rtype: str
        :required/optional: required
        """
        return self._gbic_ref

    @gbic_ref.setter
    def gbic_ref(self, gbic_ref):
        """
        Sets the gbic_ref of this Gbic.
        The reference for this physical GBIC.

        :param gbic_ref: The gbic_ref of this Gbic.
        :type: str
        """
        self._gbic_ref = gbic_ref

    @property
    def status(self):
        """
        Gets the status of this Gbic.
        The operational status of the GBIC.

        :return: The status of this Gbic.
        :rtype: str
        :required/optional: required
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Gbic.
        The operational status of the GBIC.

        :param status: The status of this Gbic.
        :type: str
        """
        allowed_values = ["optimal", "failed", "removed", "unknown", "__UNDEFINED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def physical_location(self):
        """
        Gets the physical_location of this Gbic.
        The physical location of the GBIC. Note that the tray reference identifies the enclosure containing the GBIC, but the slot information does not apply to this component.

        :return: The physical_location of this Gbic.
        :rtype: Location
        :required/optional: required
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """
        Sets the physical_location of this Gbic.
        The physical location of the GBIC. Note that the tray reference identifies the enclosure containing the GBIC, but the slot information does not apply to this component.

        :param physical_location: The physical_location of this Gbic.
        :type: Location
        """
        self._physical_location = physical_location

    @property
    def gbic_type(self):
        """
        Gets the gbic_type of this Gbic.
        This field is the discriminator value, which identifies the type of GBIC.

        :return: The gbic_type of this Gbic.
        :rtype: str
        :required/optional: required
        """
        return self._gbic_type

    @gbic_type.setter
    def gbic_type(self, gbic_type):
        """
        Sets the gbic_type of this Gbic.
        This field is the discriminator value, which identifies the type of GBIC.

        :param gbic_type: The gbic_type of this Gbic.
        :type: str
        """
        allowed_values = ["notPresent", "cs12Active", "cs12Passive", "opticalLw", "serialModule", "opticalSw", "opticalLwLxSingleMode", "opticalSwSx", "__UNDEFINED"]
        if gbic_type not in allowed_values:
            raise ValueError(
                "Invalid value for `gbic_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._gbic_type = gbic_type

    @property
    def gbic_port(self):
        """
        Gets the gbic_port of this Gbic.
        This field provides information about the port that the GBIC is associated with.

        :return: The gbic_port of this Gbic.
        :rtype: str
        :required/optional: required
        """
        return self._gbic_port

    @gbic_port.setter
    def gbic_port(self, gbic_port):
        """
        Sets the gbic_port of this Gbic.
        This field provides information about the port that the GBIC is associated with.

        :param gbic_port: The gbic_port of this Gbic.
        :type: str
        """
        allowed_values = ["port1", "port2", "__UNDEFINED"]
        if gbic_port not in allowed_values:
            raise ValueError(
                "Invalid value for `gbic_port`, must be one of {0}"
                .format(allowed_values)
            )
        self._gbic_port = gbic_port

    @property
    def parent_data(self):
        """
        Gets the parent_data of this Gbic.
        Information returned is based on the type of the GBIC parent. The data returned describes the component or controller that is associated with the GBIC.

        :return: The parent_data of this Gbic.
        :rtype: GBICParentTypeData
        :required/optional: required
        """
        return self._parent_data

    @parent_data.setter
    def parent_data(self, parent_data):
        """
        Sets the parent_data of this Gbic.
        Information returned is based on the type of the GBIC parent. The data returned describes the component or controller that is associated with the GBIC.

        :param parent_data: The parent_data of this Gbic.
        :type: GBICParentTypeData
        """
        self._parent_data = parent_data

    @property
    def reserved1(self):
        """
        Gets the reserved1 of this Gbic.


        :return: The reserved1 of this Gbic.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved1

    @reserved1.setter
    def reserved1(self, reserved1):
        """
        Sets the reserved1 of this Gbic.


        :param reserved1: The reserved1 of this Gbic.
        :type: str
        """
        self._reserved1 = reserved1

    @property
    def reserved2(self):
        """
        Gets the reserved2 of this Gbic.


        :return: The reserved2 of this Gbic.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved2

    @reserved2.setter
    def reserved2(self, reserved2):
        """
        Sets the reserved2 of this Gbic.


        :param reserved2: The reserved2 of this Gbic.
        :type: str
        """
        self._reserved2 = reserved2

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

