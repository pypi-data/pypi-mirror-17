# coding: utf-8

"""
UnmatchedPendingHost.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class UnmatchedPendingHost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UnmatchedPendingHost - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'pending_host': 'PendingHost',  # (required parameter)
            'unconfigured_ports': 'list[SCSIInitiatorPortId]',  # (required parameter)
            'conflicting_ports': 'list[str]',  # (required parameter)
            'conflicting_initiators': 'list[str]'
        }

        self.attribute_map = {
            'pending_host': 'pendingHost',  # (required parameter)
            'unconfigured_ports': 'unconfiguredPorts',  # (required parameter)
            'conflicting_ports': 'conflictingPorts',  # (required parameter)
            'conflicting_initiators': 'conflictingInitiators'
        }

        self._pending_host = None
        self._unconfigured_ports = None
        self._conflicting_ports = None
        self._conflicting_initiators = None

    @property
    def pending_host(self):
        """
        Gets the pending_host of this UnmatchedPendingHost.
        A description of the pending host as it was submitted by the host context agent.

        :return: The pending_host of this UnmatchedPendingHost.
        :rtype: PendingHost
        :required/optional: required
        """
        return self._pending_host

    @pending_host.setter
    def pending_host(self, pending_host):
        """
        Sets the pending_host of this UnmatchedPendingHost.
        A description of the pending host as it was submitted by the host context agent.

        :param pending_host: The pending_host of this UnmatchedPendingHost.
        :type: PendingHost
        """
        self._pending_host = pending_host

    @property
    def unconfigured_ports(self):
        """
        Gets the unconfigured_ports of this UnmatchedPendingHost.
        yet been created in the configured topology

        :return: The unconfigured_ports of this UnmatchedPendingHost.
        :rtype: list[SCSIInitiatorPortId]
        :required/optional: required
        """
        return self._unconfigured_ports

    @unconfigured_ports.setter
    def unconfigured_ports(self, unconfigured_ports):
        """
        Sets the unconfigured_ports of this UnmatchedPendingHost.
        yet been created in the configured topology

        :param unconfigured_ports: The unconfigured_ports of this UnmatchedPendingHost.
        :type: list[SCSIInitiatorPortId]
        """
        self._unconfigured_ports = unconfigured_ports

    @property
    def conflicting_ports(self):
        """
        Gets the conflicting_ports of this UnmatchedPendingHost.
        A list of HostPortRef structures representing ports belonging to the pending host that conflict with ports in the configured topology. The definition of a conflict for an unmatched pending host is any port belonging to the pending host that matches a port in the configured topology.

        :return: The conflicting_ports of this UnmatchedPendingHost.
        :rtype: list[str]
        :required/optional: required
        """
        return self._conflicting_ports

    @conflicting_ports.setter
    def conflicting_ports(self, conflicting_ports):
        """
        Sets the conflicting_ports of this UnmatchedPendingHost.
        A list of HostPortRef structures representing ports belonging to the pending host that conflict with ports in the configured topology. The definition of a conflict for an unmatched pending host is any port belonging to the pending host that matches a port in the configured topology.

        :param conflicting_ports: The conflicting_ports of this UnmatchedPendingHost.
        :type: list[str]
        """
        self._conflicting_ports = conflicting_ports

    @property
    def conflicting_initiators(self):
        """
        Gets the conflicting_initiators of this UnmatchedPendingHost.
        A list of ScsiNodeRef elements representing initiators belonging to the pending host that conflict with initiators in the configured topology. The definition of an initiator conflict for an unmatched pending host is any initiator belonging to the pending host that matches an initiator in the configured topology.

        :return: The conflicting_initiators of this UnmatchedPendingHost.
        :rtype: list[str]
        :required/optional: required
        """
        return self._conflicting_initiators

    @conflicting_initiators.setter
    def conflicting_initiators(self, conflicting_initiators):
        """
        Sets the conflicting_initiators of this UnmatchedPendingHost.
        A list of ScsiNodeRef elements representing initiators belonging to the pending host that conflict with initiators in the configured topology. The definition of an initiator conflict for an unmatched pending host is any initiator belonging to the pending host that matches an initiator in the configured topology.

        :param conflicting_initiators: The conflicting_initiators of this UnmatchedPendingHost.
        :type: list[str]
        """
        self._conflicting_initiators = conflicting_initiators

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

