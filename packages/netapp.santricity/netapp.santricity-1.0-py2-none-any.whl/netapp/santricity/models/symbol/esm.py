# coding: utf-8

"""
Esm.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class Esm(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Esm - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'esm_ref': 'str',  # (required parameter)
            'status': 'str',  # (required parameter)
            'physical_location': 'Location',  # (required parameter)
            'non_redundant_access': 'bool',  # (required parameter)
            'part_number': 'str',  # (required parameter)
            'serial_number': 'str',  # (required parameter)
            'manufacturer_date': 'int',  # (required parameter)
            'manufacturer': 'str',  # (required parameter)
            'fru_type': 'str',  # (required parameter)
            'software_version': 'str',  # (required parameter)
            'esm_interface_data': 'ESMInterfaceTypeData',  # (required parameter)
            'product_id': 'str',  # (required parameter)
            'working_channel': 'int',  # (required parameter)
            'current_speed': 'str',  # (required parameter)
            'max_speed': 'str',  # (required parameter)
            'reserved1': 'str',  
            'reserved2': 'str',  
            'fibre_esm': 'FibreESMAddress',  # (required parameter)
            'rtr_attributes': 'RTRAttributes',  # (required parameter)
            'esm_interface_attributes': 'EsmInterfaceAttributes',  # (required parameter)
            'board_id': 'str',  # (required parameter)
            'factory_defaults_data': 'EsmFactoryDefaultsVersionData',  # (required parameter)
            'repair_policy': 'RepairPolicy',  # (required parameter)
            'is_trunk_capable': 'bool',  # (required parameter)
            'trunk_miswire': 'bool',  # (required parameter)
            'locate_in_progress': 'bool',  # (required parameter)
            'has_tray_identity_indicator': 'bool',  # (required parameter)
            'esm_type': 'str',  # (required parameter)
            'id': 'str'
        }

        self.attribute_map = {
            'esm_ref': 'esmRef',  # (required parameter)
            'status': 'status',  # (required parameter)
            'physical_location': 'physicalLocation',  # (required parameter)
            'non_redundant_access': 'nonRedundantAccess',  # (required parameter)
            'part_number': 'partNumber',  # (required parameter)
            'serial_number': 'serialNumber',  # (required parameter)
            'manufacturer_date': 'manufacturerDate',  # (required parameter)
            'manufacturer': 'manufacturer',  # (required parameter)
            'fru_type': 'fruType',  # (required parameter)
            'software_version': 'softwareVersion',  # (required parameter)
            'esm_interface_data': 'esmInterfaceData',  # (required parameter)
            'product_id': 'productID',  # (required parameter)
            'working_channel': 'workingChannel',  # (required parameter)
            'current_speed': 'currentSpeed',  # (required parameter)
            'max_speed': 'maxSpeed',  # (required parameter)
            'reserved1': 'reserved1',  
            'reserved2': 'reserved2',  
            'fibre_esm': 'fibreEsm',  # (required parameter)
            'rtr_attributes': 'rtrAttributes',  # (required parameter)
            'esm_interface_attributes': 'esmInterfaceAttributes',  # (required parameter)
            'board_id': 'boardId',  # (required parameter)
            'factory_defaults_data': 'factoryDefaultsData',  # (required parameter)
            'repair_policy': 'repairPolicy',  # (required parameter)
            'is_trunk_capable': 'isTrunkCapable',  # (required parameter)
            'trunk_miswire': 'trunkMiswire',  # (required parameter)
            'locate_in_progress': 'locateInProgress',  # (required parameter)
            'has_tray_identity_indicator': 'hasTrayIdentityIndicator',  # (required parameter)
            'esm_type': 'esmType',  # (required parameter)
            'id': 'id'
        }

        self._esm_ref = None
        self._status = None
        self._physical_location = None
        self._non_redundant_access = None
        self._part_number = None
        self._serial_number = None
        self._manufacturer_date = None
        self._manufacturer = None
        self._fru_type = None
        self._software_version = None
        self._esm_interface_data = None
        self._product_id = None
        self._working_channel = None
        self._current_speed = None
        self._max_speed = None
        self._reserved1 = None
        self._reserved2 = None
        self._fibre_esm = None
        self._rtr_attributes = None
        self._esm_interface_attributes = None
        self._board_id = None
        self._factory_defaults_data = None
        self._repair_policy = None
        self._is_trunk_capable = None
        self._trunk_miswire = None
        self._locate_in_progress = None
        self._has_tray_identity_indicator = None
        self._esm_type = None
        self._id = None

    @property
    def esm_ref(self):
        """
        Gets the esm_ref of this Esm.
        The reference for this physical ESM.

        :return: The esm_ref of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._esm_ref

    @esm_ref.setter
    def esm_ref(self, esm_ref):
        """
        Sets the esm_ref of this Esm.
        The reference for this physical ESM.

        :param esm_ref: The esm_ref of this Esm.
        :type: str
        """
        self._esm_ref = esm_ref

    @property
    def status(self):
        """
        Gets the status of this Esm.
        The operational status for this ESM.

        :return: The status of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Esm.
        The operational status for this ESM.

        :param status: The status of this Esm.
        :type: str
        """
        allowed_values = ["optimal", "failed", "removed", "unknown", "unsupported", "uncertified", "__UNDEFINED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def physical_location(self):
        """
        Gets the physical_location of this Esm.
        The physical location of the ESM. The parent reference in Location identifies the tray containing the ESM, and the position field is the parent-relative/like-component relative slot number of the ESM, starting at 1.

        :return: The physical_location of this Esm.
        :rtype: Location
        :required/optional: required
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """
        Sets the physical_location of this Esm.
        The physical location of the ESM. The parent reference in Location identifies the tray containing the ESM, and the position field is the parent-relative/like-component relative slot number of the ESM, starting at 1.

        :param physical_location: The physical_location of this Esm.
        :type: Location
        """
        self._physical_location = physical_location

    @property
    def non_redundant_access(self):
        """
        Gets the non_redundant_access of this Esm.
        True if the ESM does not have redundant access.

        :return: The non_redundant_access of this Esm.
        :rtype: bool
        :required/optional: required
        """
        return self._non_redundant_access

    @non_redundant_access.setter
    def non_redundant_access(self, non_redundant_access):
        """
        Sets the non_redundant_access of this Esm.
        True if the ESM does not have redundant access.

        :param non_redundant_access: The non_redundant_access of this Esm.
        :type: bool
        """
        self._non_redundant_access = non_redundant_access

    @property
    def part_number(self):
        """
        Gets the part_number of this Esm.
        The part number of the ESM.

        :return: The part_number of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """
        Sets the part_number of this Esm.
        The part number of the ESM.

        :param part_number: The part_number of this Esm.
        :type: str
        """
        self._part_number = part_number

    @property
    def serial_number(self):
        """
        Gets the serial_number of this Esm.
        The serial number of the ESM.

        :return: The serial_number of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this Esm.
        The serial number of the ESM.

        :param serial_number: The serial_number of this Esm.
        :type: str
        """
        self._serial_number = serial_number

    @property
    def manufacturer_date(self):
        """
        Gets the manufacturer_date of this Esm.
        The date the ESM was manufactured.

        :return: The manufacturer_date of this Esm.
        :rtype: int
        :required/optional: required
        """
        return self._manufacturer_date

    @manufacturer_date.setter
    def manufacturer_date(self, manufacturer_date):
        """
        Sets the manufacturer_date of this Esm.
        The date the ESM was manufactured.

        :param manufacturer_date: The manufacturer_date of this Esm.
        :type: int
        """
        self._manufacturer_date = manufacturer_date

    @property
    def manufacturer(self):
        """
        Gets the manufacturer of this Esm.
        The date the ESM was manufactured.

        :return: The manufacturer of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """
        Sets the manufacturer of this Esm.
        The date the ESM was manufactured.

        :param manufacturer: The manufacturer of this Esm.
        :type: str
        """
        self._manufacturer = manufacturer

    @property
    def fru_type(self):
        """
        Gets the fru_type of this Esm.
        The field replaceable unit type of the ESM.

        :return: The fru_type of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._fru_type

    @fru_type.setter
    def fru_type(self, fru_type):
        """
        Sets the fru_type of this Esm.
        The field replaceable unit type of the ESM.

        :param fru_type: The fru_type of this Esm.
        :type: str
        """
        self._fru_type = fru_type

    @property
    def software_version(self):
        """
        Gets the software_version of this Esm.
        The firmware version of the ESM.

        :return: The software_version of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """
        Sets the software_version of this Esm.
        The firmware version of the ESM.

        :param software_version: The software_version of this Esm.
        :type: str
        """
        self._software_version = software_version

    @property
    def esm_interface_data(self):
        """
        Gets the esm_interface_data of this Esm.
        The interface type information for the ESM. This field is now deprecated. The field esmInterfaceAttributes should be used instead.

        :return: The esm_interface_data of this Esm.
        :rtype: ESMInterfaceTypeData
        :required/optional: required
        """
        return self._esm_interface_data

    @esm_interface_data.setter
    def esm_interface_data(self, esm_interface_data):
        """
        Sets the esm_interface_data of this Esm.
        The interface type information for the ESM. This field is now deprecated. The field esmInterfaceAttributes should be used instead.

        :param esm_interface_data: The esm_interface_data of this Esm.
        :type: ESMInterfaceTypeData
        """
        self._esm_interface_data = esm_interface_data

    @property
    def product_id(self):
        """
        Gets the product_id of this Esm.
        The product identifier of the ESM.

        :return: The product_id of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this Esm.
        The product identifier of the ESM.

        :param product_id: The product_id of this Esm.
        :type: str
        """
        self._product_id = product_id

    @property
    def working_channel(self):
        """
        Gets the working_channel of this Esm.
        The channel to the tray that is still operational (if nonRedundantAccess is True).

        :return: The working_channel of this Esm.
        :rtype: int
        :required/optional: required
        """
        return self._working_channel

    @working_channel.setter
    def working_channel(self, working_channel):
        """
        Sets the working_channel of this Esm.
        The channel to the tray that is still operational (if nonRedundantAccess is True).

        :param working_channel: The working_channel of this Esm.
        :type: int
        """
        self._working_channel = working_channel

    @property
    def current_speed(self):
        """
        Gets the current_speed of this Esm.
        The current speed of the ESM.

        :return: The current_speed of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._current_speed

    @current_speed.setter
    def current_speed(self, current_speed):
        """
        Sets the current_speed of this Esm.
        The current speed of the ESM.

        :param current_speed: The current_speed of this Esm.
        :type: str
        """
        allowed_values = ["speedUnknown", "speed1gig", "speed2gig", "speed4gig", "speed10gig", "speed15gig", "speed3gig", "speed10meg", "speed100meg", "speed2pt5Gig", "speed5gig", "speed20gig", "speed30gig", "speed60gig", "speed8gig", "speed6gig", "speed40gig", "speed16gig", "speed56gig", "speed12gig", "__UNDEFINED"]
        if current_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `current_speed`, must be one of {0}"
                .format(allowed_values)
            )
        self._current_speed = current_speed

    @property
    def max_speed(self):
        """
        Gets the max_speed of this Esm.
        The maximum speed of the ESM.

        :return: The max_speed of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """
        Sets the max_speed of this Esm.
        The maximum speed of the ESM.

        :param max_speed: The max_speed of this Esm.
        :type: str
        """
        allowed_values = ["speedUnknown", "speed1gig", "speed2gig", "speed4gig", "speed10gig", "speed15gig", "speed3gig", "speed10meg", "speed100meg", "speed2pt5Gig", "speed5gig", "speed20gig", "speed30gig", "speed60gig", "speed8gig", "speed6gig", "speed40gig", "speed16gig", "speed56gig", "speed12gig", "__UNDEFINED"]
        if max_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `max_speed`, must be one of {0}"
                .format(allowed_values)
            )
        self._max_speed = max_speed

    @property
    def reserved1(self):
        """
        Gets the reserved1 of this Esm.


        :return: The reserved1 of this Esm.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved1

    @reserved1.setter
    def reserved1(self, reserved1):
        """
        Sets the reserved1 of this Esm.


        :param reserved1: The reserved1 of this Esm.
        :type: str
        """
        self._reserved1 = reserved1

    @property
    def reserved2(self):
        """
        Gets the reserved2 of this Esm.


        :return: The reserved2 of this Esm.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved2

    @reserved2.setter
    def reserved2(self, reserved2):
        """
        Sets the reserved2 of this Esm.


        :param reserved2: The reserved2 of this Esm.
        :type: str
        """
        self._reserved2 = reserved2

    @property
    def fibre_esm(self):
        """
        Gets the fibre_esm of this Esm.
        The Fibre Channel information for the ESM. This field is deprecated. The field fibreEsmAddress located within esmInterfaceAttributes should be used instead.

        :return: The fibre_esm of this Esm.
        :rtype: FibreESMAddress
        :required/optional: required
        """
        return self._fibre_esm

    @fibre_esm.setter
    def fibre_esm(self, fibre_esm):
        """
        Sets the fibre_esm of this Esm.
        The Fibre Channel information for the ESM. This field is deprecated. The field fibreEsmAddress located within esmInterfaceAttributes should be used instead.

        :param fibre_esm: The fibre_esm of this Esm.
        :type: FibreESMAddress
        """
        self._fibre_esm = fibre_esm

    @property
    def rtr_attributes(self):
        """
        Gets the rtr_attributes of this Esm.
        The CRU type of the ESM plus its ready-to-remove attributes, which are based on the CRU type.

        :return: The rtr_attributes of this Esm.
        :rtype: RTRAttributes
        :required/optional: required
        """
        return self._rtr_attributes

    @rtr_attributes.setter
    def rtr_attributes(self, rtr_attributes):
        """
        Sets the rtr_attributes of this Esm.
        The CRU type of the ESM plus its ready-to-remove attributes, which are based on the CRU type.

        :param rtr_attributes: The rtr_attributes of this Esm.
        :type: RTRAttributes
        """
        self._rtr_attributes = rtr_attributes

    @property
    def esm_interface_attributes(self):
        """
        Gets the esm_interface_attributes of this Esm.
        Attributes that are specific to the ESM's I/O interface type.

        :return: The esm_interface_attributes of this Esm.
        :rtype: EsmInterfaceAttributes
        :required/optional: required
        """
        return self._esm_interface_attributes

    @esm_interface_attributes.setter
    def esm_interface_attributes(self, esm_interface_attributes):
        """
        Sets the esm_interface_attributes of this Esm.
        Attributes that are specific to the ESM's I/O interface type.

        :param esm_interface_attributes: The esm_interface_attributes of this Esm.
        :type: EsmInterfaceAttributes
        """
        self._esm_interface_attributes = esm_interface_attributes

    @property
    def board_id(self):
        """
        Gets the board_id of this Esm.
        The board ID of the ESM card.

        :return: The board_id of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._board_id

    @board_id.setter
    def board_id(self, board_id):
        """
        Sets the board_id of this Esm.
        The board ID of the ESM card.

        :param board_id: The board_id of this Esm.
        :type: str
        """
        self._board_id = board_id

    @property
    def factory_defaults_data(self):
        """
        Gets the factory_defaults_data of this Esm.
        This field contains information about the version of the ESM's factory default settings.

        :return: The factory_defaults_data of this Esm.
        :rtype: EsmFactoryDefaultsVersionData
        :required/optional: required
        """
        return self._factory_defaults_data

    @factory_defaults_data.setter
    def factory_defaults_data(self, factory_defaults_data):
        """
        Sets the factory_defaults_data of this Esm.
        This field contains information about the version of the ESM's factory default settings.

        :param factory_defaults_data: The factory_defaults_data of this Esm.
        :type: EsmFactoryDefaultsVersionData
        """
        self._factory_defaults_data = factory_defaults_data

    @property
    def repair_policy(self):
        """
        Gets the repair_policy of this Esm.
        The repair policy for the ESM component.

        :return: The repair_policy of this Esm.
        :rtype: RepairPolicy
        :required/optional: required
        """
        return self._repair_policy

    @repair_policy.setter
    def repair_policy(self, repair_policy):
        """
        Sets the repair_policy of this Esm.
        The repair policy for the ESM component.

        :param repair_policy: The repair_policy of this Esm.
        :type: RepairPolicy
        """
        self._repair_policy = repair_policy

    @property
    def is_trunk_capable(self):
        """
        Gets the is_trunk_capable of this Esm.
        True when ESM is trunk capable.

        :return: The is_trunk_capable of this Esm.
        :rtype: bool
        :required/optional: required
        """
        return self._is_trunk_capable

    @is_trunk_capable.setter
    def is_trunk_capable(self, is_trunk_capable):
        """
        Sets the is_trunk_capable of this Esm.
        True when ESM is trunk capable.

        :param is_trunk_capable: The is_trunk_capable of this Esm.
        :type: bool
        """
        self._is_trunk_capable = is_trunk_capable

    @property
    def trunk_miswire(self):
        """
        Gets the trunk_miswire of this Esm.
        True only when ESM is trunk capable and cabled incorrectly, or not trunk capable but connected in trunk mode.

        :return: The trunk_miswire of this Esm.
        :rtype: bool
        :required/optional: required
        """
        return self._trunk_miswire

    @trunk_miswire.setter
    def trunk_miswire(self, trunk_miswire):
        """
        Sets the trunk_miswire of this Esm.
        True only when ESM is trunk capable and cabled incorrectly, or not trunk capable but connected in trunk mode.

        :param trunk_miswire: The trunk_miswire of this Esm.
        :type: bool
        """
        self._trunk_miswire = trunk_miswire

    @property
    def locate_in_progress(self):
        """
        Gets the locate_in_progress of this Esm.
        Indicates that a locate operation for the device is currently active. The device will show a visual indication to aid an operator in locating the device.

        :return: The locate_in_progress of this Esm.
        :rtype: bool
        :required/optional: required
        """
        return self._locate_in_progress

    @locate_in_progress.setter
    def locate_in_progress(self, locate_in_progress):
        """
        Sets the locate_in_progress of this Esm.
        Indicates that a locate operation for the device is currently active. The device will show a visual indication to aid an operator in locating the device.

        :param locate_in_progress: The locate_in_progress of this Esm.
        :type: bool
        """
        self._locate_in_progress = locate_in_progress

    @property
    def has_tray_identity_indicator(self):
        """
        Gets the has_tray_identity_indicator of this Esm.
        The device contains 7-segment indicators used to display the Tray Identity.

        :return: The has_tray_identity_indicator of this Esm.
        :rtype: bool
        :required/optional: required
        """
        return self._has_tray_identity_indicator

    @has_tray_identity_indicator.setter
    def has_tray_identity_indicator(self, has_tray_identity_indicator):
        """
        Sets the has_tray_identity_indicator of this Esm.
        The device contains 7-segment indicators used to display the Tray Identity.

        :param has_tray_identity_indicator: The has_tray_identity_indicator of this Esm.
        :type: bool
        """
        self._has_tray_identity_indicator = has_tray_identity_indicator

    @property
    def esm_type(self):
        """
        Gets the esm_type of this Esm.
        Type of ESM or IOM.

        :return: The esm_type of this Esm.
        :rtype: str
        :required/optional: required
        """
        return self._esm_type

    @esm_type.setter
    def esm_type(self, esm_type):
        """
        Sets the esm_type of this Esm.
        Type of ESM or IOM.

        :param esm_type: The esm_type of this Esm.
        :type: str
        """
        allowed_values = ["unidentified", "badger", "devil", "cyclone", "polecat", "otter", "__UNDEFINED"]
        if esm_type not in allowed_values:
            raise ValueError(
                "Invalid value for `esm_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._esm_type = esm_type

    @property
    def id(self):
        """
        Gets the id of this Esm.


        :return: The id of this Esm.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Esm.


        :param id: The id of this Esm.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

