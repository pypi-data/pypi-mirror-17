# coding: utf-8

"""
PITGroup.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class PITGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PITGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'pit_group_ref': 'str',  # (required parameter)
            'label': 'str',  # (required parameter)
            'status': 'str',  # (required parameter)
            'base_volume': 'str',  # (required parameter)
            'repository_volume': 'str',  # (required parameter)
            'cluster_size': 'int',  # (required parameter)
            'max_repository_capacity': 'int',  # (required parameter)
            'max_base_capacity': 'int',  # (required parameter)
            'unusable_repository_capacity': 'int',  # (required parameter)
            'rep_full_policy': 'str',  # (required parameter)
            'full_warn_threshold': 'int',  # (required parameter)
            'auto_delete_limit': 'int',  # (required parameter)
            'action': 'str',  # (required parameter)
            'rollback_status': 'str',  # (required parameter)
            'rollback_priority': 'str',  # (required parameter)
            'consistency_group': 'bool',  # (required parameter)
            'consistency_group_ref': 'str',  # (required parameter)
            'creation_pending_status': 'str',  # (required parameter)
            'volume_handle': 'int',  # (required parameter)
            'name': 'str',  
            'id': 'str'
        }

        self.attribute_map = {
            'pit_group_ref': 'pitGroupRef',  # (required parameter)
            'label': 'label',  # (required parameter)
            'status': 'status',  # (required parameter)
            'base_volume': 'baseVolume',  # (required parameter)
            'repository_volume': 'repositoryVolume',  # (required parameter)
            'cluster_size': 'clusterSize',  # (required parameter)
            'max_repository_capacity': 'maxRepositoryCapacity',  # (required parameter)
            'max_base_capacity': 'maxBaseCapacity',  # (required parameter)
            'unusable_repository_capacity': 'unusableRepositoryCapacity',  # (required parameter)
            'rep_full_policy': 'repFullPolicy',  # (required parameter)
            'full_warn_threshold': 'fullWarnThreshold',  # (required parameter)
            'auto_delete_limit': 'autoDeleteLimit',  # (required parameter)
            'action': 'action',  # (required parameter)
            'rollback_status': 'rollbackStatus',  # (required parameter)
            'rollback_priority': 'rollbackPriority',  # (required parameter)
            'consistency_group': 'consistencyGroup',  # (required parameter)
            'consistency_group_ref': 'consistencyGroupRef',  # (required parameter)
            'creation_pending_status': 'creationPendingStatus',  # (required parameter)
            'volume_handle': 'volumeHandle',  # (required parameter)
            'name': 'name',  
            'id': 'id'
        }

        self._pit_group_ref = None
        self._label = None
        self._status = None
        self._base_volume = None
        self._repository_volume = None
        self._cluster_size = None
        self._max_repository_capacity = None
        self._max_base_capacity = None
        self._unusable_repository_capacity = None
        self._rep_full_policy = None
        self._full_warn_threshold = None
        self._auto_delete_limit = None
        self._action = None
        self._rollback_status = None
        self._rollback_priority = None
        self._consistency_group = None
        self._consistency_group_ref = None
        self._creation_pending_status = None
        self._volume_handle = None
        self._name = None
        self._id = None

    @property
    def pit_group_ref(self):
        """
        Gets the pit_group_ref of this PITGroup.
        The reference (key) for the PiT Group.

        :return: The pit_group_ref of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._pit_group_ref

    @pit_group_ref.setter
    def pit_group_ref(self, pit_group_ref):
        """
        Sets the pit_group_ref of this PITGroup.
        The reference (key) for the PiT Group.

        :param pit_group_ref: The pit_group_ref of this PITGroup.
        :type: str
        """
        self._pit_group_ref = pit_group_ref

    @property
    def label(self):
        """
        Gets the label of this PITGroup.
        The name of the PiT Group. If this PiT group is part of a consistency group, then this label does not have to be present or unique as the parent consistency group label will be used.

        :return: The label of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this PITGroup.
        The name of the PiT Group. If this PiT group is part of a consistency group, then this label does not have to be present or unique as the parent consistency group label will be used.

        :param label: The label of this PITGroup.
        :type: str
        """
        self._label = label

    @property
    def status(self):
        """
        Gets the status of this PITGroup.
        The status of the PiT Group.

        :return: The status of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this PITGroup.
        The status of the PiT Group.

        :param status: The status of this PITGroup.
        :type: str
        """
        allowed_values = ["unknown", "optimal", "full", "failed", "overThreshold", "__UNDEFINED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def base_volume(self):
        """
        Gets the base_volume of this PITGroup.
        The base volume for this PiT Group.

        :return: The base_volume of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._base_volume

    @base_volume.setter
    def base_volume(self, base_volume):
        """
        Sets the base_volume of this PITGroup.
        The base volume for this PiT Group.

        :param base_volume: The base_volume of this PITGroup.
        :type: str
        """
        self._base_volume = base_volume

    @property
    def repository_volume(self):
        """
        Gets the repository_volume of this PITGroup.
        The copy-on-write (CoW) Repository for this PiT group.

        :return: The repository_volume of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._repository_volume

    @repository_volume.setter
    def repository_volume(self, repository_volume):
        """
        Sets the repository_volume of this PITGroup.
        The copy-on-write (CoW) Repository for this PiT group.

        :param repository_volume: The repository_volume of this PITGroup.
        :type: str
        """
        self._repository_volume = repository_volume

    @property
    def cluster_size(self):
        """
        Gets the cluster_size of this PITGroup.
        The cluster size (in bytes).

        :return: The cluster_size of this PITGroup.
        :rtype: int
        :required/optional: required
        """
        return self._cluster_size

    @cluster_size.setter
    def cluster_size(self, cluster_size):
        """
        Sets the cluster_size of this PITGroup.
        The cluster size (in bytes).

        :param cluster_size: The cluster_size of this PITGroup.
        :type: int
        """
        self._cluster_size = cluster_size

    @property
    def max_repository_capacity(self):
        """
        Gets the max_repository_capacity of this PITGroup.
        The maximum allowable repository size (in bytes) based on current cluster size. Only applicable if there is at least one PiT in the PiT group.

        :return: The max_repository_capacity of this PITGroup.
        :rtype: int
        :required/optional: required
        """
        return self._max_repository_capacity

    @max_repository_capacity.setter
    def max_repository_capacity(self, max_repository_capacity):
        """
        Sets the max_repository_capacity of this PITGroup.
        The maximum allowable repository size (in bytes) based on current cluster size. Only applicable if there is at least one PiT in the PiT group.

        :param max_repository_capacity: The max_repository_capacity of this PITGroup.
        :type: int
        """
        self._max_repository_capacity = max_repository_capacity

    @property
    def max_base_capacity(self):
        """
        Gets the max_base_capacity of this PITGroup.
        The maximum allowable base volume size (in bytes) based on current cluster size. Only applicable if there is at least one PiT in the PiT group.

        :return: The max_base_capacity of this PITGroup.
        :rtype: int
        :required/optional: required
        """
        return self._max_base_capacity

    @max_base_capacity.setter
    def max_base_capacity(self, max_base_capacity):
        """
        Sets the max_base_capacity of this PITGroup.
        The maximum allowable base volume size (in bytes) based on current cluster size. Only applicable if there is at least one PiT in the PiT group.

        :param max_base_capacity: The max_base_capacity of this PITGroup.
        :type: int
        """
        self._max_base_capacity = max_base_capacity

    @property
    def unusable_repository_capacity(self):
        """
        Gets the unusable_repository_capacity of this PITGroup.
        The amount of repository capacity that is unusable due to limited addressability of the current cluster size.

        :return: The unusable_repository_capacity of this PITGroup.
        :rtype: int
        :required/optional: required
        """
        return self._unusable_repository_capacity

    @unusable_repository_capacity.setter
    def unusable_repository_capacity(self, unusable_repository_capacity):
        """
        Sets the unusable_repository_capacity of this PITGroup.
        The amount of repository capacity that is unusable due to limited addressability of the current cluster size.

        :param unusable_repository_capacity: The unusable_repository_capacity of this PITGroup.
        :type: int
        """
        self._unusable_repository_capacity = unusable_repository_capacity

    @property
    def rep_full_policy(self):
        """
        Gets the rep_full_policy of this PITGroup.
        The behavior on repository full condition. Overridden by consistency group setting if this PITGroup is associated with a consistency group.

        :return: The rep_full_policy of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._rep_full_policy

    @rep_full_policy.setter
    def rep_full_policy(self, rep_full_policy):
        """
        Sets the rep_full_policy of this PITGroup.
        The behavior on repository full condition. Overridden by consistency group setting if this PITGroup is associated with a consistency group.

        :param rep_full_policy: The rep_full_policy of this PITGroup.
        :type: str
        """
        allowed_values = ["unknown", "failbasewrites", "purgepit", "__UNDEFINED"]
        if rep_full_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `rep_full_policy`, must be one of {0}"
                .format(allowed_values)
            )
        self._rep_full_policy = rep_full_policy

    @property
    def full_warn_threshold(self):
        """
        Gets the full_warn_threshold of this PITGroup.
        The repository utilization warning threshold percentage.

        :return: The full_warn_threshold of this PITGroup.
        :rtype: int
        :required/optional: required
        """
        return self._full_warn_threshold

    @full_warn_threshold.setter
    def full_warn_threshold(self, full_warn_threshold):
        """
        Sets the full_warn_threshold of this PITGroup.
        The repository utilization warning threshold percentage.

        :param full_warn_threshold: The full_warn_threshold of this PITGroup.
        :type: int
        """
        self._full_warn_threshold = full_warn_threshold

    @property
    def auto_delete_limit(self):
        """
        Gets the auto_delete_limit of this PITGroup.
        The auto-delete indicator. If non-zero, the oldest PiT will be automatically deleted when creating a new one to keep the total number of PiTs limited to the number specified. This value is overridden by the consistency group setting if this PITGroup is associated with a consistency group.

        :return: The auto_delete_limit of this PITGroup.
        :rtype: int
        :required/optional: required
        """
        return self._auto_delete_limit

    @auto_delete_limit.setter
    def auto_delete_limit(self, auto_delete_limit):
        """
        Sets the auto_delete_limit of this PITGroup.
        The auto-delete indicator. If non-zero, the oldest PiT will be automatically deleted when creating a new one to keep the total number of PiTs limited to the number specified. This value is overridden by the consistency group setting if this PITGroup is associated with a consistency group.

        :param auto_delete_limit: The auto_delete_limit of this PITGroup.
        :type: int
        """
        self._auto_delete_limit = auto_delete_limit

    @property
    def action(self):
        """
        Gets the action of this PITGroup.
        Long running operation.

        :return: The action of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this PITGroup.
        Long running operation.

        :param action: The action of this PITGroup.
        :type: str
        """
        allowed_values = ["none", "copyback", "initializing", "reconstructing", "remappingDce", "remappingDrm", "remappingDcedrm", "remappingDseg", "remappingDve", "remappingDcedve", "remappingInternal", "remappingDefrag", "formatting", "synchronizing", "parityScan", "volumeCopy", "snapshotRollback", "pitRollback", "asyncMirrorGroupInitialSync", "reconstructingCritical", "rebalancing", "copyThenFail", "copyThenFailPending", "copyThenReplace", "copyThenReplaceAndFail", "thinDefrag", "creating", "deleting", "__UNDEFINED"]
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action`, must be one of {0}"
                .format(allowed_values)
            )
        self._action = action

    @property
    def rollback_status(self):
        """
        Gets the rollback_status of this PITGroup.
        The status of the rollback (if rollback is indicated in VolumeAction above).

        :return: The rollback_status of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._rollback_status

    @rollback_status.setter
    def rollback_status(self, rollback_status):
        """
        Sets the rollback_status of this PITGroup.
        The status of the rollback (if rollback is indicated in VolumeAction above).

        :param rollback_status: The rollback_status of this PITGroup.
        :type: str
        """
        allowed_values = ["unknown", "none", "inProgress", "pending", "paused", "__UNDEFINED"]
        if rollback_status not in allowed_values:
            raise ValueError(
                "Invalid value for `rollback_status`, must be one of {0}"
                .format(allowed_values)
            )
        self._rollback_status = rollback_status

    @property
    def rollback_priority(self):
        """
        Gets the rollback_priority of this PITGroup.
        The importance of the rollback operation.

        :return: The rollback_priority of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._rollback_priority

    @rollback_priority.setter
    def rollback_priority(self, rollback_priority):
        """
        Sets the rollback_priority of this PITGroup.
        The importance of the rollback operation.

        :param rollback_priority: The rollback_priority of this PITGroup.
        :type: str
        """
        allowed_values = ["highest", "high", "medium", "low", "lowest", "__UNDEFINED"]
        if rollback_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `rollback_priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._rollback_priority = rollback_priority

    @property
    def consistency_group(self):
        """
        Gets the consistency_group of this PITGroup.
        If true, this PiT group is part of a consistency group.

        :return: The consistency_group of this PITGroup.
        :rtype: bool
        :required/optional: required
        """
        return self._consistency_group

    @consistency_group.setter
    def consistency_group(self, consistency_group):
        """
        Sets the consistency_group of this PITGroup.
        If true, this PiT group is part of a consistency group.

        :param consistency_group: The consistency_group of this PITGroup.
        :type: bool
        """
        self._consistency_group = consistency_group

    @property
    def consistency_group_ref(self):
        """
        Gets the consistency_group_ref of this PITGroup.
        A reference to the parent consistency group, if applicable. This value will be NULL if this PiT group is not part of a consistency group.

        :return: The consistency_group_ref of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._consistency_group_ref

    @consistency_group_ref.setter
    def consistency_group_ref(self, consistency_group_ref):
        """
        Sets the consistency_group_ref of this PITGroup.
        A reference to the parent consistency group, if applicable. This value will be NULL if this PiT group is not part of a consistency group.

        :param consistency_group_ref: The consistency_group_ref of this PITGroup.
        :type: str
        """
        self._consistency_group_ref = consistency_group_ref

    @property
    def creation_pending_status(self):
        """
        Gets the creation_pending_status of this PITGroup.
        The status of Pending PiT Creation.

        :return: The creation_pending_status of this PITGroup.
        :rtype: str
        :required/optional: required
        """
        return self._creation_pending_status

    @creation_pending_status.setter
    def creation_pending_status(self, creation_pending_status):
        """
        Sets the creation_pending_status of this PITGroup.
        The status of Pending PiT Creation.

        :param creation_pending_status: The creation_pending_status of this PITGroup.
        :type: str
        """
        allowed_values = ["unknown", "none", "waiting", "failed", "__UNDEFINED"]
        if creation_pending_status not in allowed_values:
            raise ValueError(
                "Invalid value for `creation_pending_status`, must be one of {0}"
                .format(allowed_values)
            )
        self._creation_pending_status = creation_pending_status

    @property
    def volume_handle(self):
        """
        Gets the volume_handle of this PITGroup.
        The PiT group SSID. This is provided primarily for debug purposes.

        :return: The volume_handle of this PITGroup.
        :rtype: int
        :required/optional: required
        """
        return self._volume_handle

    @volume_handle.setter
    def volume_handle(self, volume_handle):
        """
        Sets the volume_handle of this PITGroup.
        The PiT group SSID. This is provided primarily for debug purposes.

        :param volume_handle: The volume_handle of this PITGroup.
        :type: int
        """
        self._volume_handle = volume_handle

    @property
    def name(self):
        """
        Gets the name of this PITGroup.


        :return: The name of this PITGroup.
        :rtype: str
        :required/optional: optional
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PITGroup.


        :param name: The name of this PITGroup.
        :type: str
        """
        self._name = name

    @property
    def id(self):
        """
        Gets the id of this PITGroup.


        :return: The id of this PITGroup.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PITGroup.


        :param id: The id of this PITGroup.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

