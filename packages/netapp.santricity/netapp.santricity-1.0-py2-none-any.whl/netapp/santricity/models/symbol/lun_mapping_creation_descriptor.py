# coding: utf-8

"""
LUNMappingCreationDescriptor.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class LUNMappingCreationDescriptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LUNMappingCreationDescriptor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'lun': 'int',  # (required parameter)
            'perms': 'int',  # (required parameter)
            'volume_ref': 'str',  # (required parameter)
            'map_ref': 'str'
        }

        self.attribute_map = {
            'lun': 'lun',  # (required parameter)
            'perms': 'perms',  # (required parameter)
            'volume_ref': 'volumeRef',  # (required parameter)
            'map_ref': 'mapRef'
        }

        self._lun = None
        self._perms = None
        self._volume_ref = None
        self._map_ref = None

    @property
    def lun(self):
        """
        Gets the lun of this LUNMappingCreationDescriptor.
        The logical unit number used to access the volume via the new mapping definition.

        :return: The lun of this LUNMappingCreationDescriptor.
        :rtype: int
        :required/optional: required
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """
        Sets the lun of this LUNMappingCreationDescriptor.
        The logical unit number used to access the volume via the new mapping definition.

        :param lun: The lun of this LUNMappingCreationDescriptor.
        :type: int
        """
        self._lun = lun

    @property
    def perms(self):
        """
        Gets the perms of this LUNMappingCreationDescriptor.
        The permission values associated with the new mapping definition. This field is not currently used, but is provided for future extensions.

        :return: The perms of this LUNMappingCreationDescriptor.
        :rtype: int
        :required/optional: required
        """
        return self._perms

    @perms.setter
    def perms(self, perms):
        """
        Sets the perms of this LUNMappingCreationDescriptor.
        The permission values associated with the new mapping definition. This field is not currently used, but is provided for future extensions.

        :param perms: The perms of this LUNMappingCreationDescriptor.
        :type: int
        """
        self._perms = perms

    @property
    def volume_ref(self):
        """
        Gets the volume_ref of this LUNMappingCreationDescriptor.
        The unique identification value of the volume that is accessed via the LUN value associated with the new mapping definition.

        :return: The volume_ref of this LUNMappingCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._volume_ref

    @volume_ref.setter
    def volume_ref(self, volume_ref):
        """
        Sets the volume_ref of this LUNMappingCreationDescriptor.
        The unique identification value of the volume that is accessed via the LUN value associated with the new mapping definition.

        :param volume_ref: The volume_ref of this LUNMappingCreationDescriptor.
        :type: str
        """
        self._volume_ref = volume_ref

    @property
    def map_ref(self):
        """
        Gets the map_ref of this LUNMappingCreationDescriptor.
        The unique identifier of the entity for which the mapping applies. The type of the entity, and thus of the SYMbol reference, depends on the mapping type. For example, if the LUNMapping object represents a cluster-wide mapping, this field will contain the ClusterRef of the cluster for which the mapping applies. Similarly, if the object represents a host-specific mapping, this field will contain the HostRef of the host for which the mapping applies. Note that if the object represents a default mapping, this field must contain a NULL SYMbolRef.

        :return: The map_ref of this LUNMappingCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._map_ref

    @map_ref.setter
    def map_ref(self, map_ref):
        """
        Sets the map_ref of this LUNMappingCreationDescriptor.
        The unique identifier of the entity for which the mapping applies. The type of the entity, and thus of the SYMbol reference, depends on the mapping type. For example, if the LUNMapping object represents a cluster-wide mapping, this field will contain the ClusterRef of the cluster for which the mapping applies. Similarly, if the object represents a host-specific mapping, this field will contain the HostRef of the host for which the mapping applies. Note that if the object represents a default mapping, this field must contain a NULL SYMbolRef.

        :param map_ref: The map_ref of this LUNMappingCreationDescriptor.
        :type: str
        """
        self._map_ref = map_ref

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

