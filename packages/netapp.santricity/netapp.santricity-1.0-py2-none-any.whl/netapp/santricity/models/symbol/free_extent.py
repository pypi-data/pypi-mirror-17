# coding: utf-8

"""
FreeExtent.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class FreeExtent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FreeExtent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sector_offset': 'int',  # (required parameter)
            'raw_capacity': 'int',  # (required parameter)
            'raid_level': 'str',  # (required parameter)
            'volume_group_ref': 'str',  # (required parameter)
            'free_extent_ref': 'str',  # (required parameter)
            'reserved1': 'str',  
            'reserved2': 'str'
        }

        self.attribute_map = {
            'sector_offset': 'sectorOffset',  # (required parameter)
            'raw_capacity': 'rawCapacity',  # (required parameter)
            'raid_level': 'raidLevel',  # (required parameter)
            'volume_group_ref': 'volumeGroupRef',  # (required parameter)
            'free_extent_ref': 'freeExtentRef',  # (required parameter)
            'reserved1': 'reserved1',  
            'reserved2': 'reserved2'
        }

        self._sector_offset = None
        self._raw_capacity = None
        self._raid_level = None
        self._volume_group_ref = None
        self._free_extent_ref = None
        self._reserved1 = None
        self._reserved2 = None

    @property
    def sector_offset(self):
        """
        Gets the sector_offset of this FreeExtent.
        The sector offset of this free extent within its volume group. This value is provided only to allow the client application to determine the relative positions of free extents and volumes within a given volume group. No other assumptions or computations should be made with this value.

        :return: The sector_offset of this FreeExtent.
        :rtype: int
        :required/optional: required
        """
        return self._sector_offset

    @sector_offset.setter
    def sector_offset(self, sector_offset):
        """
        Sets the sector_offset of this FreeExtent.
        The sector offset of this free extent within its volume group. This value is provided only to allow the client application to determine the relative positions of free extents and volumes within a given volume group. No other assumptions or computations should be made with this value.

        :param sector_offset: The sector_offset of this FreeExtent.
        :type: int
        """
        self._sector_offset = sector_offset

    @property
    def raw_capacity(self):
        """
        Gets the raw_capacity of this FreeExtent.
        The total raw capacity of this free extent. If the storage array supports mixed RAID levels per volume group, this value will represent the raw capacity without accounting for RAID parity requirements. Otherwise, this value will represent the RAID-factored capacity of the free extent, and thus provide an indication of the maximum volume (using the volume group's RAID level) that can be created on this free extent.

        :return: The raw_capacity of this FreeExtent.
        :rtype: int
        :required/optional: required
        """
        return self._raw_capacity

    @raw_capacity.setter
    def raw_capacity(self, raw_capacity):
        """
        Sets the raw_capacity of this FreeExtent.
        The total raw capacity of this free extent. If the storage array supports mixed RAID levels per volume group, this value will represent the raw capacity without accounting for RAID parity requirements. Otherwise, this value will represent the RAID-factored capacity of the free extent, and thus provide an indication of the maximum volume (using the volume group's RAID level) that can be created on this free extent.

        :param raw_capacity: The raw_capacity of this FreeExtent.
        :type: int
        """
        self._raw_capacity = raw_capacity

    @property
    def raid_level(self):
        """
        Gets the raid_level of this FreeExtent.
        The RAID level of this free extent, which governs the allowed configuration of volumes that can be created on it.

        :return: The raid_level of this FreeExtent.
        :rtype: str
        :required/optional: required
        """
        return self._raid_level

    @raid_level.setter
    def raid_level(self, raid_level):
        """
        Sets the raid_level of this FreeExtent.
        The RAID level of this free extent, which governs the allowed configuration of volumes that can be created on it.

        :param raid_level: The raid_level of this FreeExtent.
        :type: str
        """
        allowed_values = ["raidUnsupported", "raidAll", "raid0", "raid1", "raid3", "raid5", "raid6", "raidDiskPool", "__UNDEFINED"]
        if raid_level not in allowed_values:
            raise ValueError(
                "Invalid value for `raid_level`, must be one of {0}"
                .format(allowed_values)
            )
        self._raid_level = raid_level

    @property
    def volume_group_ref(self):
        """
        Gets the volume_group_ref of this FreeExtent.
        The volume group reference value of the volume group on which this free extent resides.

        :return: The volume_group_ref of this FreeExtent.
        :rtype: str
        :required/optional: required
        """
        return self._volume_group_ref

    @volume_group_ref.setter
    def volume_group_ref(self, volume_group_ref):
        """
        Sets the volume_group_ref of this FreeExtent.
        The volume group reference value of the volume group on which this free extent resides.

        :param volume_group_ref: The volume_group_ref of this FreeExtent.
        :type: str
        """
        self._volume_group_ref = volume_group_ref

    @property
    def free_extent_ref(self):
        """
        Gets the free_extent_ref of this FreeExtent.
        The unique identification value for this free extent. Other objects may use this reference value to refer to the free extent.

        :return: The free_extent_ref of this FreeExtent.
        :rtype: str
        :required/optional: required
        """
        return self._free_extent_ref

    @free_extent_ref.setter
    def free_extent_ref(self, free_extent_ref):
        """
        Sets the free_extent_ref of this FreeExtent.
        The unique identification value for this free extent. Other objects may use this reference value to refer to the free extent.

        :param free_extent_ref: The free_extent_ref of this FreeExtent.
        :type: str
        """
        self._free_extent_ref = free_extent_ref

    @property
    def reserved1(self):
        """
        Gets the reserved1 of this FreeExtent.


        :return: The reserved1 of this FreeExtent.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved1

    @reserved1.setter
    def reserved1(self, reserved1):
        """
        Sets the reserved1 of this FreeExtent.


        :param reserved1: The reserved1 of this FreeExtent.
        :type: str
        """
        self._reserved1 = reserved1

    @property
    def reserved2(self):
        """
        Gets the reserved2 of this FreeExtent.


        :return: The reserved2 of this FreeExtent.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved2

    @reserved2.setter
    def reserved2(self, reserved2):
        """
        Sets the reserved2 of this FreeExtent.


        :param reserved2: The reserved2 of this FreeExtent.
        :type: str
        """
        self._reserved2 = reserved2

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

