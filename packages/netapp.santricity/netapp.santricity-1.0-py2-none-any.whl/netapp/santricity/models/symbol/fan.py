# coding: utf-8

"""
Fan.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class Fan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Fan - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'fan_ref': 'str',  # (required parameter)
            'status': 'str',  # (required parameter)
            'physical_location': 'Location',  # (required parameter)
            'reserved1': 'str',  
            'reserved2': 'str',  
            'rtr_attributes': 'RTRAttributes',  # (required parameter)
            'repair_policy': 'RepairPolicy',  # (required parameter)
            'id': 'str'
        }

        self.attribute_map = {
            'fan_ref': 'fanRef',  # (required parameter)
            'status': 'status',  # (required parameter)
            'physical_location': 'physicalLocation',  # (required parameter)
            'reserved1': 'reserved1',  
            'reserved2': 'reserved2',  
            'rtr_attributes': 'rtrAttributes',  # (required parameter)
            'repair_policy': 'repairPolicy',  # (required parameter)
            'id': 'id'
        }

        self._fan_ref = None
        self._status = None
        self._physical_location = None
        self._reserved1 = None
        self._reserved2 = None
        self._rtr_attributes = None
        self._repair_policy = None
        self._id = None

    @property
    def fan_ref(self):
        """
        Gets the fan_ref of this Fan.
        The reference for this physical fan.

        :return: The fan_ref of this Fan.
        :rtype: str
        :required/optional: required
        """
        return self._fan_ref

    @fan_ref.setter
    def fan_ref(self, fan_ref):
        """
        Sets the fan_ref of this Fan.
        The reference for this physical fan.

        :param fan_ref: The fan_ref of this Fan.
        :type: str
        """
        self._fan_ref = fan_ref

    @property
    def status(self):
        """
        Gets the status of this Fan.
        The operational status of the fan

        :return: The status of this Fan.
        :rtype: str
        :required/optional: required
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Fan.
        The operational status of the fan

        :param status: The status of this Fan.
        :type: str
        """
        allowed_values = ["optimal", "failed", "removed", "unknown", "__UNDEFINED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def physical_location(self):
        """
        Gets the physical_location of this Fan.
        The physical location of the fan. The parent reference in Location identifies the CRU that houses the fan, and the position field is a firmware-assigned 1-relative number signifying \"1st fan relative to parent CRU,\" 2nd fan relative to parent CRU.\" etc.

        :return: The physical_location of this Fan.
        :rtype: Location
        :required/optional: required
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """
        Sets the physical_location of this Fan.
        The physical location of the fan. The parent reference in Location identifies the CRU that houses the fan, and the position field is a firmware-assigned 1-relative number signifying \"1st fan relative to parent CRU,\" 2nd fan relative to parent CRU.\" etc.

        :param physical_location: The physical_location of this Fan.
        :type: Location
        """
        self._physical_location = physical_location

    @property
    def reserved1(self):
        """
        Gets the reserved1 of this Fan.


        :return: The reserved1 of this Fan.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved1

    @reserved1.setter
    def reserved1(self, reserved1):
        """
        Sets the reserved1 of this Fan.


        :param reserved1: The reserved1 of this Fan.
        :type: str
        """
        self._reserved1 = reserved1

    @property
    def reserved2(self):
        """
        Gets the reserved2 of this Fan.


        :return: The reserved2 of this Fan.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved2

    @reserved2.setter
    def reserved2(self, reserved2):
        """
        Sets the reserved2 of this Fan.


        :param reserved2: The reserved2 of this Fan.
        :type: str
        """
        self._reserved2 = reserved2

    @property
    def rtr_attributes(self):
        """
        Gets the rtr_attributes of this Fan.
        The CRU type of the fan plus its ready-to-remove attributes, which are based on the CRU type.

        :return: The rtr_attributes of this Fan.
        :rtype: RTRAttributes
        :required/optional: required
        """
        return self._rtr_attributes

    @rtr_attributes.setter
    def rtr_attributes(self, rtr_attributes):
        """
        Sets the rtr_attributes of this Fan.
        The CRU type of the fan plus its ready-to-remove attributes, which are based on the CRU type.

        :param rtr_attributes: The rtr_attributes of this Fan.
        :type: RTRAttributes
        """
        self._rtr_attributes = rtr_attributes

    @property
    def repair_policy(self):
        """
        Gets the repair_policy of this Fan.
        The repair policy for the fan component.

        :return: The repair_policy of this Fan.
        :rtype: RepairPolicy
        :required/optional: required
        """
        return self._repair_policy

    @repair_policy.setter
    def repair_policy(self, repair_policy):
        """
        Sets the repair_policy of this Fan.
        The repair policy for the fan component.

        :param repair_policy: The repair_policy of this Fan.
        :type: RepairPolicy
        """
        self._repair_policy = repair_policy

    @property
    def id(self):
        """
        Gets the id of this Fan.


        :return: The id of this Fan.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Fan.


        :param id: The id of this Fan.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

