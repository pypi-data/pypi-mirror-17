# coding: utf-8

"""
ControllerCounterGroup.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class ControllerCounterGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ControllerCounterGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'controller_ref': 'str',  # (required parameter)
            'base_time': 'int',  # (required parameter)
            'start_time': 'int',  # (required parameter)
            'observed_time': 'int',  # (required parameter)
            'cpu_utilization_stats': 'list[CpuUtilizationStats]',  # (required parameter)
            'total_iops_serviced': 'int',  # (required parameter)
            'total_bytes_serviced': 'int',  # (required parameter)
            'cache_hits_iops_total': 'int',  # (required parameter)
            'cache_hits_bytes_total': 'int',  # (required parameter)
            'random_ios_total': 'int',  # (required parameter)
            'random_bytes_total': 'int',  # (required parameter)
            'read_iops_total': 'int',  # (required parameter)
            'read_bytes_total': 'int',  # (required parameter)
            'write_iops_total': 'int',  # (required parameter)
            'write_bytes_total': 'int',  # (required parameter)
            'mirror_iops_total': 'int',  # (required parameter)
            'mirror_bytes_total': 'int',  # (required parameter)
            'full_stripe_writes_bytes': 'int',  # (required parameter)
            'raid0_bytes_transferred': 'int',  # (required parameter)
            'raid1_bytes_transferred': 'int',  # (required parameter)
            'raid5_bytes_transferred': 'int',  # (required parameter)
            'raid6_bytes_transferred': 'int',  # (required parameter)
            'ddp_bytes_transferred': 'int',  # (required parameter)
            'max_possible_bps_under_current_load': 'int',  # (required parameter)
            'max_possible_iops_under_current_load': 'int'
        }

        self.attribute_map = {
            'controller_ref': 'controllerRef',  # (required parameter)
            'base_time': 'baseTime',  # (required parameter)
            'start_time': 'startTime',  # (required parameter)
            'observed_time': 'observedTime',  # (required parameter)
            'cpu_utilization_stats': 'cpuUtilizationStats',  # (required parameter)
            'total_iops_serviced': 'totalIopsServiced',  # (required parameter)
            'total_bytes_serviced': 'totalBytesServiced',  # (required parameter)
            'cache_hits_iops_total': 'cacheHitsIopsTotal',  # (required parameter)
            'cache_hits_bytes_total': 'cacheHitsBytesTotal',  # (required parameter)
            'random_ios_total': 'randomIosTotal',  # (required parameter)
            'random_bytes_total': 'randomBytesTotal',  # (required parameter)
            'read_iops_total': 'readIopsTotal',  # (required parameter)
            'read_bytes_total': 'readBytesTotal',  # (required parameter)
            'write_iops_total': 'writeIopsTotal',  # (required parameter)
            'write_bytes_total': 'writeBytesTotal',  # (required parameter)
            'mirror_iops_total': 'mirrorIopsTotal',  # (required parameter)
            'mirror_bytes_total': 'mirrorBytesTotal',  # (required parameter)
            'full_stripe_writes_bytes': 'fullStripeWritesBytes',  # (required parameter)
            'raid0_bytes_transferred': 'raid0BytesTransferred',  # (required parameter)
            'raid1_bytes_transferred': 'raid1BytesTransferred',  # (required parameter)
            'raid5_bytes_transferred': 'raid5BytesTransferred',  # (required parameter)
            'raid6_bytes_transferred': 'raid6BytesTransferred',  # (required parameter)
            'ddp_bytes_transferred': 'ddpBytesTransferred',  # (required parameter)
            'max_possible_bps_under_current_load': 'maxPossibleBpsUnderCurrentLoad',  # (required parameter)
            'max_possible_iops_under_current_load': 'maxPossibleIopsUnderCurrentLoad'
        }

        self._controller_ref = None
        self._base_time = None
        self._start_time = None
        self._observed_time = None
        self._cpu_utilization_stats = None
        self._total_iops_serviced = None
        self._total_bytes_serviced = None
        self._cache_hits_iops_total = None
        self._cache_hits_bytes_total = None
        self._random_ios_total = None
        self._random_bytes_total = None
        self._read_iops_total = None
        self._read_bytes_total = None
        self._write_iops_total = None
        self._write_bytes_total = None
        self._mirror_iops_total = None
        self._mirror_bytes_total = None
        self._full_stripe_writes_bytes = None
        self._raid0_bytes_transferred = None
        self._raid1_bytes_transferred = None
        self._raid5_bytes_transferred = None
        self._raid6_bytes_transferred = None
        self._ddp_bytes_transferred = None
        self._max_possible_bps_under_current_load = None
        self._max_possible_iops_under_current_load = None

    @property
    def controller_ref(self):
        """
        Gets the controller_ref of this ControllerCounterGroup.
        Controller that generated this group.

        :return: The controller_ref of this ControllerCounterGroup.
        :rtype: str
        :required/optional: required
        """
        return self._controller_ref

    @controller_ref.setter
    def controller_ref(self, controller_ref):
        """
        Sets the controller_ref of this ControllerCounterGroup.
        Controller that generated this group.

        :param controller_ref: The controller_ref of this ControllerCounterGroup.
        :type: str
        """
        self._controller_ref = controller_ref

    @property
    def base_time(self):
        """
        Gets the base_time of this ControllerCounterGroup.
        Time the counters were last reset. Time is the number of seconds since midnight, January 1, 1970.

        :return: The base_time of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._base_time

    @base_time.setter
    def base_time(self, base_time):
        """
        Sets the base_time of this ControllerCounterGroup.
        Time the counters were last reset. Time is the number of seconds since midnight, January 1, 1970.

        :param base_time: The base_time of this ControllerCounterGroup.
        :type: int
        """
        self._base_time = base_time

    @property
    def start_time(self):
        """
        Gets the start_time of this ControllerCounterGroup.
        Start time for this collection as measured by the number of seconds since baseTime.

        :return: The start_time of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this ControllerCounterGroup.
        Start time for this collection as measured by the number of seconds since baseTime.

        :param start_time: The start_time of this ControllerCounterGroup.
        :type: int
        """
        self._start_time = start_time

    @property
    def observed_time(self):
        """
        Gets the observed_time of this ControllerCounterGroup.
        End time for this collection as measured by the number of seconds since baseTime.

        :return: The observed_time of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._observed_time

    @observed_time.setter
    def observed_time(self, observed_time):
        """
        Sets the observed_time of this ControllerCounterGroup.
        End time for this collection as measured by the number of seconds since baseTime.

        :param observed_time: The observed_time of this ControllerCounterGroup.
        :type: int
        """
        self._observed_time = observed_time

    @property
    def cpu_utilization_stats(self):
        """
        Gets the cpu_utilization_stats of this ControllerCounterGroup.
        CPU utilization statistics structure.

        :return: The cpu_utilization_stats of this ControllerCounterGroup.
        :rtype: list[CpuUtilizationStats]
        :required/optional: required
        """
        return self._cpu_utilization_stats

    @cpu_utilization_stats.setter
    def cpu_utilization_stats(self, cpu_utilization_stats):
        """
        Sets the cpu_utilization_stats of this ControllerCounterGroup.
        CPU utilization statistics structure.

        :param cpu_utilization_stats: The cpu_utilization_stats of this ControllerCounterGroup.
        :type: list[CpuUtilizationStats]
        """
        self._cpu_utilization_stats = cpu_utilization_stats

    @property
    def total_iops_serviced(self):
        """
        Gets the total_iops_serviced of this ControllerCounterGroup.
        Total number of IO operations serviced by the controller.

        :return: The total_iops_serviced of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._total_iops_serviced

    @total_iops_serviced.setter
    def total_iops_serviced(self, total_iops_serviced):
        """
        Sets the total_iops_serviced of this ControllerCounterGroup.
        Total number of IO operations serviced by the controller.

        :param total_iops_serviced: The total_iops_serviced of this ControllerCounterGroup.
        :type: int
        """
        self._total_iops_serviced = total_iops_serviced

    @property
    def total_bytes_serviced(self):
        """
        Gets the total_bytes_serviced of this ControllerCounterGroup.
        Total number of Bytes serviced by the controller.

        :return: The total_bytes_serviced of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._total_bytes_serviced

    @total_bytes_serviced.setter
    def total_bytes_serviced(self, total_bytes_serviced):
        """
        Sets the total_bytes_serviced of this ControllerCounterGroup.
        Total number of Bytes serviced by the controller.

        :param total_bytes_serviced: The total_bytes_serviced of this ControllerCounterGroup.
        :type: int
        """
        self._total_bytes_serviced = total_bytes_serviced

    @property
    def cache_hits_iops_total(self):
        """
        Gets the cache_hits_iops_total of this ControllerCounterGroup.
        Total number of IO operations that hit cache.

        :return: The cache_hits_iops_total of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._cache_hits_iops_total

    @cache_hits_iops_total.setter
    def cache_hits_iops_total(self, cache_hits_iops_total):
        """
        Sets the cache_hits_iops_total of this ControllerCounterGroup.
        Total number of IO operations that hit cache.

        :param cache_hits_iops_total: The cache_hits_iops_total of this ControllerCounterGroup.
        :type: int
        """
        self._cache_hits_iops_total = cache_hits_iops_total

    @property
    def cache_hits_bytes_total(self):
        """
        Gets the cache_hits_bytes_total of this ControllerCounterGroup.
        Total number of bytes that hit cache.

        :return: The cache_hits_bytes_total of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._cache_hits_bytes_total

    @cache_hits_bytes_total.setter
    def cache_hits_bytes_total(self, cache_hits_bytes_total):
        """
        Sets the cache_hits_bytes_total of this ControllerCounterGroup.
        Total number of bytes that hit cache.

        :param cache_hits_bytes_total: The cache_hits_bytes_total of this ControllerCounterGroup.
        :type: int
        """
        self._cache_hits_bytes_total = cache_hits_bytes_total

    @property
    def random_ios_total(self):
        """
        Gets the random_ios_total of this ControllerCounterGroup.
        Total number of IOs that are categorized as random.

        :return: The random_ios_total of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._random_ios_total

    @random_ios_total.setter
    def random_ios_total(self, random_ios_total):
        """
        Sets the random_ios_total of this ControllerCounterGroup.
        Total number of IOs that are categorized as random.

        :param random_ios_total: The random_ios_total of this ControllerCounterGroup.
        :type: int
        """
        self._random_ios_total = random_ios_total

    @property
    def random_bytes_total(self):
        """
        Gets the random_bytes_total of this ControllerCounterGroup.
        Total number of Bytes that are categorized as random.

        :return: The random_bytes_total of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._random_bytes_total

    @random_bytes_total.setter
    def random_bytes_total(self, random_bytes_total):
        """
        Sets the random_bytes_total of this ControllerCounterGroup.
        Total number of Bytes that are categorized as random.

        :param random_bytes_total: The random_bytes_total of this ControllerCounterGroup.
        :type: int
        """
        self._random_bytes_total = random_bytes_total

    @property
    def read_iops_total(self):
        """
        Gets the read_iops_total of this ControllerCounterGroup.
        Total number of Read IO operations.

        :return: The read_iops_total of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_iops_total

    @read_iops_total.setter
    def read_iops_total(self, read_iops_total):
        """
        Sets the read_iops_total of this ControllerCounterGroup.
        Total number of Read IO operations.

        :param read_iops_total: The read_iops_total of this ControllerCounterGroup.
        :type: int
        """
        self._read_iops_total = read_iops_total

    @property
    def read_bytes_total(self):
        """
        Gets the read_bytes_total of this ControllerCounterGroup.
        Total number of Bytes read.

        :return: The read_bytes_total of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._read_bytes_total

    @read_bytes_total.setter
    def read_bytes_total(self, read_bytes_total):
        """
        Sets the read_bytes_total of this ControllerCounterGroup.
        Total number of Bytes read.

        :param read_bytes_total: The read_bytes_total of this ControllerCounterGroup.
        :type: int
        """
        self._read_bytes_total = read_bytes_total

    @property
    def write_iops_total(self):
        """
        Gets the write_iops_total of this ControllerCounterGroup.
        Total number of Write IO operations.

        :return: The write_iops_total of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_iops_total

    @write_iops_total.setter
    def write_iops_total(self, write_iops_total):
        """
        Sets the write_iops_total of this ControllerCounterGroup.
        Total number of Write IO operations.

        :param write_iops_total: The write_iops_total of this ControllerCounterGroup.
        :type: int
        """
        self._write_iops_total = write_iops_total

    @property
    def write_bytes_total(self):
        """
        Gets the write_bytes_total of this ControllerCounterGroup.
        Total number of Bytes written.

        :return: The write_bytes_total of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._write_bytes_total

    @write_bytes_total.setter
    def write_bytes_total(self, write_bytes_total):
        """
        Sets the write_bytes_total of this ControllerCounterGroup.
        Total number of Bytes written.

        :param write_bytes_total: The write_bytes_total of this ControllerCounterGroup.
        :type: int
        """
        self._write_bytes_total = write_bytes_total

    @property
    def mirror_iops_total(self):
        """
        Gets the mirror_iops_total of this ControllerCounterGroup.
        Total number of IO operations serviced by the controller that are characterized as cache mirroring related. If cache mirroring is disabled, this counter will not have any value.

        :return: The mirror_iops_total of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._mirror_iops_total

    @mirror_iops_total.setter
    def mirror_iops_total(self, mirror_iops_total):
        """
        Sets the mirror_iops_total of this ControllerCounterGroup.
        Total number of IO operations serviced by the controller that are characterized as cache mirroring related. If cache mirroring is disabled, this counter will not have any value.

        :param mirror_iops_total: The mirror_iops_total of this ControllerCounterGroup.
        :type: int
        """
        self._mirror_iops_total = mirror_iops_total

    @property
    def mirror_bytes_total(self):
        """
        Gets the mirror_bytes_total of this ControllerCounterGroup.
        Total number of Bytes serviced by the controller that are characterized as cache mirroring related. If cache mirroring is disabled, this counter will not have any value.

        :return: The mirror_bytes_total of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._mirror_bytes_total

    @mirror_bytes_total.setter
    def mirror_bytes_total(self, mirror_bytes_total):
        """
        Sets the mirror_bytes_total of this ControllerCounterGroup.
        Total number of Bytes serviced by the controller that are characterized as cache mirroring related. If cache mirroring is disabled, this counter will not have any value.

        :param mirror_bytes_total: The mirror_bytes_total of this ControllerCounterGroup.
        :type: int
        """
        self._mirror_bytes_total = mirror_bytes_total

    @property
    def full_stripe_writes_bytes(self):
        """
        Gets the full_stripe_writes_bytes of this ControllerCounterGroup.
        Bytes written that are categorized as Full stripe writes.

        :return: The full_stripe_writes_bytes of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._full_stripe_writes_bytes

    @full_stripe_writes_bytes.setter
    def full_stripe_writes_bytes(self, full_stripe_writes_bytes):
        """
        Sets the full_stripe_writes_bytes of this ControllerCounterGroup.
        Bytes written that are categorized as Full stripe writes.

        :param full_stripe_writes_bytes: The full_stripe_writes_bytes of this ControllerCounterGroup.
        :type: int
        """
        self._full_stripe_writes_bytes = full_stripe_writes_bytes

    @property
    def raid0_bytes_transferred(self):
        """
        Gets the raid0_bytes_transferred of this ControllerCounterGroup.
        Bytes transferred that are categorized as RAID 0 transfers.

        :return: The raid0_bytes_transferred of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._raid0_bytes_transferred

    @raid0_bytes_transferred.setter
    def raid0_bytes_transferred(self, raid0_bytes_transferred):
        """
        Sets the raid0_bytes_transferred of this ControllerCounterGroup.
        Bytes transferred that are categorized as RAID 0 transfers.

        :param raid0_bytes_transferred: The raid0_bytes_transferred of this ControllerCounterGroup.
        :type: int
        """
        self._raid0_bytes_transferred = raid0_bytes_transferred

    @property
    def raid1_bytes_transferred(self):
        """
        Gets the raid1_bytes_transferred of this ControllerCounterGroup.
        Bytes transferred that are categorized as RAID 1 transfers.

        :return: The raid1_bytes_transferred of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._raid1_bytes_transferred

    @raid1_bytes_transferred.setter
    def raid1_bytes_transferred(self, raid1_bytes_transferred):
        """
        Sets the raid1_bytes_transferred of this ControllerCounterGroup.
        Bytes transferred that are categorized as RAID 1 transfers.

        :param raid1_bytes_transferred: The raid1_bytes_transferred of this ControllerCounterGroup.
        :type: int
        """
        self._raid1_bytes_transferred = raid1_bytes_transferred

    @property
    def raid5_bytes_transferred(self):
        """
        Gets the raid5_bytes_transferred of this ControllerCounterGroup.
        Bytes transferred that are categorized as RAID 5 transfers.

        :return: The raid5_bytes_transferred of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._raid5_bytes_transferred

    @raid5_bytes_transferred.setter
    def raid5_bytes_transferred(self, raid5_bytes_transferred):
        """
        Sets the raid5_bytes_transferred of this ControllerCounterGroup.
        Bytes transferred that are categorized as RAID 5 transfers.

        :param raid5_bytes_transferred: The raid5_bytes_transferred of this ControllerCounterGroup.
        :type: int
        """
        self._raid5_bytes_transferred = raid5_bytes_transferred

    @property
    def raid6_bytes_transferred(self):
        """
        Gets the raid6_bytes_transferred of this ControllerCounterGroup.
        Bytes transferred that are categorized as RAID 6 transfers.

        :return: The raid6_bytes_transferred of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._raid6_bytes_transferred

    @raid6_bytes_transferred.setter
    def raid6_bytes_transferred(self, raid6_bytes_transferred):
        """
        Sets the raid6_bytes_transferred of this ControllerCounterGroup.
        Bytes transferred that are categorized as RAID 6 transfers.

        :param raid6_bytes_transferred: The raid6_bytes_transferred of this ControllerCounterGroup.
        :type: int
        """
        self._raid6_bytes_transferred = raid6_bytes_transferred

    @property
    def ddp_bytes_transferred(self):
        """
        Gets the ddp_bytes_transferred of this ControllerCounterGroup.
        Bytes transferred that are categorized as DDP transfers.

        :return: The ddp_bytes_transferred of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._ddp_bytes_transferred

    @ddp_bytes_transferred.setter
    def ddp_bytes_transferred(self, ddp_bytes_transferred):
        """
        Sets the ddp_bytes_transferred of this ControllerCounterGroup.
        Bytes transferred that are categorized as DDP transfers.

        :param ddp_bytes_transferred: The ddp_bytes_transferred of this ControllerCounterGroup.
        :type: int
        """
        self._ddp_bytes_transferred = ddp_bytes_transferred

    @property
    def max_possible_bps_under_current_load(self):
        """
        Gets the max_possible_bps_under_current_load of this ControllerCounterGroup.
        Theoretical maximum possible Bytes per second under current load.

        :return: The max_possible_bps_under_current_load of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._max_possible_bps_under_current_load

    @max_possible_bps_under_current_load.setter
    def max_possible_bps_under_current_load(self, max_possible_bps_under_current_load):
        """
        Sets the max_possible_bps_under_current_load of this ControllerCounterGroup.
        Theoretical maximum possible Bytes per second under current load.

        :param max_possible_bps_under_current_load: The max_possible_bps_under_current_load of this ControllerCounterGroup.
        :type: int
        """
        self._max_possible_bps_under_current_load = max_possible_bps_under_current_load

    @property
    def max_possible_iops_under_current_load(self):
        """
        Gets the max_possible_iops_under_current_load of this ControllerCounterGroup.
        Theoretical maximum possible IO per second under current load.

        :return: The max_possible_iops_under_current_load of this ControllerCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._max_possible_iops_under_current_load

    @max_possible_iops_under_current_load.setter
    def max_possible_iops_under_current_load(self, max_possible_iops_under_current_load):
        """
        Sets the max_possible_iops_under_current_load of this ControllerCounterGroup.
        Theoretical maximum possible IO per second under current load.

        :param max_possible_iops_under_current_load: The max_possible_iops_under_current_load of this ControllerCounterGroup.
        :type: int
        """
        self._max_possible_iops_under_current_load = max_possible_iops_under_current_load

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

