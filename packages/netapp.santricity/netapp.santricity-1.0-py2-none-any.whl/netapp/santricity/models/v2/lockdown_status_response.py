# coding: utf-8

"""
LockdownStatusResponse.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class LockdownStatusResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LockdownStatusResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_lockdown': 'bool',  # (required parameter)
            'storage_system_label': 'str',  
            'lockdown_type': 'str'
        }

        self.attribute_map = {
            'is_lockdown': 'isLockdown',  # (required parameter)
            'storage_system_label': 'storageSystemLabel',  
            'lockdown_type': 'lockdownType'
        }

        self._is_lockdown = None
        self._storage_system_label = None
        self._lockdown_type = None

    @property
    def is_lockdown(self):
        """
        Gets the is_lockdown of this LockdownStatusResponse.
        True if the storage system is in lockdown mode

        :return: The is_lockdown of this LockdownStatusResponse.
        :rtype: bool
        :required/optional: required
        """
        return self._is_lockdown

    @is_lockdown.setter
    def is_lockdown(self, is_lockdown):
        """
        Sets the is_lockdown of this LockdownStatusResponse.
        True if the storage system is in lockdown mode

        :param is_lockdown: The is_lockdown of this LockdownStatusResponse.
        :type: bool
        """
        self._is_lockdown = is_lockdown

    @property
    def storage_system_label(self):
        """
        Gets the storage_system_label of this LockdownStatusResponse.
        Storage system label provided by the user

        :return: The storage_system_label of this LockdownStatusResponse.
        :rtype: str
        :required/optional: optional
        """
        return self._storage_system_label

    @storage_system_label.setter
    def storage_system_label(self, storage_system_label):
        """
        Sets the storage_system_label of this LockdownStatusResponse.
        Storage system label provided by the user

        :param storage_system_label: The storage_system_label of this LockdownStatusResponse.
        :type: str
        """
        self._storage_system_label = storage_system_label

    @property
    def lockdown_type(self):
        """
        Gets the lockdown_type of this LockdownStatusResponse.
        Type of the storage systemLockdown

        :return: The lockdown_type of this LockdownStatusResponse.
        :rtype: str
        :required/optional: optional
        """
        return self._lockdown_type

    @lockdown_type.setter
    def lockdown_type(self, lockdown_type):
        """
        Sets the lockdown_type of this LockdownStatusResponse.
        Type of the storage systemLockdown

        :param lockdown_type: The lockdown_type of this LockdownStatusResponse.
        :type: str
        """
        self._lockdown_type = lockdown_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

