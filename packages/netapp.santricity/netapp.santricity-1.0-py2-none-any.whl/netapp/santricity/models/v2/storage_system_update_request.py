# coding: utf-8

"""
StorageSystemUpdateRequest.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class StorageSystemUpdateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StorageSystemUpdateRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'stored_password': 'str',  
            'meta_tags': 'list[KeyValue]',  
            'remove_all_tags': 'bool',  
            'enable_trace': 'bool',  
            'controller_addresses': 'list[str]'
        }

        self.attribute_map = {
            'stored_password': 'storedPassword',  
            'meta_tags': 'metaTags',  
            'remove_all_tags': 'removeAllTags',  
            'enable_trace': 'enableTrace',  
            'controller_addresses': 'controllerAddresses'
        }

        self._stored_password = None
        self._meta_tags = None
        self._remove_all_tags = None
        self._enable_trace = None
        self._controller_addresses = None

    @property
    def stored_password(self):
        """
        Gets the stored_password of this StorageSystemUpdateRequest.
        The new password for the storage system stored.      Note, this only updates the password stored on the proxy.      To update the password on the storage system itself (as well as the stored password) the use the passwords URL

        :return: The stored_password of this StorageSystemUpdateRequest.
        :rtype: str
        :required/optional: optional
        """
        return self._stored_password

    @stored_password.setter
    def stored_password(self, stored_password):
        """
        Sets the stored_password of this StorageSystemUpdateRequest.
        The new password for the storage system stored.      Note, this only updates the password stored on the proxy.      To update the password on the storage system itself (as well as the stored password) the use the passwords URL

        :param stored_password: The stored_password of this StorageSystemUpdateRequest.
        :type: str
        """
        self._stored_password = stored_password

    @property
    def meta_tags(self):
        """
        Gets the meta_tags of this StorageSystemUpdateRequest.
        Optional meta tags to associate to this storage system.      This must be a complete list.  If the list is empty or null, no action is taken.      If you want to just remove all tags, just set the removeAllTags boolean to true/      The removeAllTags will be processed before this new list is processed

        :return: The meta_tags of this StorageSystemUpdateRequest.
        :rtype: list[KeyValue]
        :required/optional: optional
        """
        return self._meta_tags

    @meta_tags.setter
    def meta_tags(self, meta_tags):
        """
        Sets the meta_tags of this StorageSystemUpdateRequest.
        Optional meta tags to associate to this storage system.      This must be a complete list.  If the list is empty or null, no action is taken.      If you want to just remove all tags, just set the removeAllTags boolean to true/      The removeAllTags will be processed before this new list is processed

        :param meta_tags: The meta_tags of this StorageSystemUpdateRequest.
        :type: list[KeyValue]
        """
        self._meta_tags = meta_tags

    @property
    def remove_all_tags(self):
        """
        Gets the remove_all_tags of this StorageSystemUpdateRequest.
        See the description for metaTags

        :return: The remove_all_tags of this StorageSystemUpdateRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._remove_all_tags

    @remove_all_tags.setter
    def remove_all_tags(self, remove_all_tags):
        """
        Sets the remove_all_tags of this StorageSystemUpdateRequest.
        See the description for metaTags

        :param remove_all_tags: The remove_all_tags of this StorageSystemUpdateRequest.
        :type: bool
        """
        self._remove_all_tags = remove_all_tags

    @property
    def enable_trace(self):
        """
        Gets the enable_trace of this StorageSystemUpdateRequest.
        Enable trace logging for SYMbol calls to the storage system.

        :return: The enable_trace of this StorageSystemUpdateRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._enable_trace

    @enable_trace.setter
    def enable_trace(self, enable_trace):
        """
        Sets the enable_trace of this StorageSystemUpdateRequest.
        Enable trace logging for SYMbol calls to the storage system.

        :param enable_trace: The enable_trace of this StorageSystemUpdateRequest.
        :type: bool
        """
        self._enable_trace = enable_trace

    @property
    def controller_addresses(self):
        """
        Gets the controller_addresses of this StorageSystemUpdateRequest.
        Replacement list of controller IP addresses or host names.

        :return: The controller_addresses of this StorageSystemUpdateRequest.
        :rtype: list[str]
        :required/optional: optional
        """
        return self._controller_addresses

    @controller_addresses.setter
    def controller_addresses(self, controller_addresses):
        """
        Sets the controller_addresses of this StorageSystemUpdateRequest.
        Replacement list of controller IP addresses or host names.

        :param controller_addresses: The controller_addresses of this StorageSystemUpdateRequest.
        :type: list[str]
        """
        self._controller_addresses = controller_addresses

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

