# coding: utf-8

"""
FirmwareCompatibilityResponse.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class FirmwareCompatibilityResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FirmwareCompatibilityResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'check_running': 'bool',  # (required parameter)
            'cancelled': 'bool',  # (required parameter)
            'last_start': 'datetime',  # (required parameter)
            'inaccessible_storage_devices': 'list[str]',  # (required parameter)
            'results': 'list[FirmwareCompatibilitySet]',  # (required parameter)
            'request_id': 'int',  # (required parameter)
            'failed_storage_devices': 'list[str]'
        }

        self.attribute_map = {
            'check_running': 'checkRunning',  # (required parameter)
            'cancelled': 'cancelled',  # (required parameter)
            'last_start': 'lastStart',  # (required parameter)
            'inaccessible_storage_devices': 'inaccessibleStorageDevices',  # (required parameter)
            'results': 'results',  # (required parameter)
            'request_id': 'requestId',  # (required parameter)
            'failed_storage_devices': 'failedStorageDevices'
        }

        self._check_running = None
        self._cancelled = None
        self._last_start = None
        self._inaccessible_storage_devices = None
        self._results = None
        self._request_id = None
        self._failed_storage_devices = None

    @property
    def check_running(self):
        """
        Gets the check_running of this FirmwareCompatibilityResponse.
        True if the compatibility check is currently running

        :return: The check_running of this FirmwareCompatibilityResponse.
        :rtype: bool
        :required/optional: required
        """
        return self._check_running

    @check_running.setter
    def check_running(self, check_running):
        """
        Sets the check_running of this FirmwareCompatibilityResponse.
        True if the compatibility check is currently running

        :param check_running: The check_running of this FirmwareCompatibilityResponse.
        :type: bool
        """
        self._check_running = check_running

    @property
    def cancelled(self):
        """
        Gets the cancelled of this FirmwareCompatibilityResponse.
        True if the check was cancelled by a user

        :return: The cancelled of this FirmwareCompatibilityResponse.
        :rtype: bool
        :required/optional: required
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """
        Sets the cancelled of this FirmwareCompatibilityResponse.
        True if the check was cancelled by a user

        :param cancelled: The cancelled of this FirmwareCompatibilityResponse.
        :type: bool
        """
        self._cancelled = cancelled

    @property
    def last_start(self):
        """
        Gets the last_start of this FirmwareCompatibilityResponse.
        The last time that a compatibility check was started, null if it has not been initiated yet

        :return: The last_start of this FirmwareCompatibilityResponse.
        :rtype: datetime
        :required/optional: required
        """
        return self._last_start

    @last_start.setter
    def last_start(self, last_start):
        """
        Sets the last_start of this FirmwareCompatibilityResponse.
        The last time that a compatibility check was started, null if it has not been initiated yet

        :param last_start: The last_start of this FirmwareCompatibilityResponse.
        :type: datetime
        """
        self._last_start = last_start

    @property
    def inaccessible_storage_devices(self):
        """
        Gets the inaccessible_storage_devices of this FirmwareCompatibilityResponse.
        The list of devices that could not be contacted

        :return: The inaccessible_storage_devices of this FirmwareCompatibilityResponse.
        :rtype: list[str]
        :required/optional: required
        """
        return self._inaccessible_storage_devices

    @inaccessible_storage_devices.setter
    def inaccessible_storage_devices(self, inaccessible_storage_devices):
        """
        Sets the inaccessible_storage_devices of this FirmwareCompatibilityResponse.
        The list of devices that could not be contacted

        :param inaccessible_storage_devices: The inaccessible_storage_devices of this FirmwareCompatibilityResponse.
        :type: list[str]
        """
        self._inaccessible_storage_devices = inaccessible_storage_devices

    @property
    def results(self):
        """
        Gets the results of this FirmwareCompatibilityResponse.
        The list of results

        :return: The results of this FirmwareCompatibilityResponse.
        :rtype: list[FirmwareCompatibilitySet]
        :required/optional: required
        """
        return self._results

    @results.setter
    def results(self, results):
        """
        Sets the results of this FirmwareCompatibilityResponse.
        The list of results

        :param results: The results of this FirmwareCompatibilityResponse.
        :type: list[FirmwareCompatibilitySet]
        """
        self._results = results

    @property
    def request_id(self):
        """
        Gets the request_id of this FirmwareCompatibilityResponse.
        The unique identifier for this request

        :return: The request_id of this FirmwareCompatibilityResponse.
        :rtype: int
        :required/optional: required
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this FirmwareCompatibilityResponse.
        The unique identifier for this request

        :param request_id: The request_id of this FirmwareCompatibilityResponse.
        :type: int
        """
        self._request_id = request_id

    @property
    def failed_storage_devices(self):
        """
        Gets the failed_storage_devices of this FirmwareCompatibilityResponse.
        The list of devices that the call failed on

        :return: The failed_storage_devices of this FirmwareCompatibilityResponse.
        :rtype: list[str]
        :required/optional: required
        """
        return self._failed_storage_devices

    @failed_storage_devices.setter
    def failed_storage_devices(self, failed_storage_devices):
        """
        Sets the failed_storage_devices of this FirmwareCompatibilityResponse.
        The list of devices that the call failed on

        :param failed_storage_devices: The failed_storage_devices of this FirmwareCompatibilityResponse.
        :type: list[str]
        """
        self._failed_storage_devices = failed_storage_devices

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

