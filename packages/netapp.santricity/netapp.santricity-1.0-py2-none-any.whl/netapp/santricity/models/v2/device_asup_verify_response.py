# coding: utf-8

"""
DeviceAsupVerifyResponse.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DeviceAsupVerifyResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DeviceAsupVerifyResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'successful': 'bool',  
            'error_message': 'str',  
            'aod_attempted': 'bool',  
            'aod_successful': 'bool',  
            'aod_error_message': 'str'
        }

        self.attribute_map = {
            'successful': 'successful',  
            'error_message': 'errorMessage',  
            'aod_attempted': 'aodAttempted',  
            'aod_successful': 'aodSuccessful',  
            'aod_error_message': 'aodErrorMessage'
        }

        self._successful = None
        self._error_message = None
        self._aod_attempted = None
        self._aod_successful = None
        self._aod_error_message = None

    @property
    def successful(self):
        """
        Gets the successful of this DeviceAsupVerifyResponse.
        Indicates if verification was successful

        :return: The successful of this DeviceAsupVerifyResponse.
        :rtype: bool
        :required/optional: optional
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """
        Sets the successful of this DeviceAsupVerifyResponse.
        Indicates if verification was successful

        :param successful: The successful of this DeviceAsupVerifyResponse.
        :type: bool
        """
        self._successful = successful

    @property
    def error_message(self):
        """
        Gets the error_message of this DeviceAsupVerifyResponse.
        Error message if verification failed

        :return: The error_message of this DeviceAsupVerifyResponse.
        :rtype: str
        :required/optional: optional
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this DeviceAsupVerifyResponse.
        Error message if verification failed

        :param error_message: The error_message of this DeviceAsupVerifyResponse.
        :type: str
        """
        self._error_message = error_message

    @property
    def aod_attempted(self):
        """
        Gets the aod_attempted of this DeviceAsupVerifyResponse.
        Indicates if AOD verification was attempted

        :return: The aod_attempted of this DeviceAsupVerifyResponse.
        :rtype: bool
        :required/optional: optional
        """
        return self._aod_attempted

    @aod_attempted.setter
    def aod_attempted(self, aod_attempted):
        """
        Sets the aod_attempted of this DeviceAsupVerifyResponse.
        Indicates if AOD verification was attempted

        :param aod_attempted: The aod_attempted of this DeviceAsupVerifyResponse.
        :type: bool
        """
        self._aod_attempted = aod_attempted

    @property
    def aod_successful(self):
        """
        Gets the aod_successful of this DeviceAsupVerifyResponse.
        Indicates if AOD verification was successful

        :return: The aod_successful of this DeviceAsupVerifyResponse.
        :rtype: bool
        :required/optional: optional
        """
        return self._aod_successful

    @aod_successful.setter
    def aod_successful(self, aod_successful):
        """
        Sets the aod_successful of this DeviceAsupVerifyResponse.
        Indicates if AOD verification was successful

        :param aod_successful: The aod_successful of this DeviceAsupVerifyResponse.
        :type: bool
        """
        self._aod_successful = aod_successful

    @property
    def aod_error_message(self):
        """
        Gets the aod_error_message of this DeviceAsupVerifyResponse.
        Error message if AOD verification failed

        :return: The aod_error_message of this DeviceAsupVerifyResponse.
        :rtype: str
        :required/optional: optional
        """
        return self._aod_error_message

    @aod_error_message.setter
    def aod_error_message(self, aod_error_message):
        """
        Sets the aod_error_message of this DeviceAsupVerifyResponse.
        Error message if AOD verification failed

        :param aod_error_message: The aod_error_message of this DeviceAsupVerifyResponse.
        :type: str
        """
        self._aod_error_message = aod_error_message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

