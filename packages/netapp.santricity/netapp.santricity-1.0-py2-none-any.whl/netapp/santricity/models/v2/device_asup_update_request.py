# coding: utf-8

"""
DeviceAsupUpdateRequest.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DeviceAsupUpdateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DeviceAsupUpdateRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'asup_enabled': 'bool',  
            'on_demand_enabled': 'bool',  
            'remote_diags_enabled': 'bool',  
            'delivery': 'DeviceAsupDelivery',  
            'schedule': 'DeviceAsupSchedule'
        }

        self.attribute_map = {
            'asup_enabled': 'asupEnabled',  
            'on_demand_enabled': 'onDemandEnabled',  
            'remote_diags_enabled': 'remoteDiagsEnabled',  
            'delivery': 'delivery',  
            'schedule': 'schedule'
        }

        self._asup_enabled = None
        self._on_demand_enabled = None
        self._remote_diags_enabled = None
        self._delivery = None
        self._schedule = None

    @property
    def asup_enabled(self):
        """
        Gets the asup_enabled of this DeviceAsupUpdateRequest.
        AutoSupoprt enabled or disabled

        :return: The asup_enabled of this DeviceAsupUpdateRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._asup_enabled

    @asup_enabled.setter
    def asup_enabled(self, asup_enabled):
        """
        Sets the asup_enabled of this DeviceAsupUpdateRequest.
        AutoSupoprt enabled or disabled

        :param asup_enabled: The asup_enabled of this DeviceAsupUpdateRequest.
        :type: bool
        """
        self._asup_enabled = asup_enabled

    @property
    def on_demand_enabled(self):
        """
        Gets the on_demand_enabled of this DeviceAsupUpdateRequest.
        ASUP OnDemand is enabled or disabled

        :return: The on_demand_enabled of this DeviceAsupUpdateRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._on_demand_enabled

    @on_demand_enabled.setter
    def on_demand_enabled(self, on_demand_enabled):
        """
        Sets the on_demand_enabled of this DeviceAsupUpdateRequest.
        ASUP OnDemand is enabled or disabled

        :param on_demand_enabled: The on_demand_enabled of this DeviceAsupUpdateRequest.
        :type: bool
        """
        self._on_demand_enabled = on_demand_enabled

    @property
    def remote_diags_enabled(self):
        """
        Gets the remote_diags_enabled of this DeviceAsupUpdateRequest.
        ASUP RemoteDiags is enabled or disabled

        :return: The remote_diags_enabled of this DeviceAsupUpdateRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._remote_diags_enabled

    @remote_diags_enabled.setter
    def remote_diags_enabled(self, remote_diags_enabled):
        """
        Sets the remote_diags_enabled of this DeviceAsupUpdateRequest.
        ASUP RemoteDiags is enabled or disabled

        :param remote_diags_enabled: The remote_diags_enabled of this DeviceAsupUpdateRequest.
        :type: bool
        """
        self._remote_diags_enabled = remote_diags_enabled

    @property
    def delivery(self):
        """
        Gets the delivery of this DeviceAsupUpdateRequest.
        ASUP delivery configuration

        :return: The delivery of this DeviceAsupUpdateRequest.
        :rtype: DeviceAsupDelivery
        :required/optional: optional
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """
        Sets the delivery of this DeviceAsupUpdateRequest.
        ASUP delivery configuration

        :param delivery: The delivery of this DeviceAsupUpdateRequest.
        :type: DeviceAsupDelivery
        """
        self._delivery = delivery

    @property
    def schedule(self):
        """
        Gets the schedule of this DeviceAsupUpdateRequest.
        ASUP schedule configuration

        :return: The schedule of this DeviceAsupUpdateRequest.
        :rtype: DeviceAsupSchedule
        :required/optional: optional
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this DeviceAsupUpdateRequest.
        ASUP schedule configuration

        :param schedule: The schedule of this DeviceAsupUpdateRequest.
        :type: DeviceAsupSchedule
        """
        self._schedule = schedule

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

