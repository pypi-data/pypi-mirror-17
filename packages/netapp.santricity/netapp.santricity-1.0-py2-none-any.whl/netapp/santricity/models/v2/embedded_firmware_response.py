# coding: utf-8

"""
EmbeddedFirmwareResponse.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class EmbeddedFirmwareResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EmbeddedFirmwareResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cfw_upgrade_ts': 'datetime',  # (required parameter)
            'iom_upgrade_ts': 'datetime',  # (required parameter)
            'drive_upgrade_ts': 'datetime',  # (required parameter)
            'cfw_log': 'list[LogRecord]',  # (required parameter)
            'iom_log': 'list[LogRecord]',  # (required parameter)
            'drive_log': 'list[LogRecord]'
        }

        self.attribute_map = {
            'cfw_upgrade_ts': 'cfwUpgradeTS',  # (required parameter)
            'iom_upgrade_ts': 'iomUpgradeTS',  # (required parameter)
            'drive_upgrade_ts': 'driveUpgradeTS',  # (required parameter)
            'cfw_log': 'cfwLog',  # (required parameter)
            'iom_log': 'iomLog',  # (required parameter)
            'drive_log': 'driveLog'
        }

        self._cfw_upgrade_ts = None
        self._iom_upgrade_ts = None
        self._drive_upgrade_ts = None
        self._cfw_log = None
        self._iom_log = None
        self._drive_log = None

    @property
    def cfw_upgrade_ts(self):
        """
        Gets the cfw_upgrade_ts of this EmbeddedFirmwareResponse.
        Timestamp of the last successful controller firmware upgrade

        :return: The cfw_upgrade_ts of this EmbeddedFirmwareResponse.
        :rtype: datetime
        :required/optional: required
        """
        return self._cfw_upgrade_ts

    @cfw_upgrade_ts.setter
    def cfw_upgrade_ts(self, cfw_upgrade_ts):
        """
        Sets the cfw_upgrade_ts of this EmbeddedFirmwareResponse.
        Timestamp of the last successful controller firmware upgrade

        :param cfw_upgrade_ts: The cfw_upgrade_ts of this EmbeddedFirmwareResponse.
        :type: datetime
        """
        self._cfw_upgrade_ts = cfw_upgrade_ts

    @property
    def iom_upgrade_ts(self):
        """
        Gets the iom_upgrade_ts of this EmbeddedFirmwareResponse.
        Timestamp of the last successful iom firmware upgrade

        :return: The iom_upgrade_ts of this EmbeddedFirmwareResponse.
        :rtype: datetime
        :required/optional: required
        """
        return self._iom_upgrade_ts

    @iom_upgrade_ts.setter
    def iom_upgrade_ts(self, iom_upgrade_ts):
        """
        Sets the iom_upgrade_ts of this EmbeddedFirmwareResponse.
        Timestamp of the last successful iom firmware upgrade

        :param iom_upgrade_ts: The iom_upgrade_ts of this EmbeddedFirmwareResponse.
        :type: datetime
        """
        self._iom_upgrade_ts = iom_upgrade_ts

    @property
    def drive_upgrade_ts(self):
        """
        Gets the drive_upgrade_ts of this EmbeddedFirmwareResponse.
        Timestamp of the last successful drive firmware upgrade

        :return: The drive_upgrade_ts of this EmbeddedFirmwareResponse.
        :rtype: datetime
        :required/optional: required
        """
        return self._drive_upgrade_ts

    @drive_upgrade_ts.setter
    def drive_upgrade_ts(self, drive_upgrade_ts):
        """
        Sets the drive_upgrade_ts of this EmbeddedFirmwareResponse.
        Timestamp of the last successful drive firmware upgrade

        :param drive_upgrade_ts: The drive_upgrade_ts of this EmbeddedFirmwareResponse.
        :type: datetime
        """
        self._drive_upgrade_ts = drive_upgrade_ts

    @property
    def cfw_log(self):
        """
        Gets the cfw_log of this EmbeddedFirmwareResponse.
        Array of log records of controller firmware upgrades

        :return: The cfw_log of this EmbeddedFirmwareResponse.
        :rtype: list[LogRecord]
        :required/optional: required
        """
        return self._cfw_log

    @cfw_log.setter
    def cfw_log(self, cfw_log):
        """
        Sets the cfw_log of this EmbeddedFirmwareResponse.
        Array of log records of controller firmware upgrades

        :param cfw_log: The cfw_log of this EmbeddedFirmwareResponse.
        :type: list[LogRecord]
        """
        self._cfw_log = cfw_log

    @property
    def iom_log(self):
        """
        Gets the iom_log of this EmbeddedFirmwareResponse.
        Array of log records of iom firmware upgrades

        :return: The iom_log of this EmbeddedFirmwareResponse.
        :rtype: list[LogRecord]
        :required/optional: required
        """
        return self._iom_log

    @iom_log.setter
    def iom_log(self, iom_log):
        """
        Sets the iom_log of this EmbeddedFirmwareResponse.
        Array of log records of iom firmware upgrades

        :param iom_log: The iom_log of this EmbeddedFirmwareResponse.
        :type: list[LogRecord]
        """
        self._iom_log = iom_log

    @property
    def drive_log(self):
        """
        Gets the drive_log of this EmbeddedFirmwareResponse.
        Array of log records drive firmware upgrades

        :return: The drive_log of this EmbeddedFirmwareResponse.
        :rtype: list[LogRecord]
        :required/optional: required
        """
        return self._drive_log

    @drive_log.setter
    def drive_log(self, drive_log):
        """
        Sets the drive_log of this EmbeddedFirmwareResponse.
        Array of log records drive firmware upgrades

        :param drive_log: The drive_log of this EmbeddedFirmwareResponse.
        :type: list[LogRecord]
        """
        self._drive_log = drive_log

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

