# coding: utf-8

"""
SnapshotGroupUpdateRequest.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class SnapshotGroupUpdateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SnapshotGroupUpdateRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',  
            'warning_threshold': 'int',  
            'auto_delete_limit': 'int',  
            'full_policy': 'str',  
            'rollback_priority': 'str'
        }

        self.attribute_map = {
            'name': 'name',  
            'warning_threshold': 'warningThreshold',  
            'auto_delete_limit': 'autoDeleteLimit',  
            'full_policy': 'fullPolicy',  
            'rollback_priority': 'rollbackPriority'
        }

        self._name = None
        self._warning_threshold = None
        self._auto_delete_limit = None
        self._full_policy = None
        self._rollback_priority = None

    @property
    def name(self):
        """
        Gets the name of this SnapshotGroupUpdateRequest.
        The name of the new snapshot group.

        :return: The name of this SnapshotGroupUpdateRequest.
        :rtype: str
        :required/optional: optional
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SnapshotGroupUpdateRequest.
        The name of the new snapshot group.

        :param name: The name of this SnapshotGroupUpdateRequest.
        :type: str
        """
        self._name = name

    @property
    def warning_threshold(self):
        """
        Gets the warning_threshold of this SnapshotGroupUpdateRequest.
        The repository utilization warning threshold, as a percentage of the      repository volume capacity.

        :return: The warning_threshold of this SnapshotGroupUpdateRequest.
        :rtype: int
        :required/optional: optional
        """
        return self._warning_threshold

    @warning_threshold.setter
    def warning_threshold(self, warning_threshold):
        """
        Sets the warning_threshold of this SnapshotGroupUpdateRequest.
        The repository utilization warning threshold, as a percentage of the      repository volume capacity.

        :param warning_threshold: The warning_threshold of this SnapshotGroupUpdateRequest.
        :type: int
        """
        self._warning_threshold = warning_threshold

    @property
    def auto_delete_limit(self):
        """
        Gets the auto_delete_limit of this SnapshotGroupUpdateRequest.
        The automatic deletion indicator. If non-zero, the oldest snapshot      image will be automatically deleted when creating a new snapshot image to keep the total      number of snapshot images limited to the number specified.

        :return: The auto_delete_limit of this SnapshotGroupUpdateRequest.
        :rtype: int
        :required/optional: optional
        """
        return self._auto_delete_limit

    @auto_delete_limit.setter
    def auto_delete_limit(self, auto_delete_limit):
        """
        Sets the auto_delete_limit of this SnapshotGroupUpdateRequest.
        The automatic deletion indicator. If non-zero, the oldest snapshot      image will be automatically deleted when creating a new snapshot image to keep the total      number of snapshot images limited to the number specified.

        :param auto_delete_limit: The auto_delete_limit of this SnapshotGroupUpdateRequest.
        :type: int
        """
        self._auto_delete_limit = auto_delete_limit

    @property
    def full_policy(self):
        """
        Gets the full_policy of this SnapshotGroupUpdateRequest.
        The behavior on when the data repository becomes full. This value      is overridden by consistency group setting if this snapshot group is associated with a      consistency group.

        :return: The full_policy of this SnapshotGroupUpdateRequest.
        :rtype: str
        :required/optional: optional
        """
        return self._full_policy

    @full_policy.setter
    def full_policy(self, full_policy):
        """
        Sets the full_policy of this SnapshotGroupUpdateRequest.
        The behavior on when the data repository becomes full. This value      is overridden by consistency group setting if this snapshot group is associated with a      consistency group.

        :param full_policy: The full_policy of this SnapshotGroupUpdateRequest.
        :type: str
        """
        allowed_values = ["unknown", "failbasewrites", "purgepit", "__UNDEFINED"]
        if full_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `full_policy`, must be one of {0}"
                .format(allowed_values)
            )
        self._full_policy = full_policy

    @property
    def rollback_priority(self):
        """
        Gets the rollback_priority of this SnapshotGroupUpdateRequest.
        The importance of the rollback operation. This value is overridden by consistency group setting if this snapshot group is associated with a consistency group.

        :return: The rollback_priority of this SnapshotGroupUpdateRequest.
        :rtype: str
        :required/optional: optional
        """
        return self._rollback_priority

    @rollback_priority.setter
    def rollback_priority(self, rollback_priority):
        """
        Sets the rollback_priority of this SnapshotGroupUpdateRequest.
        The importance of the rollback operation. This value is overridden by consistency group setting if this snapshot group is associated with a consistency group.

        :param rollback_priority: The rollback_priority of this SnapshotGroupUpdateRequest.
        :type: str
        """
        allowed_values = ["highest", "high", "medium", "low", "lowest", "__UNDEFINED"]
        if rollback_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `rollback_priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._rollback_priority = rollback_priority

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

