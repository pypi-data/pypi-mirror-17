# coding: utf-8

"""
DeviceAsupDelivery.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DeviceAsupDelivery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DeviceAsupDelivery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'method': 'str',  # (required parameter)
            'routing_type': 'str',  
            'proxy_host': 'str',  
            'proxy_port': 'int',  
            'proxy_user_name': 'str',  
            'proxy_password': 'str',  
            'proxy_script': 'str',  
            'mail_relay_server': 'str',  
            'mail_sender_address': 'str'
        }

        self.attribute_map = {
            'method': 'method',  # (required parameter)
            'routing_type': 'routingType',  
            'proxy_host': 'proxyHost',  
            'proxy_port': 'proxyPort',  
            'proxy_user_name': 'proxyUserName',  
            'proxy_password': 'proxyPassword',  
            'proxy_script': 'proxyScript',  
            'mail_relay_server': 'mailRelayServer',  
            'mail_sender_address': 'mailSenderAddress'
        }

        self._method = None
        self._routing_type = None
        self._proxy_host = None
        self._proxy_port = None
        self._proxy_user_name = None
        self._proxy_password = None
        self._proxy_script = None
        self._mail_relay_server = None
        self._mail_sender_address = None

    @property
    def method(self):
        """
        Gets the method of this DeviceAsupDelivery.
        ASUP delivery method

        :return: The method of this DeviceAsupDelivery.
        :rtype: str
        :required/optional: required
        """
        return self._method

    @method.setter
    def method(self, method):
        """
        Sets the method of this DeviceAsupDelivery.
        ASUP delivery method

        :param method: The method of this DeviceAsupDelivery.
        :type: str
        """
        allowed_values = ["https", "http", "smtp"]
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method`, must be one of {0}"
                .format(allowed_values)
            )
        self._method = method

    @property
    def routing_type(self):
        """
        Gets the routing_type of this DeviceAsupDelivery.
        ASUP routing type

        :return: The routing_type of this DeviceAsupDelivery.
        :rtype: str
        :required/optional: optional
        """
        return self._routing_type

    @routing_type.setter
    def routing_type(self, routing_type):
        """
        Sets the routing_type of this DeviceAsupDelivery.
        ASUP routing type

        :param routing_type: The routing_type of this DeviceAsupDelivery.
        :type: str
        """
        allowed_values = ["none", "direct", "proxyServer", "proxyScript"]
        if routing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `routing_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._routing_type = routing_type

    @property
    def proxy_host(self):
        """
        Gets the proxy_host of this DeviceAsupDelivery.
        ASUP proxy host

        :return: The proxy_host of this DeviceAsupDelivery.
        :rtype: str
        :required/optional: optional
        """
        return self._proxy_host

    @proxy_host.setter
    def proxy_host(self, proxy_host):
        """
        Sets the proxy_host of this DeviceAsupDelivery.
        ASUP proxy host

        :param proxy_host: The proxy_host of this DeviceAsupDelivery.
        :type: str
        """
        self._proxy_host = proxy_host

    @property
    def proxy_port(self):
        """
        Gets the proxy_port of this DeviceAsupDelivery.
        ASUP proxy port

        :return: The proxy_port of this DeviceAsupDelivery.
        :rtype: int
        :required/optional: optional
        """
        return self._proxy_port

    @proxy_port.setter
    def proxy_port(self, proxy_port):
        """
        Sets the proxy_port of this DeviceAsupDelivery.
        ASUP proxy port

        :param proxy_port: The proxy_port of this DeviceAsupDelivery.
        :type: int
        """
        self._proxy_port = proxy_port

    @property
    def proxy_user_name(self):
        """
        Gets the proxy_user_name of this DeviceAsupDelivery.
        ASUP proxy user name

        :return: The proxy_user_name of this DeviceAsupDelivery.
        :rtype: str
        :required/optional: optional
        """
        return self._proxy_user_name

    @proxy_user_name.setter
    def proxy_user_name(self, proxy_user_name):
        """
        Sets the proxy_user_name of this DeviceAsupDelivery.
        ASUP proxy user name

        :param proxy_user_name: The proxy_user_name of this DeviceAsupDelivery.
        :type: str
        """
        self._proxy_user_name = proxy_user_name

    @property
    def proxy_password(self):
        """
        Gets the proxy_password of this DeviceAsupDelivery.
        ASUP proxy password

        :return: The proxy_password of this DeviceAsupDelivery.
        :rtype: str
        :required/optional: optional
        """
        return self._proxy_password

    @proxy_password.setter
    def proxy_password(self, proxy_password):
        """
        Sets the proxy_password of this DeviceAsupDelivery.
        ASUP proxy password

        :param proxy_password: The proxy_password of this DeviceAsupDelivery.
        :type: str
        """
        self._proxy_password = proxy_password

    @property
    def proxy_script(self):
        """
        Gets the proxy_script of this DeviceAsupDelivery.
        ASUP proxy PAC script

        :return: The proxy_script of this DeviceAsupDelivery.
        :rtype: str
        :required/optional: optional
        """
        return self._proxy_script

    @proxy_script.setter
    def proxy_script(self, proxy_script):
        """
        Sets the proxy_script of this DeviceAsupDelivery.
        ASUP proxy PAC script

        :param proxy_script: The proxy_script of this DeviceAsupDelivery.
        :type: str
        """
        self._proxy_script = proxy_script

    @property
    def mail_relay_server(self):
        """
        Gets the mail_relay_server of this DeviceAsupDelivery.
        ASUP e-mail relay server

        :return: The mail_relay_server of this DeviceAsupDelivery.
        :rtype: str
        :required/optional: optional
        """
        return self._mail_relay_server

    @mail_relay_server.setter
    def mail_relay_server(self, mail_relay_server):
        """
        Sets the mail_relay_server of this DeviceAsupDelivery.
        ASUP e-mail relay server

        :param mail_relay_server: The mail_relay_server of this DeviceAsupDelivery.
        :type: str
        """
        self._mail_relay_server = mail_relay_server

    @property
    def mail_sender_address(self):
        """
        Gets the mail_sender_address of this DeviceAsupDelivery.
        ASUP e-mail sender address

        :return: The mail_sender_address of this DeviceAsupDelivery.
        :rtype: str
        :required/optional: optional
        """
        return self._mail_sender_address

    @mail_sender_address.setter
    def mail_sender_address(self, mail_sender_address):
        """
        Sets the mail_sender_address of this DeviceAsupDelivery.
        ASUP e-mail sender address

        :param mail_sender_address: The mail_sender_address of this DeviceAsupDelivery.
        :type: str
        """
        self._mail_sender_address = mail_sender_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

