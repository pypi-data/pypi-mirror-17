# coding: utf-8

"""
DiscoveryStartRequest.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DiscoveryStartRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DiscoveryStartRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'start_ip': 'str',  # (required parameter)
            'end_ip': 'str',  # (required parameter)
            'use_agents': 'bool',  
            'connection_timeout': 'int',  
            'max_ports_to_use': 'int'
        }

        self.attribute_map = {
            'start_ip': 'startIP',  # (required parameter)
            'end_ip': 'endIP',  # (required parameter)
            'use_agents': 'useAgents',  
            'connection_timeout': 'connectionTimeout',  
            'max_ports_to_use': 'maxPortsToUse'
        }

        self._start_ip = None
        self._end_ip = None
        self._use_agents = None
        self._connection_timeout = None
        self._max_ports_to_use = None

    @property
    def start_ip(self):
        """
        Gets the start_ip of this DiscoveryStartRequest.
        Starting IP address

        :return: The start_ip of this DiscoveryStartRequest.
        :rtype: str
        :required/optional: required
        """
        return self._start_ip

    @start_ip.setter
    def start_ip(self, start_ip):
        """
        Sets the start_ip of this DiscoveryStartRequest.
        Starting IP address

        :param start_ip: The start_ip of this DiscoveryStartRequest.
        :type: str
        """
        self._start_ip = start_ip

    @property
    def end_ip(self):
        """
        Gets the end_ip of this DiscoveryStartRequest.
        Ending IP Address

        :return: The end_ip of this DiscoveryStartRequest.
        :rtype: str
        :required/optional: required
        """
        return self._end_ip

    @end_ip.setter
    def end_ip(self, end_ip):
        """
        Sets the end_ip of this DiscoveryStartRequest.
        Ending IP Address

        :param end_ip: The end_ip of this DiscoveryStartRequest.
        :type: str
        """
        self._end_ip = end_ip

    @property
    def use_agents(self):
        """
        Gets the use_agents of this DiscoveryStartRequest.
        In-band management agents will be queried if this value is true.      If you are not sure, its best to leave this as default

        :return: The use_agents of this DiscoveryStartRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._use_agents

    @use_agents.setter
    def use_agents(self, use_agents):
        """
        Sets the use_agents of this DiscoveryStartRequest.
        In-band management agents will be queried if this value is true.      If you are not sure, its best to leave this as default

        :param use_agents: The use_agents of this DiscoveryStartRequest.
        :type: bool
        """
        self._use_agents = use_agents

    @property
    def connection_timeout(self):
        """
        Gets the connection_timeout of this DiscoveryStartRequest.
        Optional parameter.  This defaults to 30 seconds.  Longer times may be needed for      WAN discoveries, but will slow down the whole process.  Shorter times speed up the process.      This is only the timeout value for the initial TCP connection

        :return: The connection_timeout of this DiscoveryStartRequest.
        :rtype: int
        :required/optional: optional
        """
        return self._connection_timeout

    @connection_timeout.setter
    def connection_timeout(self, connection_timeout):
        """
        Sets the connection_timeout of this DiscoveryStartRequest.
        Optional parameter.  This defaults to 30 seconds.  Longer times may be needed for      WAN discoveries, but will slow down the whole process.  Shorter times speed up the process.      This is only the timeout value for the initial TCP connection

        :param connection_timeout: The connection_timeout of this DiscoveryStartRequest.
        :type: int
        """
        self._connection_timeout = connection_timeout

    @property
    def max_ports_to_use(self):
        """
        Gets the max_ports_to_use of this DiscoveryStartRequest.
        Number of ports to use for discovery.  A port is a file handler in most operating systems.      Watch your ULimits.  More ports the faster discovery goes. But, for example, windows only has a      few thousand available ports.  If file handlers are exceeded, then this process will adjust down but      other processes on the server may be affected as well as client connections

        :return: The max_ports_to_use of this DiscoveryStartRequest.
        :rtype: int
        :required/optional: optional
        """
        return self._max_ports_to_use

    @max_ports_to_use.setter
    def max_ports_to_use(self, max_ports_to_use):
        """
        Sets the max_ports_to_use of this DiscoveryStartRequest.
        Number of ports to use for discovery.  A port is a file handler in most operating systems.      Watch your ULimits.  More ports the faster discovery goes. But, for example, windows only has a      few thousand available ports.  If file handlers are exceeded, then this process will adjust down but      other processes on the server may be affected as well as client connections

        :param max_ports_to_use: The max_ports_to_use of this DiscoveryStartRequest.
        :type: int
        """
        self._max_ports_to_use = max_ports_to_use

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

