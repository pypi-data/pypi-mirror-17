# coding: utf-8

"""
HealthCheckFailureResponse.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class HealthCheckFailureResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HealthCheckFailureResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'error_message': 'str',  # (required parameter)
            'localized_message': 'str',  # (required parameter)
            'retcode': 'str',  # (required parameter)
            'code_type': 'str',  # (required parameter)
            'invalid_fields_if_known': 'list[str]',  # (required parameter)
            'request_id': 'int',  
            'result': 'CfwUpgradeResponse'
        }

        self.attribute_map = {
            'error_message': 'errorMessage',  # (required parameter)
            'localized_message': 'localizedMessage',  # (required parameter)
            'retcode': 'retcode',  # (required parameter)
            'code_type': 'codeType',  # (required parameter)
            'invalid_fields_if_known': 'invalidFieldsIfKnown',  # (required parameter)
            'request_id': 'requestId',  
            'result': 'result'
        }

        self._error_message = None
        self._localized_message = None
        self._retcode = None
        self._code_type = None
        self._invalid_fields_if_known = None
        self._request_id = None
        self._result = None

    @property
    def error_message(self):
        """
        Gets the error_message of this HealthCheckFailureResponse.


        :return: The error_message of this HealthCheckFailureResponse.
        :rtype: str
        :required/optional: required
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this HealthCheckFailureResponse.


        :param error_message: The error_message of this HealthCheckFailureResponse.
        :type: str
        """
        self._error_message = error_message

    @property
    def localized_message(self):
        """
        Gets the localized_message of this HealthCheckFailureResponse.


        :return: The localized_message of this HealthCheckFailureResponse.
        :rtype: str
        :required/optional: required
        """
        return self._localized_message

    @localized_message.setter
    def localized_message(self, localized_message):
        """
        Sets the localized_message of this HealthCheckFailureResponse.


        :param localized_message: The localized_message of this HealthCheckFailureResponse.
        :type: str
        """
        self._localized_message = localized_message

    @property
    def retcode(self):
        """
        Gets the retcode of this HealthCheckFailureResponse.
        The value of retcode can vary by the code type.  To be unique, it must be combined with code type.      It is a string.  Even if the returned value looks like a number, don't assume its a number.      It is a short label that will not change based on Internationalization.

        :return: The retcode of this HealthCheckFailureResponse.
        :rtype: str
        :required/optional: required
        """
        return self._retcode

    @retcode.setter
    def retcode(self, retcode):
        """
        Sets the retcode of this HealthCheckFailureResponse.
        The value of retcode can vary by the code type.  To be unique, it must be combined with code type.      It is a string.  Even if the returned value looks like a number, don't assume its a number.      It is a short label that will not change based on Internationalization.

        :param retcode: The retcode of this HealthCheckFailureResponse.
        :type: str
        """
        self._retcode = retcode

    @property
    def code_type(self):
        """
        Gets the code_type of this HealthCheckFailureResponse.


        :return: The code_type of this HealthCheckFailureResponse.
        :rtype: str
        :required/optional: required
        """
        return self._code_type

    @code_type.setter
    def code_type(self, code_type):
        """
        Sets the code_type of this HealthCheckFailureResponse.


        :param code_type: The code_type of this HealthCheckFailureResponse.
        :type: str
        """
        allowed_values = ["symbol", "webservice", "systemerror", "devicemgrerror"]
        if code_type not in allowed_values:
            raise ValueError(
                "Invalid value for `code_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._code_type = code_type

    @property
    def invalid_fields_if_known(self):
        """
        Gets the invalid_fields_if_known of this HealthCheckFailureResponse.


        :return: The invalid_fields_if_known of this HealthCheckFailureResponse.
        :rtype: list[str]
        :required/optional: required
        """
        return self._invalid_fields_if_known

    @invalid_fields_if_known.setter
    def invalid_fields_if_known(self, invalid_fields_if_known):
        """
        Sets the invalid_fields_if_known of this HealthCheckFailureResponse.


        :param invalid_fields_if_known: The invalid_fields_if_known of this HealthCheckFailureResponse.
        :type: list[str]
        """
        self._invalid_fields_if_known = invalid_fields_if_known

    @property
    def request_id(self):
        """
        Gets the request_id of this HealthCheckFailureResponse.


        :return: The request_id of this HealthCheckFailureResponse.
        :rtype: int
        :required/optional: optional
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this HealthCheckFailureResponse.


        :param request_id: The request_id of this HealthCheckFailureResponse.
        :type: int
        """
        self._request_id = request_id

    @property
    def result(self):
        """
        Gets the result of this HealthCheckFailureResponse.


        :return: The result of this HealthCheckFailureResponse.
        :rtype: CfwUpgradeResponse
        :required/optional: optional
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this HealthCheckFailureResponse.


        :param result: The result of this HealthCheckFailureResponse.
        :type: CfwUpgradeResponse
        """
        self._result = result

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

