# coding: utf-8

"""
CreateConsistencyGroupSnapshotViewRequest.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class CreateConsistencyGroupSnapshotViewRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CreateConsistencyGroupSnapshotViewRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',  # (required parameter)
            'repository_pool_id': 'str',  
            'pit_id': 'str',  
            'pit_sequence_number': 'int',  
            'access_mode': 'str',  
            'repository_percent': 'float',  
            'scan_media': 'bool',  
            'validate_parity': 'bool'
        }

        self.attribute_map = {
            'name': 'name',  # (required parameter)
            'repository_pool_id': 'repositoryPoolId',  
            'pit_id': 'pitId',  
            'pit_sequence_number': 'pitSequenceNumber',  
            'access_mode': 'accessMode',  
            'repository_percent': 'repositoryPercent',  
            'scan_media': 'scanMedia',  
            'validate_parity': 'validateParity'
        }

        self._name = None
        self._repository_pool_id = None
        self._pit_id = None
        self._pit_sequence_number = None
        self._access_mode = None
        self._repository_percent = None
        self._scan_media = None
        self._validate_parity = None

    @property
    def name(self):
        """
        Gets the name of this CreateConsistencyGroupSnapshotViewRequest.


        :return: The name of this CreateConsistencyGroupSnapshotViewRequest.
        :rtype: str
        :required/optional: required
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateConsistencyGroupSnapshotViewRequest.


        :param name: The name of this CreateConsistencyGroupSnapshotViewRequest.
        :type: str
        """
        self._name = name

    @property
    def repository_pool_id(self):
        """
        Gets the repository_pool_id of this CreateConsistencyGroupSnapshotViewRequest.
        The reference to the pool that will be used for the repository creation.

        :return: The repository_pool_id of this CreateConsistencyGroupSnapshotViewRequest.
        :rtype: str
        :required/optional: optional
        """
        return self._repository_pool_id

    @repository_pool_id.setter
    def repository_pool_id(self, repository_pool_id):
        """
        Sets the repository_pool_id of this CreateConsistencyGroupSnapshotViewRequest.
        The reference to the pool that will be used for the repository creation.

        :param repository_pool_id: The repository_pool_id of this CreateConsistencyGroupSnapshotViewRequest.
        :type: str
        """
        self._repository_pool_id = repository_pool_id

    @property
    def pit_id(self):
        """
        Gets the pit_id of this CreateConsistencyGroupSnapshotViewRequest.
        The id of the PIT to create a View for. Either the pitSequenceNumber or a pitId is required.

        :return: The pit_id of this CreateConsistencyGroupSnapshotViewRequest.
        :rtype: str
        :required/optional: optional
        """
        return self._pit_id

    @pit_id.setter
    def pit_id(self, pit_id):
        """
        Sets the pit_id of this CreateConsistencyGroupSnapshotViewRequest.
        The id of the PIT to create a View for. Either the pitSequenceNumber or a pitId is required.

        :param pit_id: The pit_id of this CreateConsistencyGroupSnapshotViewRequest.
        :type: str
        """
        self._pit_id = pit_id

    @property
    def pit_sequence_number(self):
        """
        Gets the pit_sequence_number of this CreateConsistencyGroupSnapshotViewRequest.
        The sequence number of the PITs to create Views for. Either the pitSequenceNumber or a pitId is required.

        :return: The pit_sequence_number of this CreateConsistencyGroupSnapshotViewRequest.
        :rtype: int
        :required/optional: optional
        """
        return self._pit_sequence_number

    @pit_sequence_number.setter
    def pit_sequence_number(self, pit_sequence_number):
        """
        Sets the pit_sequence_number of this CreateConsistencyGroupSnapshotViewRequest.
        The sequence number of the PITs to create Views for. Either the pitSequenceNumber or a pitId is required.

        :param pit_sequence_number: The pit_sequence_number of this CreateConsistencyGroupSnapshotViewRequest.
        :type: int
        """
        self._pit_sequence_number = pit_sequence_number

    @property
    def access_mode(self):
        """
        Gets the access_mode of this CreateConsistencyGroupSnapshotViewRequest.
        The access mode determines whether or not a repository volume should be created.

        :return: The access_mode of this CreateConsistencyGroupSnapshotViewRequest.
        :rtype: str
        :required/optional: optional
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """
        Sets the access_mode of this CreateConsistencyGroupSnapshotViewRequest.
        The access mode determines whether or not a repository volume should be created.

        :param access_mode: The access_mode of this CreateConsistencyGroupSnapshotViewRequest.
        :type: str
        """
        allowed_values = ["modeUnknown", "readWrite", "readOnly", "__UNDEFINED"]
        if access_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `access_mode`, must be one of {0}"
                .format(allowed_values)
            )
        self._access_mode = access_mode

    @property
    def repository_percent(self):
        """
        Gets the repository_percent of this CreateConsistencyGroupSnapshotViewRequest.


        :return: The repository_percent of this CreateConsistencyGroupSnapshotViewRequest.
        :rtype: float
        :required/optional: optional
        """
        return self._repository_percent

    @repository_percent.setter
    def repository_percent(self, repository_percent):
        """
        Sets the repository_percent of this CreateConsistencyGroupSnapshotViewRequest.


        :param repository_percent: The repository_percent of this CreateConsistencyGroupSnapshotViewRequest.
        :type: float
        """
        self._repository_percent = repository_percent

    @property
    def scan_media(self):
        """
        Gets the scan_media of this CreateConsistencyGroupSnapshotViewRequest.


        :return: The scan_media of this CreateConsistencyGroupSnapshotViewRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._scan_media

    @scan_media.setter
    def scan_media(self, scan_media):
        """
        Sets the scan_media of this CreateConsistencyGroupSnapshotViewRequest.


        :param scan_media: The scan_media of this CreateConsistencyGroupSnapshotViewRequest.
        :type: bool
        """
        self._scan_media = scan_media

    @property
    def validate_parity(self):
        """
        Gets the validate_parity of this CreateConsistencyGroupSnapshotViewRequest.


        :return: The validate_parity of this CreateConsistencyGroupSnapshotViewRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._validate_parity

    @validate_parity.setter
    def validate_parity(self, validate_parity):
        """
        Sets the validate_parity of this CreateConsistencyGroupSnapshotViewRequest.


        :param validate_parity: The validate_parity of this CreateConsistencyGroupSnapshotViewRequest.
        :type: bool
        """
        self._validate_parity = validate_parity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

