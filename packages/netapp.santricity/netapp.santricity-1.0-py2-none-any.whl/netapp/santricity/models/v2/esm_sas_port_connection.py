# coding: utf-8

"""
EsmSasPortConnection.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class EsmSasPortConnection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EsmSasPortConnection - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tray': 'Tray',  
            'esm': 'Esm',  
            'sas_expander': 'SasExpander',  
            'sas_port': 'SasPort',  
            'channel_port': 'ChannelPort',  
            'attached_sas_expander': 'SasExpander',  
            'attached_channel_port': 'ChannelPort',  
            'attached_controller': 'Controller',  
            'type': 'str'
        }

        self.attribute_map = {
            'tray': 'tray',  
            'esm': 'esm',  
            'sas_expander': 'sasExpander',  
            'sas_port': 'sasPort',  
            'channel_port': 'channelPort',  
            'attached_sas_expander': 'attachedSasExpander',  
            'attached_channel_port': 'attachedChannelPort',  
            'attached_controller': 'attachedController',  
            'type': 'type'
        }

        self._tray = None
        self._esm = None
        self._sas_expander = None
        self._sas_port = None
        self._channel_port = None
        self._attached_sas_expander = None
        self._attached_channel_port = None
        self._attached_controller = None
        self._type = None

    @property
    def tray(self):
        """
        Gets the tray of this EsmSasPortConnection.
        The tray that the connection originates from

        :return: The tray of this EsmSasPortConnection.
        :rtype: Tray
        :required/optional: optional
        """
        return self._tray

    @tray.setter
    def tray(self, tray):
        """
        Sets the tray of this EsmSasPortConnection.
        The tray that the connection originates from

        :param tray: The tray of this EsmSasPortConnection.
        :type: Tray
        """
        self._tray = tray

    @property
    def esm(self):
        """
        Gets the esm of this EsmSasPortConnection.
        The esm that the connection originates from

        :return: The esm of this EsmSasPortConnection.
        :rtype: Esm
        :required/optional: optional
        """
        return self._esm

    @esm.setter
    def esm(self, esm):
        """
        Sets the esm of this EsmSasPortConnection.
        The esm that the connection originates from

        :param esm: The esm of this EsmSasPortConnection.
        :type: Esm
        """
        self._esm = esm

    @property
    def sas_expander(self):
        """
        Gets the sas_expander of this EsmSasPortConnection.
        The SAS Expander on the Esm

        :return: The sas_expander of this EsmSasPortConnection.
        :rtype: SasExpander
        :required/optional: optional
        """
        return self._sas_expander

    @sas_expander.setter
    def sas_expander(self, sas_expander):
        """
        Sets the sas_expander of this EsmSasPortConnection.
        The SAS Expander on the Esm

        :param sas_expander: The sas_expander of this EsmSasPortConnection.
        :type: SasExpander
        """
        self._sas_expander = sas_expander

    @property
    def sas_port(self):
        """
        Gets the sas_port of this EsmSasPortConnection.
        The SAS Port associated with the sasExpander on the ESM

        :return: The sas_port of this EsmSasPortConnection.
        :rtype: SasPort
        :required/optional: optional
        """
        return self._sas_port

    @sas_port.setter
    def sas_port(self, sas_port):
        """
        Sets the sas_port of this EsmSasPortConnection.
        The SAS Port associated with the sasExpander on the ESM

        :param sas_port: The sas_port of this EsmSasPortConnection.
        :type: SasPort
        """
        self._sas_port = sas_port

    @property
    def channel_port(self):
        """
        Gets the channel_port of this EsmSasPortConnection.
        The Channel Port associated with the SAS Port and Expander on the ESM

        :return: The channel_port of this EsmSasPortConnection.
        :rtype: ChannelPort
        :required/optional: optional
        """
        return self._channel_port

    @channel_port.setter
    def channel_port(self, channel_port):
        """
        Sets the channel_port of this EsmSasPortConnection.
        The Channel Port associated with the SAS Port and Expander on the ESM

        :param channel_port: The channel_port of this EsmSasPortConnection.
        :type: ChannelPort
        """
        self._channel_port = channel_port

    @property
    def attached_sas_expander(self):
        """
        Gets the attached_sas_expander of this EsmSasPortConnection.
        The SAS Expander that that SAS Connection on the ESM connects to

        :return: The attached_sas_expander of this EsmSasPortConnection.
        :rtype: SasExpander
        :required/optional: optional
        """
        return self._attached_sas_expander

    @attached_sas_expander.setter
    def attached_sas_expander(self, attached_sas_expander):
        """
        Sets the attached_sas_expander of this EsmSasPortConnection.
        The SAS Expander that that SAS Connection on the ESM connects to

        :param attached_sas_expander: The attached_sas_expander of this EsmSasPortConnection.
        :type: SasExpander
        """
        self._attached_sas_expander = attached_sas_expander

    @property
    def attached_channel_port(self):
        """
        Gets the attached_channel_port of this EsmSasPortConnection.
        The ChannelPort that that SAS Connection on the ESM connects to

        :return: The attached_channel_port of this EsmSasPortConnection.
        :rtype: ChannelPort
        :required/optional: optional
        """
        return self._attached_channel_port

    @attached_channel_port.setter
    def attached_channel_port(self, attached_channel_port):
        """
        Sets the attached_channel_port of this EsmSasPortConnection.
        The ChannelPort that that SAS Connection on the ESM connects to

        :param attached_channel_port: The attached_channel_port of this EsmSasPortConnection.
        :type: ChannelPort
        """
        self._attached_channel_port = attached_channel_port

    @property
    def attached_controller(self):
        """
        Gets the attached_controller of this EsmSasPortConnection.
        The Controller (if applicable) that that SAS Connection on the ESM connects to

        :return: The attached_controller of this EsmSasPortConnection.
        :rtype: Controller
        :required/optional: optional
        """
        return self._attached_controller

    @attached_controller.setter
    def attached_controller(self, attached_controller):
        """
        Sets the attached_controller of this EsmSasPortConnection.
        The Controller (if applicable) that that SAS Connection on the ESM connects to

        :param attached_controller: The attached_controller of this EsmSasPortConnection.
        :type: Controller
        """
        self._attached_controller = attached_controller

    @property
    def type(self):
        """
        Gets the type of this EsmSasPortConnection.


        :return: The type of this EsmSasPortConnection.
        :rtype: str
        :required/optional: optional
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this EsmSasPortConnection.


        :param type: The type of this EsmSasPortConnection.
        :type: str
        """
        allowed_values = ["sas", "fibre"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

