# coding: utf-8

"""
X509CertInfo.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class X509CertInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        X509CertInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alias': 'str',  
            'subject_dn': 'str',  
            'issuer_dn': 'str',  
            'start': 'datetime',  
            'expire': 'datetime'
        }

        self.attribute_map = {
            'alias': 'alias',  
            'subject_dn': 'subjectDN',  
            'issuer_dn': 'issuerDN',  
            'start': 'start',  
            'expire': 'expire'
        }

        self._alias = None
        self._subject_dn = None
        self._issuer_dn = None
        self._start = None
        self._expire = None

    @property
    def alias(self):
        """
        Gets the alias of this X509CertInfo.


        :return: The alias of this X509CertInfo.
        :rtype: str
        :required/optional: optional
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this X509CertInfo.


        :param alias: The alias of this X509CertInfo.
        :type: str
        """
        self._alias = alias

    @property
    def subject_dn(self):
        """
        Gets the subject_dn of this X509CertInfo.


        :return: The subject_dn of this X509CertInfo.
        :rtype: str
        :required/optional: optional
        """
        return self._subject_dn

    @subject_dn.setter
    def subject_dn(self, subject_dn):
        """
        Sets the subject_dn of this X509CertInfo.


        :param subject_dn: The subject_dn of this X509CertInfo.
        :type: str
        """
        self._subject_dn = subject_dn

    @property
    def issuer_dn(self):
        """
        Gets the issuer_dn of this X509CertInfo.


        :return: The issuer_dn of this X509CertInfo.
        :rtype: str
        :required/optional: optional
        """
        return self._issuer_dn

    @issuer_dn.setter
    def issuer_dn(self, issuer_dn):
        """
        Sets the issuer_dn of this X509CertInfo.


        :param issuer_dn: The issuer_dn of this X509CertInfo.
        :type: str
        """
        self._issuer_dn = issuer_dn

    @property
    def start(self):
        """
        Gets the start of this X509CertInfo.


        :return: The start of this X509CertInfo.
        :rtype: datetime
        :required/optional: optional
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this X509CertInfo.


        :param start: The start of this X509CertInfo.
        :type: datetime
        """
        self._start = start

    @property
    def expire(self):
        """
        Gets the expire of this X509CertInfo.


        :return: The expire of this X509CertInfo.
        :rtype: datetime
        :required/optional: optional
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """
        Sets the expire of this X509CertInfo.


        :param expire: The expire of this X509CertInfo.
        :type: datetime
        """
        self._expire = expire

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

