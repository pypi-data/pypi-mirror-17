# coding: utf-8

"""
VolumeCopyCreateRequest.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class VolumeCopyCreateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        VolumeCopyCreateRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'source_id': 'str',  # (required parameter)
            'target_id': 'str',  # (required parameter)
            'copy_priority': 'str',  
            'target_write_protected': 'bool',  
            'disable_snapshot': 'bool',  
            'online_copy': 'bool',  
            'repository_candidate': 'ConcatVolumeCandidate'
        }

        self.attribute_map = {
            'source_id': 'sourceId',  # (required parameter)
            'target_id': 'targetId',  # (required parameter)
            'copy_priority': 'copyPriority',  
            'target_write_protected': 'targetWriteProtected',  
            'disable_snapshot': 'disableSnapshot',  
            'online_copy': 'onlineCopy',  
            'repository_candidate': 'repositoryCandidate'
        }

        self._source_id = None
        self._target_id = None
        self._copy_priority = None
        self._target_write_protected = None
        self._disable_snapshot = None
        self._online_copy = None
        self._repository_candidate = None

    @property
    def source_id(self):
        """
        Gets the source_id of this VolumeCopyCreateRequest.
        The identifier of the source volume for the copy job.

        :return: The source_id of this VolumeCopyCreateRequest.
        :rtype: str
        :required/optional: required
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this VolumeCopyCreateRequest.
        The identifier of the source volume for the copy job.

        :param source_id: The source_id of this VolumeCopyCreateRequest.
        :type: str
        """
        self._source_id = source_id

    @property
    def target_id(self):
        """
        Gets the target_id of this VolumeCopyCreateRequest.
        The identifier of the target volume for the copy job.

        :return: The target_id of this VolumeCopyCreateRequest.
        :rtype: str
        :required/optional: required
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """
        Sets the target_id of this VolumeCopyCreateRequest.
        The identifier of the target volume for the copy job.

        :param target_id: The target_id of this VolumeCopyCreateRequest.
        :type: str
        """
        self._target_id = target_id

    @property
    def copy_priority(self):
        """
        Gets the copy_priority of this VolumeCopyCreateRequest.
        The priority of the copy job (0 is the lowest priority, 4 is the highest priority). Defaults to priority 2.

        :return: The copy_priority of this VolumeCopyCreateRequest.
        :rtype: str
        :required/optional: optional
        """
        return self._copy_priority

    @copy_priority.setter
    def copy_priority(self, copy_priority):
        """
        Sets the copy_priority of this VolumeCopyCreateRequest.
        The priority of the copy job (0 is the lowest priority, 4 is the highest priority). Defaults to priority 2.

        :param copy_priority: The copy_priority of this VolumeCopyCreateRequest.
        :type: str
        """
        allowed_values = ["priority0", "priority1", "priority2", "priority3", "priority4", "__UNDEFINED"]
        if copy_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `copy_priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._copy_priority = copy_priority

    @property
    def target_write_protected(self):
        """
        Gets the target_write_protected of this VolumeCopyCreateRequest.
        Specifies whether to block write I/O to the target volume while the       copy job exists.

        :return: The target_write_protected of this VolumeCopyCreateRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._target_write_protected

    @target_write_protected.setter
    def target_write_protected(self, target_write_protected):
        """
        Sets the target_write_protected of this VolumeCopyCreateRequest.
        Specifies whether to block write I/O to the target volume while the       copy job exists.

        :param target_write_protected: The target_write_protected of this VolumeCopyCreateRequest.
        :type: bool
        """
        self._target_write_protected = target_write_protected

    @property
    def disable_snapshot(self):
        """
        Gets the disable_snapshot of this VolumeCopyCreateRequest.
        Deprecated, this value is ignored.

        :return: The disable_snapshot of this VolumeCopyCreateRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._disable_snapshot

    @disable_snapshot.setter
    def disable_snapshot(self, disable_snapshot):
        """
        Sets the disable_snapshot of this VolumeCopyCreateRequest.
        Deprecated, this value is ignored.

        :param disable_snapshot: The disable_snapshot of this VolumeCopyCreateRequest.
        :type: bool
        """
        self._disable_snapshot = disable_snapshot

    @property
    def online_copy(self):
        """
        Gets the online_copy of this VolumeCopyCreateRequest.
        If true, a snapshot will be created of the source volume, and the copy initiated on it to prevent any loss of use of the source volume.

        :return: The online_copy of this VolumeCopyCreateRequest.
        :rtype: bool
        :required/optional: optional
        """
        return self._online_copy

    @online_copy.setter
    def online_copy(self, online_copy):
        """
        Sets the online_copy of this VolumeCopyCreateRequest.
        If true, a snapshot will be created of the source volume, and the copy initiated on it to prevent any loss of use of the source volume.

        :param online_copy: The online_copy of this VolumeCopyCreateRequest.
        :type: bool
        """
        self._online_copy = online_copy

    @property
    def repository_candidate(self):
        """
        Gets the repository_candidate of this VolumeCopyCreateRequest.
        Allows a repository candidate to be manually specified for use in the creation of the snapshot. By default, the best candidate will be selected if onlineCopy is specified as true

        :return: The repository_candidate of this VolumeCopyCreateRequest.
        :rtype: ConcatVolumeCandidate
        :required/optional: optional
        """
        return self._repository_candidate

    @repository_candidate.setter
    def repository_candidate(self, repository_candidate):
        """
        Sets the repository_candidate of this VolumeCopyCreateRequest.
        Allows a repository candidate to be manually specified for use in the creation of the snapshot. By default, the best candidate will be selected if onlineCopy is specified as true

        :param repository_candidate: The repository_candidate of this VolumeCopyCreateRequest.
        :type: ConcatVolumeCandidate
        """
        self._repository_candidate = repository_candidate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

