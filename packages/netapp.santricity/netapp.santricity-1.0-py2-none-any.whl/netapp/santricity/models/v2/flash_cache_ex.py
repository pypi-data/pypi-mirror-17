# coding: utf-8

"""
FlashCacheEx.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class FlashCacheEx(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FlashCacheEx - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'wwn': 'str',  # (required parameter)
            'flash_cache_ref': 'str',  # (required parameter)
            'flash_cache_base': 'FlashCacheBase',  # (required parameter)
            'fc_drive_info': 'FlashCacheDriveInfo',  # (required parameter)
            'cached_volumes': 'list[str]',  
            'drive_refs': 'list[str]',  
            'name': 'str',  
            'id': 'str'
        }

        self.attribute_map = {
            'wwn': 'wwn',  # (required parameter)
            'flash_cache_ref': 'flashCacheRef',  # (required parameter)
            'flash_cache_base': 'flashCacheBase',  # (required parameter)
            'fc_drive_info': 'fcDriveInfo',  # (required parameter)
            'cached_volumes': 'cachedVolumes',  
            'drive_refs': 'driveRefs',  
            'name': 'name',  
            'id': 'id'
        }

        self._wwn = None
        self._flash_cache_ref = None
        self._flash_cache_base = None
        self._fc_drive_info = None
        self._cached_volumes = None
        self._drive_refs = None
        self._name = None
        self._id = None

    @property
    def wwn(self):
        """
        Gets the wwn of this FlashCacheEx.
        The WWN of the high level flash cache volume.

        :return: The wwn of this FlashCacheEx.
        :rtype: str
        :required/optional: required
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """
        Sets the wwn of this FlashCacheEx.
        The WWN of the high level flash cache volume.

        :param wwn: The wwn of this FlashCacheEx.
        :type: str
        """
        self._wwn = wwn

    @property
    def flash_cache_ref(self):
        """
        Gets the flash_cache_ref of this FlashCacheEx.
        A reference to the high level flash cache volume.

        :return: The flash_cache_ref of this FlashCacheEx.
        :rtype: str
        :required/optional: required
        """
        return self._flash_cache_ref

    @flash_cache_ref.setter
    def flash_cache_ref(self, flash_cache_ref):
        """
        Sets the flash_cache_ref of this FlashCacheEx.
        A reference to the high level flash cache volume.

        :param flash_cache_ref: The flash_cache_ref of this FlashCacheEx.
        :type: str
        """
        self._flash_cache_ref = flash_cache_ref

    @property
    def flash_cache_base(self):
        """
        Gets the flash_cache_base of this FlashCacheEx.
        Contains the base-level Flash Cache attributes pertaining to all types of Flash Caches.

        :return: The flash_cache_base of this FlashCacheEx.
        :rtype: FlashCacheBase
        :required/optional: required
        """
        return self._flash_cache_base

    @flash_cache_base.setter
    def flash_cache_base(self, flash_cache_base):
        """
        Sets the flash_cache_base of this FlashCacheEx.
        Contains the base-level Flash Cache attributes pertaining to all types of Flash Caches.

        :param flash_cache_base: The flash_cache_base of this FlashCacheEx.
        :type: FlashCacheBase
        """
        self._flash_cache_base = flash_cache_base

    @property
    def fc_drive_info(self):
        """
        Gets the fc_drive_info of this FlashCacheEx.
        Drive information for the flash cache.

        :return: The fc_drive_info of this FlashCacheEx.
        :rtype: FlashCacheDriveInfo
        :required/optional: required
        """
        return self._fc_drive_info

    @fc_drive_info.setter
    def fc_drive_info(self, fc_drive_info):
        """
        Sets the fc_drive_info of this FlashCacheEx.
        Drive information for the flash cache.

        :param fc_drive_info: The fc_drive_info of this FlashCacheEx.
        :type: FlashCacheDriveInfo
        """
        self._fc_drive_info = fc_drive_info

    @property
    def cached_volumes(self):
        """
        Gets the cached_volumes of this FlashCacheEx.
        A list of references of volumes and thin volumes that are associated with this FlashCache

        :return: The cached_volumes of this FlashCacheEx.
        :rtype: list[str]
        :required/optional: optional
        """
        return self._cached_volumes

    @cached_volumes.setter
    def cached_volumes(self, cached_volumes):
        """
        Sets the cached_volumes of this FlashCacheEx.
        A list of references of volumes and thin volumes that are associated with this FlashCache

        :param cached_volumes: The cached_volumes of this FlashCacheEx.
        :type: list[str]
        """
        self._cached_volumes = cached_volumes

    @property
    def drive_refs(self):
        """
        Gets the drive_refs of this FlashCacheEx.
        The list of drives associated with this FlashCache

        :return: The drive_refs of this FlashCacheEx.
        :rtype: list[str]
        :required/optional: optional
        """
        return self._drive_refs

    @drive_refs.setter
    def drive_refs(self, drive_refs):
        """
        Sets the drive_refs of this FlashCacheEx.
        The list of drives associated with this FlashCache

        :param drive_refs: The drive_refs of this FlashCacheEx.
        :type: list[str]
        """
        self._drive_refs = drive_refs

    @property
    def name(self):
        """
        Gets the name of this FlashCacheEx.


        :return: The name of this FlashCacheEx.
        :rtype: str
        :required/optional: optional
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FlashCacheEx.


        :param name: The name of this FlashCacheEx.
        :type: str
        """
        self._name = name

    @property
    def id(self):
        """
        Gets the id of this FlashCacheEx.


        :return: The id of this FlashCacheEx.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FlashCacheEx.


        :param id: The id of this FlashCacheEx.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

