# coding: utf-8

"""
LegacySnapshotEx.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class LegacySnapshotEx(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LegacySnapshotEx - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'world_wide_name': 'str',  # (required parameter)
            'snapshot_ref': 'str',  # (required parameter)
            'label': 'str',  # (required parameter)
            'status': 'str',  # (required parameter)
            'action': 'str',  # (required parameter)
            'current_manager': 'str',  # (required parameter)
            'base_volume': 'str',  # (required parameter)
            'repository_volume': 'str',  # (required parameter)
            'full_warn_threshold': 'int',  # (required parameter)
            'over_warn_threshold': 'bool',  # (required parameter)
            'repository_full': 'bool',  # (required parameter)
            'rep_full_policy': 'str',  # (required parameter)
            'rollback_priority': 'int',  # (required parameter)
            'extent_start': 'int',  # (required parameter)
            'extent_size': 'int',  # (required parameter)
            'snapshot_time': 'int',  # (required parameter)
            'perms': 'VolumePerms',  # (required parameter)
            'children_inactive': 'bool',  # (required parameter)
            'volume_handle': 'int',  # (required parameter)
            'mgmt_client_attribute': 'int',  # (required parameter)
            'rollback_status': 'str',  # (required parameter)
            'base_volume_size_in_bytes': 'int',  
            'total_size_in_bytes': 'int',  
            'preferred_controller_id': 'str',  
            'repository_capacity': 'int',  
            'volume_copy_target': 'bool',  
            'volume_copy_source': 'bool',  
            'pit_base_volume': 'bool',  
            'async_mirror_target': 'bool',  
            'async_mirror_source': 'bool',  
            'protection_type': 'str',  
            'remote_mirror_source': 'bool',  
            'remote_mirror_target': 'bool',  
            'object_type': 'str',  
            'name': 'str',  
            'id': 'str',  
            'wwn': 'str',  
            'list_of_mappings': 'list[LUNMapping]',  
            'mapped': 'bool',  # (required parameter)
            'current_controller_id': 'str',  
            'online_volume_copy': 'bool'
        }

        self.attribute_map = {
            'world_wide_name': 'worldWideName',  # (required parameter)
            'snapshot_ref': 'snapshotRef',  # (required parameter)
            'label': 'label',  # (required parameter)
            'status': 'status',  # (required parameter)
            'action': 'action',  # (required parameter)
            'current_manager': 'currentManager',  # (required parameter)
            'base_volume': 'baseVolume',  # (required parameter)
            'repository_volume': 'repositoryVolume',  # (required parameter)
            'full_warn_threshold': 'fullWarnThreshold',  # (required parameter)
            'over_warn_threshold': 'overWarnThreshold',  # (required parameter)
            'repository_full': 'repositoryFull',  # (required parameter)
            'rep_full_policy': 'repFullPolicy',  # (required parameter)
            'rollback_priority': 'rollbackPriority',  # (required parameter)
            'extent_start': 'extentStart',  # (required parameter)
            'extent_size': 'extentSize',  # (required parameter)
            'snapshot_time': 'snapshotTime',  # (required parameter)
            'perms': 'perms',  # (required parameter)
            'children_inactive': 'childrenInactive',  # (required parameter)
            'volume_handle': 'volumeHandle',  # (required parameter)
            'mgmt_client_attribute': 'mgmtClientAttribute',  # (required parameter)
            'rollback_status': 'rollbackStatus',  # (required parameter)
            'base_volume_size_in_bytes': 'baseVolumeSizeInBytes',  
            'total_size_in_bytes': 'totalSizeInBytes',  
            'preferred_controller_id': 'preferredControllerId',  
            'repository_capacity': 'repositoryCapacity',  
            'volume_copy_target': 'volumeCopyTarget',  
            'volume_copy_source': 'volumeCopySource',  
            'pit_base_volume': 'pitBaseVolume',  
            'async_mirror_target': 'asyncMirrorTarget',  
            'async_mirror_source': 'asyncMirrorSource',  
            'protection_type': 'protectionType',  
            'remote_mirror_source': 'remoteMirrorSource',  
            'remote_mirror_target': 'remoteMirrorTarget',  
            'object_type': 'objectType',  
            'name': 'name',  
            'id': 'id',  
            'wwn': 'wwn',  
            'list_of_mappings': 'listOfMappings',  
            'mapped': 'mapped',  # (required parameter)
            'current_controller_id': 'currentControllerId',  
            'online_volume_copy': 'onlineVolumeCopy'
        }

        self._world_wide_name = None
        self._snapshot_ref = None
        self._label = None
        self._status = None
        self._action = None
        self._current_manager = None
        self._base_volume = None
        self._repository_volume = None
        self._full_warn_threshold = None
        self._over_warn_threshold = None
        self._repository_full = None
        self._rep_full_policy = None
        self._rollback_priority = None
        self._extent_start = None
        self._extent_size = None
        self._snapshot_time = None
        self._perms = None
        self._children_inactive = None
        self._volume_handle = None
        self._mgmt_client_attribute = None
        self._rollback_status = None
        self._base_volume_size_in_bytes = None
        self._total_size_in_bytes = None
        self._preferred_controller_id = None
        self._repository_capacity = None
        self._volume_copy_target = None
        self._volume_copy_source = None
        self._pit_base_volume = None
        self._async_mirror_target = None
        self._async_mirror_source = None
        self._protection_type = None
        self._remote_mirror_source = None
        self._remote_mirror_target = None
        self._object_type = None
        self._name = None
        self._id = None
        self._wwn = None
        self._list_of_mappings = None
        self._mapped = None
        self._current_controller_id = None
        self._online_volume_copy = None

    @property
    def world_wide_name(self):
        """
        Gets the world_wide_name of this LegacySnapshotEx.
        The World Wide Name of the snapshot.

        :return: The world_wide_name of this LegacySnapshotEx.
        :rtype: str
        :required/optional: required
        """
        return self._world_wide_name

    @world_wide_name.setter
    def world_wide_name(self, world_wide_name):
        """
        Sets the world_wide_name of this LegacySnapshotEx.
        The World Wide Name of the snapshot.

        :param world_wide_name: The world_wide_name of this LegacySnapshotEx.
        :type: str
        """
        self._world_wide_name = world_wide_name

    @property
    def snapshot_ref(self):
        """
        Gets the snapshot_ref of this LegacySnapshotEx.
        Reference (key) for the snapshot volume.

        :return: The snapshot_ref of this LegacySnapshotEx.
        :rtype: str
        :required/optional: required
        """
        return self._snapshot_ref

    @snapshot_ref.setter
    def snapshot_ref(self, snapshot_ref):
        """
        Sets the snapshot_ref of this LegacySnapshotEx.
        Reference (key) for the snapshot volume.

        :param snapshot_ref: The snapshot_ref of this LegacySnapshotEx.
        :type: str
        """
        self._snapshot_ref = snapshot_ref

    @property
    def label(self):
        """
        Gets the label of this LegacySnapshotEx.
        Name of the snapshot.

        :return: The label of this LegacySnapshotEx.
        :rtype: str
        :required/optional: required
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this LegacySnapshotEx.
        Name of the snapshot.

        :param label: The label of this LegacySnapshotEx.
        :type: str
        """
        self._label = label

    @property
    def status(self):
        """
        Gets the status of this LegacySnapshotEx.
        Indicates status of the snapshot.

        :return: The status of this LegacySnapshotEx.
        :rtype: str
        :required/optional: required
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this LegacySnapshotEx.
        Indicates status of the snapshot.

        :param status: The status of this LegacySnapshotEx.
        :type: str
        """
        allowed_values = ["active", "failed", "disabled", "offline", "__UNDEFINED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def action(self):
        """
        Gets the action of this LegacySnapshotEx.
        Long running action.

        :return: The action of this LegacySnapshotEx.
        :rtype: str
        :required/optional: required
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this LegacySnapshotEx.
        Long running action.

        :param action: The action of this LegacySnapshotEx.
        :type: str
        """
        allowed_values = ["none", "rollback", "__UNDEFINED"]
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action`, must be one of {0}"
                .format(allowed_values)
            )
        self._action = action

    @property
    def current_manager(self):
        """
        Gets the current_manager of this LegacySnapshotEx.
        Current owner of the snapshot.

        :return: The current_manager of this LegacySnapshotEx.
        :rtype: str
        :required/optional: required
        """
        return self._current_manager

    @current_manager.setter
    def current_manager(self, current_manager):
        """
        Sets the current_manager of this LegacySnapshotEx.
        Current owner of the snapshot.

        :param current_manager: The current_manager of this LegacySnapshotEx.
        :type: str
        """
        self._current_manager = current_manager

    @property
    def base_volume(self):
        """
        Gets the base_volume of this LegacySnapshotEx.
        Base volume for this snapshot.

        :return: The base_volume of this LegacySnapshotEx.
        :rtype: str
        :required/optional: required
        """
        return self._base_volume

    @base_volume.setter
    def base_volume(self, base_volume):
        """
        Sets the base_volume of this LegacySnapshotEx.
        Base volume for this snapshot.

        :param base_volume: The base_volume of this LegacySnapshotEx.
        :type: str
        """
        self._base_volume = base_volume

    @property
    def repository_volume(self):
        """
        Gets the repository_volume of this LegacySnapshotEx.
        Repository volume for this snapshot.

        :return: The repository_volume of this LegacySnapshotEx.
        :rtype: str
        :required/optional: required
        """
        return self._repository_volume

    @repository_volume.setter
    def repository_volume(self, repository_volume):
        """
        Sets the repository_volume of this LegacySnapshotEx.
        Repository volume for this snapshot.

        :param repository_volume: The repository_volume of this LegacySnapshotEx.
        :type: str
        """
        self._repository_volume = repository_volume

    @property
    def full_warn_threshold(self):
        """
        Gets the full_warn_threshold of this LegacySnapshotEx.
        Repository utilization warning threshold.

        :return: The full_warn_threshold of this LegacySnapshotEx.
        :rtype: int
        :required/optional: required
        """
        return self._full_warn_threshold

    @full_warn_threshold.setter
    def full_warn_threshold(self, full_warn_threshold):
        """
        Sets the full_warn_threshold of this LegacySnapshotEx.
        Repository utilization warning threshold.

        :param full_warn_threshold: The full_warn_threshold of this LegacySnapshotEx.
        :type: int
        """
        self._full_warn_threshold = full_warn_threshold

    @property
    def over_warn_threshold(self):
        """
        Gets the over_warn_threshold of this LegacySnapshotEx.
        True if the repository utilization is over the warning threshold.

        :return: The over_warn_threshold of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: required
        """
        return self._over_warn_threshold

    @over_warn_threshold.setter
    def over_warn_threshold(self, over_warn_threshold):
        """
        Sets the over_warn_threshold of this LegacySnapshotEx.
        True if the repository utilization is over the warning threshold.

        :param over_warn_threshold: The over_warn_threshold of this LegacySnapshotEx.
        :type: bool
        """
        self._over_warn_threshold = over_warn_threshold

    @property
    def repository_full(self):
        """
        Gets the repository_full of this LegacySnapshotEx.
        True, if the repository is full.

        :return: The repository_full of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: required
        """
        return self._repository_full

    @repository_full.setter
    def repository_full(self, repository_full):
        """
        Sets the repository_full of this LegacySnapshotEx.
        True, if the repository is full.

        :param repository_full: The repository_full of this LegacySnapshotEx.
        :type: bool
        """
        self._repository_full = repository_full

    @property
    def rep_full_policy(self):
        """
        Gets the rep_full_policy of this LegacySnapshotEx.
        Indication of the volume behavior when the repository is full.

        :return: The rep_full_policy of this LegacySnapshotEx.
        :rtype: str
        :required/optional: required
        """
        return self._rep_full_policy

    @rep_full_policy.setter
    def rep_full_policy(self, rep_full_policy):
        """
        Sets the rep_full_policy of this LegacySnapshotEx.
        Indication of the volume behavior when the repository is full.

        :param rep_full_policy: The rep_full_policy of this LegacySnapshotEx.
        :type: str
        """
        allowed_values = ["failwrites", "failsnap", "__UNDEFINED"]
        if rep_full_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `rep_full_policy`, must be one of {0}"
                .format(allowed_values)
            )
        self._rep_full_policy = rep_full_policy

    @property
    def rollback_priority(self):
        """
        Gets the rollback_priority of this LegacySnapshotEx.
        The importance of the rollback operation (0-4). Not used in this release of software.

        :return: The rollback_priority of this LegacySnapshotEx.
        :rtype: int
        :required/optional: required
        """
        return self._rollback_priority

    @rollback_priority.setter
    def rollback_priority(self, rollback_priority):
        """
        Sets the rollback_priority of this LegacySnapshotEx.
        The importance of the rollback operation (0-4). Not used in this release of software.

        :param rollback_priority: The rollback_priority of this LegacySnapshotEx.
        :type: int
        """
        self._rollback_priority = rollback_priority

    @property
    def extent_start(self):
        """
        Gets the extent_start of this LegacySnapshotEx.
        The start position of the extent in the base volume (bytes). Not used in this release of software.

        :return: The extent_start of this LegacySnapshotEx.
        :rtype: int
        :required/optional: required
        """
        return self._extent_start

    @extent_start.setter
    def extent_start(self, extent_start):
        """
        Sets the extent_start of this LegacySnapshotEx.
        The start position of the extent in the base volume (bytes). Not used in this release of software.

        :param extent_start: The extent_start of this LegacySnapshotEx.
        :type: int
        """
        self._extent_start = extent_start

    @property
    def extent_size(self):
        """
        Gets the extent_size of this LegacySnapshotEx.
        The size of the extent in bytes. Not used in this release of software.

        :return: The extent_size of this LegacySnapshotEx.
        :rtype: int
        :required/optional: required
        """
        return self._extent_size

    @extent_size.setter
    def extent_size(self, extent_size):
        """
        Sets the extent_size of this LegacySnapshotEx.
        The size of the extent in bytes. Not used in this release of software.

        :param extent_size: The extent_size of this LegacySnapshotEx.
        :type: int
        """
        self._extent_size = extent_size

    @property
    def snapshot_time(self):
        """
        Gets the snapshot_time of this LegacySnapshotEx.
        The controller time when the snapshot was created.

        :return: The snapshot_time of this LegacySnapshotEx.
        :rtype: int
        :required/optional: required
        """
        return self._snapshot_time

    @snapshot_time.setter
    def snapshot_time(self, snapshot_time):
        """
        Sets the snapshot_time of this LegacySnapshotEx.
        The controller time when the snapshot was created.

        :param snapshot_time: The snapshot_time of this LegacySnapshotEx.
        :type: int
        """
        self._snapshot_time = snapshot_time

    @property
    def perms(self):
        """
        Gets the perms of this LegacySnapshotEx.
        Permissions allowed on volume.

        :return: The perms of this LegacySnapshotEx.
        :rtype: VolumePerms
        :required/optional: required
        """
        return self._perms

    @perms.setter
    def perms(self, perms):
        """
        Sets the perms of this LegacySnapshotEx.
        Permissions allowed on volume.

        :param perms: The perms of this LegacySnapshotEx.
        :type: VolumePerms
        """
        self._perms = perms

    @property
    def children_inactive(self):
        """
        Gets the children_inactive of this LegacySnapshotEx.
        True if all child volumes are offline or failed. Child volumes are the base volume and the REPOSITORY volume.

        :return: The children_inactive of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: required
        """
        return self._children_inactive

    @children_inactive.setter
    def children_inactive(self, children_inactive):
        """
        Sets the children_inactive of this LegacySnapshotEx.
        True if all child volumes are offline or failed. Child volumes are the base volume and the REPOSITORY volume.

        :param children_inactive: The children_inactive of this LegacySnapshotEx.
        :type: bool
        """
        self._children_inactive = children_inactive

    @property
    def volume_handle(self):
        """
        Gets the volume_handle of this LegacySnapshotEx.
        Volume SSID.

        :return: The volume_handle of this LegacySnapshotEx.
        :rtype: int
        :required/optional: required
        """
        return self._volume_handle

    @volume_handle.setter
    def volume_handle(self, volume_handle):
        """
        Sets the volume_handle of this LegacySnapshotEx.
        Volume SSID.

        :param volume_handle: The volume_handle of this LegacySnapshotEx.
        :type: int
        """
        self._volume_handle = volume_handle

    @property
    def mgmt_client_attribute(self):
        """
        Gets the mgmt_client_attribute of this LegacySnapshotEx.
        For use by management client.

        :return: The mgmt_client_attribute of this LegacySnapshotEx.
        :rtype: int
        :required/optional: required
        """
        return self._mgmt_client_attribute

    @mgmt_client_attribute.setter
    def mgmt_client_attribute(self, mgmt_client_attribute):
        """
        Sets the mgmt_client_attribute of this LegacySnapshotEx.
        For use by management client.

        :param mgmt_client_attribute: The mgmt_client_attribute of this LegacySnapshotEx.
        :type: int
        """
        self._mgmt_client_attribute = mgmt_client_attribute

    @property
    def rollback_status(self):
        """
        Gets the rollback_status of this LegacySnapshotEx.
        Status of current action being performed on snapshot.

        :return: The rollback_status of this LegacySnapshotEx.
        :rtype: str
        :required/optional: required
        """
        return self._rollback_status

    @rollback_status.setter
    def rollback_status(self, rollback_status):
        """
        Sets the rollback_status of this LegacySnapshotEx.
        Status of current action being performed on snapshot.

        :param rollback_status: The rollback_status of this LegacySnapshotEx.
        :type: str
        """
        allowed_values = ["none", "inProgress", "pending", "paused", "__UNDEFINED"]
        if rollback_status not in allowed_values:
            raise ValueError(
                "Invalid value for `rollback_status`, must be one of {0}"
                .format(allowed_values)
            )
        self._rollback_status = rollback_status

    @property
    def base_volume_size_in_bytes(self):
        """
        Gets the base_volume_size_in_bytes of this LegacySnapshotEx.


        :return: The base_volume_size_in_bytes of this LegacySnapshotEx.
        :rtype: int
        :required/optional: optional
        """
        return self._base_volume_size_in_bytes

    @base_volume_size_in_bytes.setter
    def base_volume_size_in_bytes(self, base_volume_size_in_bytes):
        """
        Sets the base_volume_size_in_bytes of this LegacySnapshotEx.


        :param base_volume_size_in_bytes: The base_volume_size_in_bytes of this LegacySnapshotEx.
        :type: int
        """
        self._base_volume_size_in_bytes = base_volume_size_in_bytes

    @property
    def total_size_in_bytes(self):
        """
        Gets the total_size_in_bytes of this LegacySnapshotEx.


        :return: The total_size_in_bytes of this LegacySnapshotEx.
        :rtype: int
        :required/optional: optional
        """
        return self._total_size_in_bytes

    @total_size_in_bytes.setter
    def total_size_in_bytes(self, total_size_in_bytes):
        """
        Sets the total_size_in_bytes of this LegacySnapshotEx.


        :param total_size_in_bytes: The total_size_in_bytes of this LegacySnapshotEx.
        :type: int
        """
        self._total_size_in_bytes = total_size_in_bytes

    @property
    def preferred_controller_id(self):
        """
        Gets the preferred_controller_id of this LegacySnapshotEx.


        :return: The preferred_controller_id of this LegacySnapshotEx.
        :rtype: str
        :required/optional: optional
        """
        return self._preferred_controller_id

    @preferred_controller_id.setter
    def preferred_controller_id(self, preferred_controller_id):
        """
        Sets the preferred_controller_id of this LegacySnapshotEx.


        :param preferred_controller_id: The preferred_controller_id of this LegacySnapshotEx.
        :type: str
        """
        self._preferred_controller_id = preferred_controller_id

    @property
    def repository_capacity(self):
        """
        Gets the repository_capacity of this LegacySnapshotEx.


        :return: The repository_capacity of this LegacySnapshotEx.
        :rtype: int
        :required/optional: optional
        """
        return self._repository_capacity

    @repository_capacity.setter
    def repository_capacity(self, repository_capacity):
        """
        Sets the repository_capacity of this LegacySnapshotEx.


        :param repository_capacity: The repository_capacity of this LegacySnapshotEx.
        :type: int
        """
        self._repository_capacity = repository_capacity

    @property
    def volume_copy_target(self):
        """
        Gets the volume_copy_target of this LegacySnapshotEx.


        :return: The volume_copy_target of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: optional
        """
        return self._volume_copy_target

    @volume_copy_target.setter
    def volume_copy_target(self, volume_copy_target):
        """
        Sets the volume_copy_target of this LegacySnapshotEx.


        :param volume_copy_target: The volume_copy_target of this LegacySnapshotEx.
        :type: bool
        """
        self._volume_copy_target = volume_copy_target

    @property
    def volume_copy_source(self):
        """
        Gets the volume_copy_source of this LegacySnapshotEx.


        :return: The volume_copy_source of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: optional
        """
        return self._volume_copy_source

    @volume_copy_source.setter
    def volume_copy_source(self, volume_copy_source):
        """
        Sets the volume_copy_source of this LegacySnapshotEx.


        :param volume_copy_source: The volume_copy_source of this LegacySnapshotEx.
        :type: bool
        """
        self._volume_copy_source = volume_copy_source

    @property
    def pit_base_volume(self):
        """
        Gets the pit_base_volume of this LegacySnapshotEx.


        :return: The pit_base_volume of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: optional
        """
        return self._pit_base_volume

    @pit_base_volume.setter
    def pit_base_volume(self, pit_base_volume):
        """
        Sets the pit_base_volume of this LegacySnapshotEx.


        :param pit_base_volume: The pit_base_volume of this LegacySnapshotEx.
        :type: bool
        """
        self._pit_base_volume = pit_base_volume

    @property
    def async_mirror_target(self):
        """
        Gets the async_mirror_target of this LegacySnapshotEx.
        True if the volume is a target in an Asynchronous Mirror relationship.

        :return: The async_mirror_target of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: optional
        """
        return self._async_mirror_target

    @async_mirror_target.setter
    def async_mirror_target(self, async_mirror_target):
        """
        Sets the async_mirror_target of this LegacySnapshotEx.
        True if the volume is a target in an Asynchronous Mirror relationship.

        :param async_mirror_target: The async_mirror_target of this LegacySnapshotEx.
        :type: bool
        """
        self._async_mirror_target = async_mirror_target

    @property
    def async_mirror_source(self):
        """
        Gets the async_mirror_source of this LegacySnapshotEx.
        True if the volume is a source in an Asynchronous Mirror relationship.

        :return: The async_mirror_source of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: optional
        """
        return self._async_mirror_source

    @async_mirror_source.setter
    def async_mirror_source(self, async_mirror_source):
        """
        Sets the async_mirror_source of this LegacySnapshotEx.
        True if the volume is a source in an Asynchronous Mirror relationship.

        :param async_mirror_source: The async_mirror_source of this LegacySnapshotEx.
        :type: bool
        """
        self._async_mirror_source = async_mirror_source

    @property
    def protection_type(self):
        """
        Gets the protection_type of this LegacySnapshotEx.


        :return: The protection_type of this LegacySnapshotEx.
        :rtype: str
        :required/optional: optional
        """
        return self._protection_type

    @protection_type.setter
    def protection_type(self, protection_type):
        """
        Sets the protection_type of this LegacySnapshotEx.


        :param protection_type: The protection_type of this LegacySnapshotEx.
        :type: str
        """
        allowed_values = ["type0Protection", "type1Protection", "type2Protection", "type3Protection", "__UNDEFINED"]
        if protection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._protection_type = protection_type

    @property
    def remote_mirror_source(self):
        """
        Gets the remote_mirror_source of this LegacySnapshotEx.
        True if the volume is a source (primary), in an Remote Volume Mirror relationship.

        :return: The remote_mirror_source of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: optional
        """
        return self._remote_mirror_source

    @remote_mirror_source.setter
    def remote_mirror_source(self, remote_mirror_source):
        """
        Sets the remote_mirror_source of this LegacySnapshotEx.
        True if the volume is a source (primary), in an Remote Volume Mirror relationship.

        :param remote_mirror_source: The remote_mirror_source of this LegacySnapshotEx.
        :type: bool
        """
        self._remote_mirror_source = remote_mirror_source

    @property
    def remote_mirror_target(self):
        """
        Gets the remote_mirror_target of this LegacySnapshotEx.
        True if the volume is a target (secondary), in an Remote Volume Mirror relationship.

        :return: The remote_mirror_target of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: optional
        """
        return self._remote_mirror_target

    @remote_mirror_target.setter
    def remote_mirror_target(self, remote_mirror_target):
        """
        Sets the remote_mirror_target of this LegacySnapshotEx.
        True if the volume is a target (secondary), in an Remote Volume Mirror relationship.

        :param remote_mirror_target: The remote_mirror_target of this LegacySnapshotEx.
        :type: bool
        """
        self._remote_mirror_target = remote_mirror_target

    @property
    def object_type(self):
        """
        Gets the object_type of this LegacySnapshotEx.


        :return: The object_type of this LegacySnapshotEx.
        :rtype: str
        :required/optional: optional
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this LegacySnapshotEx.


        :param object_type: The object_type of this LegacySnapshotEx.
        :type: str
        """
        allowed_values = ["volume", "pool", "host", "lunMapping", "hostGroup", "thinVolume", "drive", "volumeCopy", "pit", "pitView", "snapshotGroup", "snapshot", "accessVolume", "legacySnapshot", "hostType", "metadataTag", "managementUrl", "folder", "asyncMirrorGroup", "asyncMirrorGroupMember", "asyncMirrorGroupIncompleteMember", "consistencyGroup", "consistencyGroupView", "fan", "battery", "storageSystem", "controller", "powerSupply", "minihub", "esm", "drawer", "hostBoard", "interconnectCRU", "cacheBackupDevice", "tray", "supportCRU", "hostPort", "initiator", "snapshotSchedule", "thermalSensor", "sfp", "flashCache", "featureAttribute", "featureState", "lockKeyId", "remoteVolume", "mirrorVolume", "vaultMirrorVolume", "vaultMirrorGroup", "metadataVolume", "sasPort", "sasExpander", "channelPort", "speedNegError", "snmpAgentBundle", "stagedFirmware", "workload"]
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._object_type = object_type

    @property
    def name(self):
        """
        Gets the name of this LegacySnapshotEx.


        :return: The name of this LegacySnapshotEx.
        :rtype: str
        :required/optional: optional
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LegacySnapshotEx.


        :param name: The name of this LegacySnapshotEx.
        :type: str
        """
        self._name = name

    @property
    def id(self):
        """
        Gets the id of this LegacySnapshotEx.


        :return: The id of this LegacySnapshotEx.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LegacySnapshotEx.


        :param id: The id of this LegacySnapshotEx.
        :type: str
        """
        self._id = id

    @property
    def wwn(self):
        """
        Gets the wwn of this LegacySnapshotEx.


        :return: The wwn of this LegacySnapshotEx.
        :rtype: str
        :required/optional: optional
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """
        Sets the wwn of this LegacySnapshotEx.


        :param wwn: The wwn of this LegacySnapshotEx.
        :type: str
        """
        self._wwn = wwn

    @property
    def list_of_mappings(self):
        """
        Gets the list_of_mappings of this LegacySnapshotEx.


        :return: The list_of_mappings of this LegacySnapshotEx.
        :rtype: list[LUNMapping]
        :required/optional: optional
        """
        return self._list_of_mappings

    @list_of_mappings.setter
    def list_of_mappings(self, list_of_mappings):
        """
        Sets the list_of_mappings of this LegacySnapshotEx.


        :param list_of_mappings: The list_of_mappings of this LegacySnapshotEx.
        :type: list[LUNMapping]
        """
        self._list_of_mappings = list_of_mappings

    @property
    def mapped(self):
        """
        Gets the mapped of this LegacySnapshotEx.


        :return: The mapped of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: required
        """
        return self._mapped

    @mapped.setter
    def mapped(self, mapped):
        """
        Sets the mapped of this LegacySnapshotEx.


        :param mapped: The mapped of this LegacySnapshotEx.
        :type: bool
        """
        self._mapped = mapped

    @property
    def current_controller_id(self):
        """
        Gets the current_controller_id of this LegacySnapshotEx.


        :return: The current_controller_id of this LegacySnapshotEx.
        :rtype: str
        :required/optional: optional
        """
        return self._current_controller_id

    @current_controller_id.setter
    def current_controller_id(self, current_controller_id):
        """
        Sets the current_controller_id of this LegacySnapshotEx.


        :param current_controller_id: The current_controller_id of this LegacySnapshotEx.
        :type: str
        """
        self._current_controller_id = current_controller_id

    @property
    def online_volume_copy(self):
        """
        Gets the online_volume_copy of this LegacySnapshotEx.


        :return: The online_volume_copy of this LegacySnapshotEx.
        :rtype: bool
        :required/optional: optional
        """
        return self._online_volume_copy

    @online_volume_copy.setter
    def online_volume_copy(self, online_volume_copy):
        """
        Sets the online_volume_copy of this LegacySnapshotEx.


        :param online_volume_copy: The online_volume_copy of this LegacySnapshotEx.
        :type: bool
        """
        self._online_volume_copy = online_volume_copy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

