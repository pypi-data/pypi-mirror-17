# coding: utf-8

"""
AsyncMirrorRemoteConnection.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class AsyncMirrorRemoteConnection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AsyncMirrorRemoteConnection - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'local_port_name': 'str',  
            'remote_port_name': 'str',  
            'remote_port_id': 'str',  
            'local_port_id': 'str',  
            'local_port_number': 'int',  
            'remote_port_number': 'int',  
            'iscsi_connection_detail': 'IscsiRemoteTargetConnections',  
            'fibre_connection_detail': 'FibreRemoteTargetConnections',  
            'remote_target_connections': 'ScsiRemoteTargetConnections',  
            'local_port_ref': 'str',  # (required parameter)
            'controller': 'str',  
            'io_interface_type': 'str'
        }

        self.attribute_map = {
            'local_port_name': 'localPortName',  
            'remote_port_name': 'remotePortName',  
            'remote_port_id': 'remotePortId',  
            'local_port_id': 'localPortId',  
            'local_port_number': 'localPortNumber',  
            'remote_port_number': 'remotePortNumber',  
            'iscsi_connection_detail': 'iscsiConnectionDetail',  
            'fibre_connection_detail': 'fibreConnectionDetail',  
            'remote_target_connections': 'remoteTargetConnections',  
            'local_port_ref': 'localPortRef',  # (required parameter)
            'controller': 'controller',  
            'io_interface_type': 'ioInterfaceType'
        }

        self._local_port_name = None
        self._remote_port_name = None
        self._remote_port_id = None
        self._local_port_id = None
        self._local_port_number = None
        self._remote_port_number = None
        self._iscsi_connection_detail = None
        self._fibre_connection_detail = None
        self._remote_target_connections = None
        self._local_port_ref = None
        self._controller = None
        self._io_interface_type = None

    @property
    def local_port_name(self):
        """
        Gets the local_port_name of this AsyncMirrorRemoteConnection.
        The unique WWN of the local port. Only valid if the interface type is fc.

        :return: The local_port_name of this AsyncMirrorRemoteConnection.
        :rtype: str
        :required/optional: optional
        """
        return self._local_port_name

    @local_port_name.setter
    def local_port_name(self, local_port_name):
        """
        Sets the local_port_name of this AsyncMirrorRemoteConnection.
        The unique WWN of the local port. Only valid if the interface type is fc.

        :param local_port_name: The local_port_name of this AsyncMirrorRemoteConnection.
        :type: str
        """
        self._local_port_name = local_port_name

    @property
    def remote_port_name(self):
        """
        Gets the remote_port_name of this AsyncMirrorRemoteConnection.
        The unique WWN of the remote port. Only valid if the interface type is fc.

        :return: The remote_port_name of this AsyncMirrorRemoteConnection.
        :rtype: str
        :required/optional: optional
        """
        return self._remote_port_name

    @remote_port_name.setter
    def remote_port_name(self, remote_port_name):
        """
        Sets the remote_port_name of this AsyncMirrorRemoteConnection.
        The unique WWN of the remote port. Only valid if the interface type is fc.

        :param remote_port_name: The remote_port_name of this AsyncMirrorRemoteConnection.
        :type: str
        """
        self._remote_port_name = remote_port_name

    @property
    def remote_port_id(self):
        """
        Gets the remote_port_id of this AsyncMirrorRemoteConnection.
        The switch port identifier for the remote port. Only valid if the interface type is fc.

        :return: The remote_port_id of this AsyncMirrorRemoteConnection.
        :rtype: str
        :required/optional: optional
        """
        return self._remote_port_id

    @remote_port_id.setter
    def remote_port_id(self, remote_port_id):
        """
        Sets the remote_port_id of this AsyncMirrorRemoteConnection.
        The switch port identifier for the remote port. Only valid if the interface type is fc.

        :param remote_port_id: The remote_port_id of this AsyncMirrorRemoteConnection.
        :type: str
        """
        self._remote_port_id = remote_port_id

    @property
    def local_port_id(self):
        """
        Gets the local_port_id of this AsyncMirrorRemoteConnection.
        The switch port identifier for the local port. Only valid if the interface type is fc.

        :return: The local_port_id of this AsyncMirrorRemoteConnection.
        :rtype: str
        :required/optional: optional
        """
        return self._local_port_id

    @local_port_id.setter
    def local_port_id(self, local_port_id):
        """
        Sets the local_port_id of this AsyncMirrorRemoteConnection.
        The switch port identifier for the local port. Only valid if the interface type is fc.

        :param local_port_id: The local_port_id of this AsyncMirrorRemoteConnection.
        :type: str
        """
        self._local_port_id = local_port_id

    @property
    def local_port_number(self):
        """
        Gets the local_port_number of this AsyncMirrorRemoteConnection.


        :return: The local_port_number of this AsyncMirrorRemoteConnection.
        :rtype: int
        :required/optional: optional
        """
        return self._local_port_number

    @local_port_number.setter
    def local_port_number(self, local_port_number):
        """
        Sets the local_port_number of this AsyncMirrorRemoteConnection.


        :param local_port_number: The local_port_number of this AsyncMirrorRemoteConnection.
        :type: int
        """
        self._local_port_number = local_port_number

    @property
    def remote_port_number(self):
        """
        Gets the remote_port_number of this AsyncMirrorRemoteConnection.


        :return: The remote_port_number of this AsyncMirrorRemoteConnection.
        :rtype: int
        :required/optional: optional
        """
        return self._remote_port_number

    @remote_port_number.setter
    def remote_port_number(self, remote_port_number):
        """
        Sets the remote_port_number of this AsyncMirrorRemoteConnection.


        :param remote_port_number: The remote_port_number of this AsyncMirrorRemoteConnection.
        :type: int
        """
        self._remote_port_number = remote_port_number

    @property
    def iscsi_connection_detail(self):
        """
        Gets the iscsi_connection_detail of this AsyncMirrorRemoteConnection.


        :return: The iscsi_connection_detail of this AsyncMirrorRemoteConnection.
        :rtype: IscsiRemoteTargetConnections
        :required/optional: optional
        """
        return self._iscsi_connection_detail

    @iscsi_connection_detail.setter
    def iscsi_connection_detail(self, iscsi_connection_detail):
        """
        Sets the iscsi_connection_detail of this AsyncMirrorRemoteConnection.


        :param iscsi_connection_detail: The iscsi_connection_detail of this AsyncMirrorRemoteConnection.
        :type: IscsiRemoteTargetConnections
        """
        self._iscsi_connection_detail = iscsi_connection_detail

    @property
    def fibre_connection_detail(self):
        """
        Gets the fibre_connection_detail of this AsyncMirrorRemoteConnection.


        :return: The fibre_connection_detail of this AsyncMirrorRemoteConnection.
        :rtype: FibreRemoteTargetConnections
        :required/optional: optional
        """
        return self._fibre_connection_detail

    @fibre_connection_detail.setter
    def fibre_connection_detail(self, fibre_connection_detail):
        """
        Sets the fibre_connection_detail of this AsyncMirrorRemoteConnection.


        :param fibre_connection_detail: The fibre_connection_detail of this AsyncMirrorRemoteConnection.
        :type: FibreRemoteTargetConnections
        """
        self._fibre_connection_detail = fibre_connection_detail

    @property
    def remote_target_connections(self):
        """
        Gets the remote_target_connections of this AsyncMirrorRemoteConnection.


        :return: The remote_target_connections of this AsyncMirrorRemoteConnection.
        :rtype: ScsiRemoteTargetConnections
        :required/optional: optional
        """
        return self._remote_target_connections

    @remote_target_connections.setter
    def remote_target_connections(self, remote_target_connections):
        """
        Sets the remote_target_connections of this AsyncMirrorRemoteConnection.


        :param remote_target_connections: The remote_target_connections of this AsyncMirrorRemoteConnection.
        :type: ScsiRemoteTargetConnections
        """
        self._remote_target_connections = remote_target_connections

    @property
    def local_port_ref(self):
        """
        Gets the local_port_ref of this AsyncMirrorRemoteConnection.
        Local initiator port for these connections.

        :return: The local_port_ref of this AsyncMirrorRemoteConnection.
        :rtype: str
        :required/optional: required
        """
        return self._local_port_ref

    @local_port_ref.setter
    def local_port_ref(self, local_port_ref):
        """
        Sets the local_port_ref of this AsyncMirrorRemoteConnection.
        Local initiator port for these connections.

        :param local_port_ref: The local_port_ref of this AsyncMirrorRemoteConnection.
        :type: str
        """
        self._local_port_ref = local_port_ref

    @property
    def controller(self):
        """
        Gets the controller of this AsyncMirrorRemoteConnection.


        :return: The controller of this AsyncMirrorRemoteConnection.
        :rtype: str
        :required/optional: optional
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """
        Sets the controller of this AsyncMirrorRemoteConnection.


        :param controller: The controller of this AsyncMirrorRemoteConnection.
        :type: str
        """
        self._controller = controller

    @property
    def io_interface_type(self):
        """
        Gets the io_interface_type of this AsyncMirrorRemoteConnection.


        :return: The io_interface_type of this AsyncMirrorRemoteConnection.
        :rtype: str
        :required/optional: optional
        """
        return self._io_interface_type

    @io_interface_type.setter
    def io_interface_type(self, io_interface_type):
        """
        Sets the io_interface_type of this AsyncMirrorRemoteConnection.


        :param io_interface_type: The io_interface_type of this AsyncMirrorRemoteConnection.
        :type: str
        """
        allowed_values = ["notImplemented", "scsi", "fc", "sata", "sas", "iscsi", "ib", "fcoe", "__UNDEFINED"]
        if io_interface_type not in allowed_values:
            raise ValueError(
                "Invalid value for `io_interface_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._io_interface_type = io_interface_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

