# coding: utf-8

"""
DiscoverResponse.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DiscoverResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DiscoverResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'request_id': 'int',  # (required parameter)
            'current_count': 'int',  # (required parameter)
            'total': 'int',  # (required parameter)
            'last_start': 'datetime',  # (required parameter)
            'discover_process_running': 'bool',  # (required parameter)
            'storage_systems': 'list[DiscoveredStorageSystem]'
        }

        self.attribute_map = {
            'request_id': 'requestId',  # (required parameter)
            'current_count': 'currentCount',  # (required parameter)
            'total': 'total',  # (required parameter)
            'last_start': 'lastStart',  # (required parameter)
            'discover_process_running': 'discoverProcessRunning',  # (required parameter)
            'storage_systems': 'storageSystems'
        }

        self._request_id = None
        self._current_count = None
        self._total = None
        self._last_start = None
        self._discover_process_running = None
        self._storage_systems = None

    @property
    def request_id(self):
        """
        Gets the request_id of this DiscoverResponse.
        Unique request id

        :return: The request_id of this DiscoverResponse.
        :rtype: int
        :required/optional: required
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this DiscoverResponse.
        Unique request id

        :param request_id: The request_id of this DiscoverResponse.
        :type: int
        """
        self._request_id = request_id

    @property
    def current_count(self):
        """
        Gets the current_count of this DiscoverResponse.
        The number of addresses checked

        :return: The current_count of this DiscoverResponse.
        :rtype: int
        :required/optional: required
        """
        return self._current_count

    @current_count.setter
    def current_count(self, current_count):
        """
        Sets the current_count of this DiscoverResponse.
        The number of addresses checked

        :param current_count: The current_count of this DiscoverResponse.
        :type: int
        """
        self._current_count = current_count

    @property
    def total(self):
        """
        Gets the total of this DiscoverResponse.
        total number of addresses to check

        :return: The total of this DiscoverResponse.
        :rtype: int
        :required/optional: required
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this DiscoverResponse.
        total number of addresses to check

        :param total: The total of this DiscoverResponse.
        :type: int
        """
        self._total = total

    @property
    def last_start(self):
        """
        Gets the last_start of this DiscoverResponse.
        Time when the last discovery was started null if a process has never been started

        :return: The last_start of this DiscoverResponse.
        :rtype: datetime
        :required/optional: required
        """
        return self._last_start

    @last_start.setter
    def last_start(self, last_start):
        """
        Sets the last_start of this DiscoverResponse.
        Time when the last discovery was started null if a process has never been started

        :param last_start: The last_start of this DiscoverResponse.
        :type: datetime
        """
        self._last_start = last_start

    @property
    def discover_process_running(self):
        """
        Gets the discover_process_running of this DiscoverResponse.
        Indicates if a discovery process is running

        :return: The discover_process_running of this DiscoverResponse.
        :rtype: bool
        :required/optional: required
        """
        return self._discover_process_running

    @discover_process_running.setter
    def discover_process_running(self, discover_process_running):
        """
        Sets the discover_process_running of this DiscoverResponse.
        Indicates if a discovery process is running

        :param discover_process_running: The discover_process_running of this DiscoverResponse.
        :type: bool
        """
        self._discover_process_running = discover_process_running

    @property
    def storage_systems(self):
        """
        Gets the storage_systems of this DiscoverResponse.
        List of storage systems discovered so far

        :return: The storage_systems of this DiscoverResponse.
        :rtype: list[DiscoveredStorageSystem]
        :required/optional: required
        """
        return self._storage_systems

    @storage_systems.setter
    def storage_systems(self, storage_systems):
        """
        Sets the storage_systems of this DiscoverResponse.
        List of storage systems discovered so far

        :param storage_systems: The storage_systems of this DiscoverResponse.
        :type: list[DiscoveredStorageSystem]
        """
        self._storage_systems = storage_systems

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

