# coding: utf-8

"""
DeviceAlertConfiguration.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DeviceAlertConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DeviceAlertConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alerting_enabled': 'bool',  # (required parameter)
            'email_server_address': 'str',  # (required parameter)
            'email_sender_address': 'str',  # (required parameter)
            'send_additional_contact_information': 'bool',  # (required parameter)
            'additional_contact_information': 'str',  # (required parameter)
            'recipient_email_addresses': 'list[str]'
        }

        self.attribute_map = {
            'alerting_enabled': 'alertingEnabled',  # (required parameter)
            'email_server_address': 'emailServerAddress',  # (required parameter)
            'email_sender_address': 'emailSenderAddress',  # (required parameter)
            'send_additional_contact_information': 'sendAdditionalContactInformation',  # (required parameter)
            'additional_contact_information': 'additionalContactInformation',  # (required parameter)
            'recipient_email_addresses': 'recipientEmailAddresses'
        }

        self._alerting_enabled = None
        self._email_server_address = None
        self._email_sender_address = None
        self._send_additional_contact_information = None
        self._additional_contact_information = None
        self._recipient_email_addresses = None

    @property
    def alerting_enabled(self):
        """
        Gets the alerting_enabled of this DeviceAlertConfiguration.
        Alerting is enabled

        :return: The alerting_enabled of this DeviceAlertConfiguration.
        :rtype: bool
        :required/optional: required
        """
        return self._alerting_enabled

    @alerting_enabled.setter
    def alerting_enabled(self, alerting_enabled):
        """
        Sets the alerting_enabled of this DeviceAlertConfiguration.
        Alerting is enabled

        :param alerting_enabled: The alerting_enabled of this DeviceAlertConfiguration.
        :type: bool
        """
        self._alerting_enabled = alerting_enabled

    @property
    def email_server_address(self):
        """
        Gets the email_server_address of this DeviceAlertConfiguration.
        The Alert email server address

        :return: The email_server_address of this DeviceAlertConfiguration.
        :rtype: str
        :required/optional: required
        """
        return self._email_server_address

    @email_server_address.setter
    def email_server_address(self, email_server_address):
        """
        Sets the email_server_address of this DeviceAlertConfiguration.
        The Alert email server address

        :param email_server_address: The email_server_address of this DeviceAlertConfiguration.
        :type: str
        """
        self._email_server_address = email_server_address

    @property
    def email_sender_address(self):
        """
        Gets the email_sender_address of this DeviceAlertConfiguration.
        The Alert email senders address

        :return: The email_sender_address of this DeviceAlertConfiguration.
        :rtype: str
        :required/optional: required
        """
        return self._email_sender_address

    @email_sender_address.setter
    def email_sender_address(self, email_sender_address):
        """
        Sets the email_sender_address of this DeviceAlertConfiguration.
        The Alert email senders address

        :param email_sender_address: The email_sender_address of this DeviceAlertConfiguration.
        :type: str
        """
        self._email_sender_address = email_sender_address

    @property
    def send_additional_contact_information(self):
        """
        Gets the send_additional_contact_information of this DeviceAlertConfiguration.
        Flag to send additional contact information with emails

        :return: The send_additional_contact_information of this DeviceAlertConfiguration.
        :rtype: bool
        :required/optional: required
        """
        return self._send_additional_contact_information

    @send_additional_contact_information.setter
    def send_additional_contact_information(self, send_additional_contact_information):
        """
        Sets the send_additional_contact_information of this DeviceAlertConfiguration.
        Flag to send additional contact information with emails

        :param send_additional_contact_information: The send_additional_contact_information of this DeviceAlertConfiguration.
        :type: bool
        """
        self._send_additional_contact_information = send_additional_contact_information

    @property
    def additional_contact_information(self):
        """
        Gets the additional_contact_information of this DeviceAlertConfiguration.
        Alert email additional contact information

        :return: The additional_contact_information of this DeviceAlertConfiguration.
        :rtype: str
        :required/optional: required
        """
        return self._additional_contact_information

    @additional_contact_information.setter
    def additional_contact_information(self, additional_contact_information):
        """
        Sets the additional_contact_information of this DeviceAlertConfiguration.
        Alert email additional contact information

        :param additional_contact_information: The additional_contact_information of this DeviceAlertConfiguration.
        :type: str
        """
        self._additional_contact_information = additional_contact_information

    @property
    def recipient_email_addresses(self):
        """
        Gets the recipient_email_addresses of this DeviceAlertConfiguration.
        Alert email recipient addresses

        :return: The recipient_email_addresses of this DeviceAlertConfiguration.
        :rtype: list[str]
        :required/optional: required
        """
        return self._recipient_email_addresses

    @recipient_email_addresses.setter
    def recipient_email_addresses(self, recipient_email_addresses):
        """
        Sets the recipient_email_addresses of this DeviceAlertConfiguration.
        Alert email recipient addresses

        :param recipient_email_addresses: The recipient_email_addresses of this DeviceAlertConfiguration.
        :type: list[str]
        """
        self._recipient_email_addresses = recipient_email_addresses

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

