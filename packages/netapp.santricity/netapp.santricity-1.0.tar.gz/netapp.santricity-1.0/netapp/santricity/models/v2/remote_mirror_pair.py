# coding: utf-8

"""
RemoteMirrorPair.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class RemoteMirrorPair(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RemoteMirrorPair - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'base': 'VolumeEx',  # (required parameter)
            'target': 'VolumeEx',  # (required parameter)
            'base_array': 'str',  # (required parameter)
            'target_array': 'str',  # (required parameter)
            'id': 'str',  # (required parameter)
            'last_start_time': 'datetime',  # (required parameter)
            'last_complete_time': 'datetime',  # (required parameter)
            'state': 'int',  # (required parameter)
            'priority': 'int',  # (required parameter)
            'write_mode': 'int',  # (required parameter)
            'auto_resync': 'bool',  # (required parameter)
            'feature_active': 'bool',  # (required parameter)
            'status': 'str',  # (required parameter)
            'base_status': 'str',  # (required parameter)
            'target_status': 'str'
        }

        self.attribute_map = {
            'base': 'base',  # (required parameter)
            'target': 'target',  # (required parameter)
            'base_array': 'baseArray',  # (required parameter)
            'target_array': 'targetArray',  # (required parameter)
            'id': 'id',  # (required parameter)
            'last_start_time': 'lastStartTime',  # (required parameter)
            'last_complete_time': 'lastCompleteTime',  # (required parameter)
            'state': 'state',  # (required parameter)
            'priority': 'priority',  # (required parameter)
            'write_mode': 'writeMode',  # (required parameter)
            'auto_resync': 'autoResync',  # (required parameter)
            'feature_active': 'featureActive',  # (required parameter)
            'status': 'status',  # (required parameter)
            'base_status': 'baseStatus',  # (required parameter)
            'target_status': 'targetStatus'
        }

        self._base = None
        self._target = None
        self._base_array = None
        self._target_array = None
        self._id = None
        self._last_start_time = None
        self._last_complete_time = None
        self._state = None
        self._priority = None
        self._write_mode = None
        self._auto_resync = None
        self._feature_active = None
        self._status = None
        self._base_status = None
        self._target_status = None

    @property
    def base(self):
        """
        Gets the base of this RemoteMirrorPair.


        :return: The base of this RemoteMirrorPair.
        :rtype: VolumeEx
        :required/optional: required
        """
        return self._base

    @base.setter
    def base(self, base):
        """
        Sets the base of this RemoteMirrorPair.


        :param base: The base of this RemoteMirrorPair.
        :type: VolumeEx
        """
        self._base = base

    @property
    def target(self):
        """
        Gets the target of this RemoteMirrorPair.


        :return: The target of this RemoteMirrorPair.
        :rtype: VolumeEx
        :required/optional: required
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this RemoteMirrorPair.


        :param target: The target of this RemoteMirrorPair.
        :type: VolumeEx
        """
        self._target = target

    @property
    def base_array(self):
        """
        Gets the base_array of this RemoteMirrorPair.


        :return: The base_array of this RemoteMirrorPair.
        :rtype: str
        :required/optional: required
        """
        return self._base_array

    @base_array.setter
    def base_array(self, base_array):
        """
        Sets the base_array of this RemoteMirrorPair.


        :param base_array: The base_array of this RemoteMirrorPair.
        :type: str
        """
        self._base_array = base_array

    @property
    def target_array(self):
        """
        Gets the target_array of this RemoteMirrorPair.


        :return: The target_array of this RemoteMirrorPair.
        :rtype: str
        :required/optional: required
        """
        return self._target_array

    @target_array.setter
    def target_array(self, target_array):
        """
        Sets the target_array of this RemoteMirrorPair.


        :param target_array: The target_array of this RemoteMirrorPair.
        :type: str
        """
        self._target_array = target_array

    @property
    def id(self):
        """
        Gets the id of this RemoteMirrorPair.


        :return: The id of this RemoteMirrorPair.
        :rtype: str
        :required/optional: required
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RemoteMirrorPair.


        :param id: The id of this RemoteMirrorPair.
        :type: str
        """
        self._id = id

    @property
    def last_start_time(self):
        """
        Gets the last_start_time of this RemoteMirrorPair.


        :return: The last_start_time of this RemoteMirrorPair.
        :rtype: datetime
        :required/optional: required
        """
        return self._last_start_time

    @last_start_time.setter
    def last_start_time(self, last_start_time):
        """
        Sets the last_start_time of this RemoteMirrorPair.


        :param last_start_time: The last_start_time of this RemoteMirrorPair.
        :type: datetime
        """
        self._last_start_time = last_start_time

    @property
    def last_complete_time(self):
        """
        Gets the last_complete_time of this RemoteMirrorPair.


        :return: The last_complete_time of this RemoteMirrorPair.
        :rtype: datetime
        :required/optional: required
        """
        return self._last_complete_time

    @last_complete_time.setter
    def last_complete_time(self, last_complete_time):
        """
        Sets the last_complete_time of this RemoteMirrorPair.


        :param last_complete_time: The last_complete_time of this RemoteMirrorPair.
        :type: datetime
        """
        self._last_complete_time = last_complete_time

    @property
    def state(self):
        """
        Gets the state of this RemoteMirrorPair.


        :return: The state of this RemoteMirrorPair.
        :rtype: int
        :required/optional: required
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this RemoteMirrorPair.


        :param state: The state of this RemoteMirrorPair.
        :type: int
        """
        self._state = state

    @property
    def priority(self):
        """
        Gets the priority of this RemoteMirrorPair.


        :return: The priority of this RemoteMirrorPair.
        :rtype: int
        :required/optional: required
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this RemoteMirrorPair.


        :param priority: The priority of this RemoteMirrorPair.
        :type: int
        """
        self._priority = priority

    @property
    def write_mode(self):
        """
        Gets the write_mode of this RemoteMirrorPair.


        :return: The write_mode of this RemoteMirrorPair.
        :rtype: int
        :required/optional: required
        """
        return self._write_mode

    @write_mode.setter
    def write_mode(self, write_mode):
        """
        Sets the write_mode of this RemoteMirrorPair.


        :param write_mode: The write_mode of this RemoteMirrorPair.
        :type: int
        """
        self._write_mode = write_mode

    @property
    def auto_resync(self):
        """
        Gets the auto_resync of this RemoteMirrorPair.


        :return: The auto_resync of this RemoteMirrorPair.
        :rtype: bool
        :required/optional: required
        """
        return self._auto_resync

    @auto_resync.setter
    def auto_resync(self, auto_resync):
        """
        Sets the auto_resync of this RemoteMirrorPair.


        :param auto_resync: The auto_resync of this RemoteMirrorPair.
        :type: bool
        """
        self._auto_resync = auto_resync

    @property
    def feature_active(self):
        """
        Gets the feature_active of this RemoteMirrorPair.


        :return: The feature_active of this RemoteMirrorPair.
        :rtype: bool
        :required/optional: required
        """
        return self._feature_active

    @feature_active.setter
    def feature_active(self, feature_active):
        """
        Sets the feature_active of this RemoteMirrorPair.


        :param feature_active: The feature_active of this RemoteMirrorPair.
        :type: bool
        """
        self._feature_active = feature_active

    @property
    def status(self):
        """
        Gets the status of this RemoteMirrorPair.


        :return: The status of this RemoteMirrorPair.
        :rtype: str
        :required/optional: required
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this RemoteMirrorPair.


        :param status: The status of this RemoteMirrorPair.
        :type: str
        """
        allowed_values = ["optimal", "unsynchronized", "synchronizing", "notready", "suspended", "failed", "failedsuspended", "degradedSynchronizing", "degradedUnsynchronized", "__UNDEFINED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def base_status(self):
        """
        Gets the base_status of this RemoteMirrorPair.


        :return: The base_status of this RemoteMirrorPair.
        :rtype: str
        :required/optional: required
        """
        return self._base_status

    @base_status.setter
    def base_status(self, base_status):
        """
        Sets the base_status of this RemoteMirrorPair.


        :param base_status: The base_status of this RemoteMirrorPair.
        :type: str
        """
        allowed_values = ["optimal", "unsynchronized", "synchronizing", "notready", "suspended", "failed", "failedsuspended", "degradedSynchronizing", "degradedUnsynchronized", "__UNDEFINED"]
        if base_status not in allowed_values:
            raise ValueError(
                "Invalid value for `base_status`, must be one of {0}"
                .format(allowed_values)
            )
        self._base_status = base_status

    @property
    def target_status(self):
        """
        Gets the target_status of this RemoteMirrorPair.


        :return: The target_status of this RemoteMirrorPair.
        :rtype: str
        :required/optional: required
        """
        return self._target_status

    @target_status.setter
    def target_status(self, target_status):
        """
        Sets the target_status of this RemoteMirrorPair.


        :param target_status: The target_status of this RemoteMirrorPair.
        :type: str
        """
        allowed_values = ["optimal", "unsynchronized", "synchronizing", "notready", "suspended", "failed", "failedsuspended", "degradedSynchronizing", "degradedUnsynchronized", "__UNDEFINED"]
        if target_status not in allowed_values:
            raise ValueError(
                "Invalid value for `target_status`, must be one of {0}"
                .format(allowed_values)
            )
        self._target_status = target_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

