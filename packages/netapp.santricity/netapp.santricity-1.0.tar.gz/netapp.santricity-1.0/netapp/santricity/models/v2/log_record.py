# coding: utf-8

"""
LogRecord.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class LogRecord(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LogRecord - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'level': 'Level',  
            'sequence_number': 'int',  
            'source_class_name': 'str',  
            'source_method_name': 'str',  
            'message': 'str',  
            'thread_id': 'int',  
            'millis': 'int',  
            'thrown': 'Throwable',  
            'logger_name': 'str',  
            'resource_bundle_name': 'str',  
            'parameters': 'list[object]',  
            'resource_bundle': 'ResourceBundle'
        }

        self.attribute_map = {
            'level': 'level',  
            'sequence_number': 'sequenceNumber',  
            'source_class_name': 'sourceClassName',  
            'source_method_name': 'sourceMethodName',  
            'message': 'message',  
            'thread_id': 'threadID',  
            'millis': 'millis',  
            'thrown': 'thrown',  
            'logger_name': 'loggerName',  
            'resource_bundle_name': 'resourceBundleName',  
            'parameters': 'parameters',  
            'resource_bundle': 'resourceBundle'
        }

        self._level = None
        self._sequence_number = None
        self._source_class_name = None
        self._source_method_name = None
        self._message = None
        self._thread_id = None
        self._millis = None
        self._thrown = None
        self._logger_name = None
        self._resource_bundle_name = None
        self._parameters = None
        self._resource_bundle = None

    @property
    def level(self):
        """
        Gets the level of this LogRecord.


        :return: The level of this LogRecord.
        :rtype: Level
        :required/optional: optional
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this LogRecord.


        :param level: The level of this LogRecord.
        :type: Level
        """
        self._level = level

    @property
    def sequence_number(self):
        """
        Gets the sequence_number of this LogRecord.


        :return: The sequence_number of this LogRecord.
        :rtype: int
        :required/optional: optional
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """
        Sets the sequence_number of this LogRecord.


        :param sequence_number: The sequence_number of this LogRecord.
        :type: int
        """
        self._sequence_number = sequence_number

    @property
    def source_class_name(self):
        """
        Gets the source_class_name of this LogRecord.


        :return: The source_class_name of this LogRecord.
        :rtype: str
        :required/optional: optional
        """
        return self._source_class_name

    @source_class_name.setter
    def source_class_name(self, source_class_name):
        """
        Sets the source_class_name of this LogRecord.


        :param source_class_name: The source_class_name of this LogRecord.
        :type: str
        """
        self._source_class_name = source_class_name

    @property
    def source_method_name(self):
        """
        Gets the source_method_name of this LogRecord.


        :return: The source_method_name of this LogRecord.
        :rtype: str
        :required/optional: optional
        """
        return self._source_method_name

    @source_method_name.setter
    def source_method_name(self, source_method_name):
        """
        Sets the source_method_name of this LogRecord.


        :param source_method_name: The source_method_name of this LogRecord.
        :type: str
        """
        self._source_method_name = source_method_name

    @property
    def message(self):
        """
        Gets the message of this LogRecord.


        :return: The message of this LogRecord.
        :rtype: str
        :required/optional: optional
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this LogRecord.


        :param message: The message of this LogRecord.
        :type: str
        """
        self._message = message

    @property
    def thread_id(self):
        """
        Gets the thread_id of this LogRecord.


        :return: The thread_id of this LogRecord.
        :rtype: int
        :required/optional: optional
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """
        Sets the thread_id of this LogRecord.


        :param thread_id: The thread_id of this LogRecord.
        :type: int
        """
        self._thread_id = thread_id

    @property
    def millis(self):
        """
        Gets the millis of this LogRecord.


        :return: The millis of this LogRecord.
        :rtype: int
        :required/optional: optional
        """
        return self._millis

    @millis.setter
    def millis(self, millis):
        """
        Sets the millis of this LogRecord.


        :param millis: The millis of this LogRecord.
        :type: int
        """
        self._millis = millis

    @property
    def thrown(self):
        """
        Gets the thrown of this LogRecord.


        :return: The thrown of this LogRecord.
        :rtype: Throwable
        :required/optional: optional
        """
        return self._thrown

    @thrown.setter
    def thrown(self, thrown):
        """
        Sets the thrown of this LogRecord.


        :param thrown: The thrown of this LogRecord.
        :type: Throwable
        """
        self._thrown = thrown

    @property
    def logger_name(self):
        """
        Gets the logger_name of this LogRecord.


        :return: The logger_name of this LogRecord.
        :rtype: str
        :required/optional: optional
        """
        return self._logger_name

    @logger_name.setter
    def logger_name(self, logger_name):
        """
        Sets the logger_name of this LogRecord.


        :param logger_name: The logger_name of this LogRecord.
        :type: str
        """
        self._logger_name = logger_name

    @property
    def resource_bundle_name(self):
        """
        Gets the resource_bundle_name of this LogRecord.


        :return: The resource_bundle_name of this LogRecord.
        :rtype: str
        :required/optional: optional
        """
        return self._resource_bundle_name

    @resource_bundle_name.setter
    def resource_bundle_name(self, resource_bundle_name):
        """
        Sets the resource_bundle_name of this LogRecord.


        :param resource_bundle_name: The resource_bundle_name of this LogRecord.
        :type: str
        """
        self._resource_bundle_name = resource_bundle_name

    @property
    def parameters(self):
        """
        Gets the parameters of this LogRecord.


        :return: The parameters of this LogRecord.
        :rtype: list[object]
        :required/optional: optional
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this LogRecord.


        :param parameters: The parameters of this LogRecord.
        :type: list[object]
        """
        self._parameters = parameters

    @property
    def resource_bundle(self):
        """
        Gets the resource_bundle of this LogRecord.


        :return: The resource_bundle of this LogRecord.
        :rtype: ResourceBundle
        :required/optional: optional
        """
        return self._resource_bundle

    @resource_bundle.setter
    def resource_bundle(self, resource_bundle):
        """
        Sets the resource_bundle of this LogRecord.


        :param resource_bundle: The resource_bundle of this LogRecord.
        :type: ResourceBundle
        """
        self._resource_bundle = resource_bundle

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

