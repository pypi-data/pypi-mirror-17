# coding: utf-8

"""
LegacySnapshotCreateRequest.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class LegacySnapshotCreateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LegacySnapshotCreateRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'base_volume_id': 'str',  # (required parameter)
            'name': 'str',  # (required parameter)
            'repository_percentage': 'float',  
            'warning_threshold': 'int',  # (required parameter)
            'full_policy': 'str',  
            'storage_pool_id': 'str'
        }

        self.attribute_map = {
            'base_volume_id': 'baseVolumeId',  # (required parameter)
            'name': 'name',  # (required parameter)
            'repository_percentage': 'repositoryPercentage',  
            'warning_threshold': 'warningThreshold',  # (required parameter)
            'full_policy': 'fullPolicy',  
            'storage_pool_id': 'storagePoolId'
        }

        self._base_volume_id = None
        self._name = None
        self._repository_percentage = None
        self._warning_threshold = None
        self._full_policy = None
        self._storage_pool_id = None

    @property
    def base_volume_id(self):
        """
        Gets the base_volume_id of this LegacySnapshotCreateRequest.
        The identifier of the volume or thin volume for the new snapshot group.

        :return: The base_volume_id of this LegacySnapshotCreateRequest.
        :rtype: str
        :required/optional: required
        """
        return self._base_volume_id

    @base_volume_id.setter
    def base_volume_id(self, base_volume_id):
        """
        Sets the base_volume_id of this LegacySnapshotCreateRequest.
        The identifier of the volume or thin volume for the new snapshot group.

        :param base_volume_id: The base_volume_id of this LegacySnapshotCreateRequest.
        :type: str
        """
        self._base_volume_id = base_volume_id

    @property
    def name(self):
        """
        Gets the name of this LegacySnapshotCreateRequest.
        The name of the new snapshot.

        :return: The name of this LegacySnapshotCreateRequest.
        :rtype: str
        :required/optional: required
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LegacySnapshotCreateRequest.
        The name of the new snapshot.

        :param name: The name of this LegacySnapshotCreateRequest.
        :type: str
        """
        self._name = name

    @property
    def repository_percentage(self):
        """
        Gets the repository_percentage of this LegacySnapshotCreateRequest.
        Size of the snapshot repository in relation to the base volume capacity

        :return: The repository_percentage of this LegacySnapshotCreateRequest.
        :rtype: float
        :required/optional: optional
        """
        return self._repository_percentage

    @repository_percentage.setter
    def repository_percentage(self, repository_percentage):
        """
        Sets the repository_percentage of this LegacySnapshotCreateRequest.
        Size of the snapshot repository in relation to the base volume capacity

        :param repository_percentage: The repository_percentage of this LegacySnapshotCreateRequest.
        :type: float
        """
        self._repository_percentage = repository_percentage

    @property
    def warning_threshold(self):
        """
        Gets the warning_threshold of this LegacySnapshotCreateRequest.
        Warn the user when the repository is % full.

        :return: The warning_threshold of this LegacySnapshotCreateRequest.
        :rtype: int
        :required/optional: required
        """
        return self._warning_threshold

    @warning_threshold.setter
    def warning_threshold(self, warning_threshold):
        """
        Sets the warning_threshold of this LegacySnapshotCreateRequest.
        Warn the user when the repository is % full.

        :param warning_threshold: The warning_threshold of this LegacySnapshotCreateRequest.
        :type: int
        """
        self._warning_threshold = warning_threshold

    @property
    def full_policy(self):
        """
        Gets the full_policy of this LegacySnapshotCreateRequest.
        The behavior on when the data repository becomes full.

        :return: The full_policy of this LegacySnapshotCreateRequest.
        :rtype: str
        :required/optional: optional
        """
        return self._full_policy

    @full_policy.setter
    def full_policy(self, full_policy):
        """
        Sets the full_policy of this LegacySnapshotCreateRequest.
        The behavior on when the data repository becomes full.

        :param full_policy: The full_policy of this LegacySnapshotCreateRequest.
        :type: str
        """
        allowed_values = ["failwrites", "failsnap", "__UNDEFINED"]
        if full_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `full_policy`, must be one of {0}"
                .format(allowed_values)
            )
        self._full_policy = full_policy

    @property
    def storage_pool_id(self):
        """
        Gets the storage_pool_id of this LegacySnapshotCreateRequest.
        The identifier of the storage pool to allocate the repository volume.

        :return: The storage_pool_id of this LegacySnapshotCreateRequest.
        :rtype: str
        :required/optional: optional
        """
        return self._storage_pool_id

    @storage_pool_id.setter
    def storage_pool_id(self, storage_pool_id):
        """
        Sets the storage_pool_id of this LegacySnapshotCreateRequest.
        The identifier of the storage pool to allocate the repository volume.

        :param storage_pool_id: The storage_pool_id of this LegacySnapshotCreateRequest.
        :type: str
        """
        self._storage_pool_id = storage_pool_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

