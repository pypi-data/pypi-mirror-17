# coding: utf-8

"""
FirmwareUpgradeHealthCheckResult.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class FirmwareUpgradeHealthCheckResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FirmwareUpgradeHealthCheckResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'storage_device_id': 'str',  # (required parameter)
            'storage_device_name': 'str',  # (required parameter)
            'storage_device_wwn': 'str',  # (required parameter)
            'processing_time_ms': 'int',  # (required parameter)
            'rerun': 'bool',  # (required parameter)
            'storage_device_accessible': 'StorageDeviceHealthCheck',  # (required parameter)
            'spm_database_verification': 'SpmDatabaseHealthCheck',  # (required parameter)
            'configuration_database_check': 'ConfigurationDbValidationCheck',  # (required parameter)
            'object_graph_sync_check': 'ObjectGraphSyncCheck',  # (required parameter)
            'volume_groups_complete': 'StorageDeviceHealthCheck',  # (required parameter)
            'controller_status_optimal': 'StorageDeviceHealthCheck',  # (required parameter)
            'hot_spares_in_use': 'StorageDeviceHealthCheck',  # (required parameter)
            'missing_volumes': 'StorageDeviceHealthCheck',  # (required parameter)
            'drive_check': 'StorageDeviceHealthCheck',  # (required parameter)
            'exclusive_operations': 'ExclusiveOperationCheck',  # (required parameter)
            'failed_drives_present': 'StorageDeviceHealthCheck',  # (required parameter)
            'valid_password_set': 'StorageDeviceHealthCheck',  # (required parameter)
            'mel_check': 'MelEventHealthCheck',  # (required parameter)
            'successful': 'bool'
        }

        self.attribute_map = {
            'storage_device_id': 'storageDeviceId',  # (required parameter)
            'storage_device_name': 'storageDeviceName',  # (required parameter)
            'storage_device_wwn': 'storageDeviceWWN',  # (required parameter)
            'processing_time_ms': 'processingTimeMS',  # (required parameter)
            'rerun': 'rerun',  # (required parameter)
            'storage_device_accessible': 'storageDeviceAccessible',  # (required parameter)
            'spm_database_verification': 'spmDatabaseVerification',  # (required parameter)
            'configuration_database_check': 'configurationDatabaseCheck',  # (required parameter)
            'object_graph_sync_check': 'objectGraphSyncCheck',  # (required parameter)
            'volume_groups_complete': 'volumeGroupsComplete',  # (required parameter)
            'controller_status_optimal': 'controllerStatusOptimal',  # (required parameter)
            'hot_spares_in_use': 'hotSparesInUse',  # (required parameter)
            'missing_volumes': 'missingVolumes',  # (required parameter)
            'drive_check': 'driveCheck',  # (required parameter)
            'exclusive_operations': 'exclusiveOperations',  # (required parameter)
            'failed_drives_present': 'failedDrivesPresent',  # (required parameter)
            'valid_password_set': 'validPasswordSet',  # (required parameter)
            'mel_check': 'melCheck',  # (required parameter)
            'successful': 'successful'
        }

        self._storage_device_id = None
        self._storage_device_name = None
        self._storage_device_wwn = None
        self._processing_time_ms = None
        self._rerun = None
        self._storage_device_accessible = None
        self._spm_database_verification = None
        self._configuration_database_check = None
        self._object_graph_sync_check = None
        self._volume_groups_complete = None
        self._controller_status_optimal = None
        self._hot_spares_in_use = None
        self._missing_volumes = None
        self._drive_check = None
        self._exclusive_operations = None
        self._failed_drives_present = None
        self._valid_password_set = None
        self._mel_check = None
        self._successful = None

    @property
    def storage_device_id(self):
        """
        Gets the storage_device_id of this FirmwareUpgradeHealthCheckResult.


        :return: The storage_device_id of this FirmwareUpgradeHealthCheckResult.
        :rtype: str
        :required/optional: required
        """
        return self._storage_device_id

    @storage_device_id.setter
    def storage_device_id(self, storage_device_id):
        """
        Sets the storage_device_id of this FirmwareUpgradeHealthCheckResult.


        :param storage_device_id: The storage_device_id of this FirmwareUpgradeHealthCheckResult.
        :type: str
        """
        self._storage_device_id = storage_device_id

    @property
    def storage_device_name(self):
        """
        Gets the storage_device_name of this FirmwareUpgradeHealthCheckResult.


        :return: The storage_device_name of this FirmwareUpgradeHealthCheckResult.
        :rtype: str
        :required/optional: required
        """
        return self._storage_device_name

    @storage_device_name.setter
    def storage_device_name(self, storage_device_name):
        """
        Sets the storage_device_name of this FirmwareUpgradeHealthCheckResult.


        :param storage_device_name: The storage_device_name of this FirmwareUpgradeHealthCheckResult.
        :type: str
        """
        self._storage_device_name = storage_device_name

    @property
    def storage_device_wwn(self):
        """
        Gets the storage_device_wwn of this FirmwareUpgradeHealthCheckResult.


        :return: The storage_device_wwn of this FirmwareUpgradeHealthCheckResult.
        :rtype: str
        :required/optional: required
        """
        return self._storage_device_wwn

    @storage_device_wwn.setter
    def storage_device_wwn(self, storage_device_wwn):
        """
        Sets the storage_device_wwn of this FirmwareUpgradeHealthCheckResult.


        :param storage_device_wwn: The storage_device_wwn of this FirmwareUpgradeHealthCheckResult.
        :type: str
        """
        self._storage_device_wwn = storage_device_wwn

    @property
    def processing_time_ms(self):
        """
        Gets the processing_time_ms of this FirmwareUpgradeHealthCheckResult.


        :return: The processing_time_ms of this FirmwareUpgradeHealthCheckResult.
        :rtype: int
        :required/optional: required
        """
        return self._processing_time_ms

    @processing_time_ms.setter
    def processing_time_ms(self, processing_time_ms):
        """
        Sets the processing_time_ms of this FirmwareUpgradeHealthCheckResult.


        :param processing_time_ms: The processing_time_ms of this FirmwareUpgradeHealthCheckResult.
        :type: int
        """
        self._processing_time_ms = processing_time_ms

    @property
    def rerun(self):
        """
        Gets the rerun of this FirmwareUpgradeHealthCheckResult.
        Info about test run for internal use

        :return: The rerun of this FirmwareUpgradeHealthCheckResult.
        :rtype: bool
        :required/optional: required
        """
        return self._rerun

    @rerun.setter
    def rerun(self, rerun):
        """
        Sets the rerun of this FirmwareUpgradeHealthCheckResult.
        Info about test run for internal use

        :param rerun: The rerun of this FirmwareUpgradeHealthCheckResult.
        :type: bool
        """
        self._rerun = rerun

    @property
    def storage_device_accessible(self):
        """
        Gets the storage_device_accessible of this FirmwareUpgradeHealthCheckResult.
        Verify the storage-system is contactable.

        :return: The storage_device_accessible of this FirmwareUpgradeHealthCheckResult.
        :rtype: StorageDeviceHealthCheck
        :required/optional: required
        """
        return self._storage_device_accessible

    @storage_device_accessible.setter
    def storage_device_accessible(self, storage_device_accessible):
        """
        Sets the storage_device_accessible of this FirmwareUpgradeHealthCheckResult.
        Verify the storage-system is contactable.

        :param storage_device_accessible: The storage_device_accessible of this FirmwareUpgradeHealthCheckResult.
        :type: StorageDeviceHealthCheck
        """
        self._storage_device_accessible = storage_device_accessible

    @property
    def spm_database_verification(self):
        """
        Gets the spm_database_verification of this FirmwareUpgradeHealthCheckResult.
        Validate a database internal to the controller.

        :return: The spm_database_verification of this FirmwareUpgradeHealthCheckResult.
        :rtype: SpmDatabaseHealthCheck
        :required/optional: required
        """
        return self._spm_database_verification

    @spm_database_verification.setter
    def spm_database_verification(self, spm_database_verification):
        """
        Sets the spm_database_verification of this FirmwareUpgradeHealthCheckResult.
        Validate a database internal to the controller.

        :param spm_database_verification: The spm_database_verification of this FirmwareUpgradeHealthCheckResult.
        :type: SpmDatabaseHealthCheck
        """
        self._spm_database_verification = spm_database_verification

    @property
    def configuration_database_check(self):
        """
        Gets the configuration_database_check of this FirmwareUpgradeHealthCheckResult.
        Validate a database internal to the controller.

        :return: The configuration_database_check of this FirmwareUpgradeHealthCheckResult.
        :rtype: ConfigurationDbValidationCheck
        :required/optional: required
        """
        return self._configuration_database_check

    @configuration_database_check.setter
    def configuration_database_check(self, configuration_database_check):
        """
        Sets the configuration_database_check of this FirmwareUpgradeHealthCheckResult.
        Validate a database internal to the controller.

        :param configuration_database_check: The configuration_database_check of this FirmwareUpgradeHealthCheckResult.
        :type: ConfigurationDbValidationCheck
        """
        self._configuration_database_check = configuration_database_check

    @property
    def object_graph_sync_check(self):
        """
        Gets the object_graph_sync_check of this FirmwareUpgradeHealthCheckResult.
        Verify that ObjectGraph data is synchronized between the two controllers.

        :return: The object_graph_sync_check of this FirmwareUpgradeHealthCheckResult.
        :rtype: ObjectGraphSyncCheck
        :required/optional: required
        """
        return self._object_graph_sync_check

    @object_graph_sync_check.setter
    def object_graph_sync_check(self, object_graph_sync_check):
        """
        Sets the object_graph_sync_check of this FirmwareUpgradeHealthCheckResult.
        Verify that ObjectGraph data is synchronized between the two controllers.

        :param object_graph_sync_check: The object_graph_sync_check of this FirmwareUpgradeHealthCheckResult.
        :type: ObjectGraphSyncCheck
        """
        self._object_graph_sync_check = object_graph_sync_check

    @property
    def volume_groups_complete(self):
        """
        Gets the volume_groups_complete of this FirmwareUpgradeHealthCheckResult.
        Verify there are no volume groups that are not in a full state of redundancy.

        :return: The volume_groups_complete of this FirmwareUpgradeHealthCheckResult.
        :rtype: StorageDeviceHealthCheck
        :required/optional: required
        """
        return self._volume_groups_complete

    @volume_groups_complete.setter
    def volume_groups_complete(self, volume_groups_complete):
        """
        Sets the volume_groups_complete of this FirmwareUpgradeHealthCheckResult.
        Verify there are no volume groups that are not in a full state of redundancy.

        :param volume_groups_complete: The volume_groups_complete of this FirmwareUpgradeHealthCheckResult.
        :type: StorageDeviceHealthCheck
        """
        self._volume_groups_complete = volume_groups_complete

    @property
    def controller_status_optimal(self):
        """
        Gets the controller_status_optimal of this FirmwareUpgradeHealthCheckResult.
        Verify the state of both controllers is optimal.

        :return: The controller_status_optimal of this FirmwareUpgradeHealthCheckResult.
        :rtype: StorageDeviceHealthCheck
        :required/optional: required
        """
        return self._controller_status_optimal

    @controller_status_optimal.setter
    def controller_status_optimal(self, controller_status_optimal):
        """
        Sets the controller_status_optimal of this FirmwareUpgradeHealthCheckResult.
        Verify the state of both controllers is optimal.

        :param controller_status_optimal: The controller_status_optimal of this FirmwareUpgradeHealthCheckResult.
        :type: StorageDeviceHealthCheck
        """
        self._controller_status_optimal = controller_status_optimal

    @property
    def hot_spares_in_use(self):
        """
        Gets the hot_spares_in_use of this FirmwareUpgradeHealthCheckResult.
        Verify that hot spares are not in use (due to drives in a non-optimal state).

        :return: The hot_spares_in_use of this FirmwareUpgradeHealthCheckResult.
        :rtype: StorageDeviceHealthCheck
        :required/optional: required
        """
        return self._hot_spares_in_use

    @hot_spares_in_use.setter
    def hot_spares_in_use(self, hot_spares_in_use):
        """
        Sets the hot_spares_in_use of this FirmwareUpgradeHealthCheckResult.
        Verify that hot spares are not in use (due to drives in a non-optimal state).

        :param hot_spares_in_use: The hot_spares_in_use of this FirmwareUpgradeHealthCheckResult.
        :type: StorageDeviceHealthCheck
        """
        self._hot_spares_in_use = hot_spares_in_use

    @property
    def missing_volumes(self):
        """
        Gets the missing_volumes of this FirmwareUpgradeHealthCheckResult.
        Verify that there are no missing drives/volume-groups.

        :return: The missing_volumes of this FirmwareUpgradeHealthCheckResult.
        :rtype: StorageDeviceHealthCheck
        :required/optional: required
        """
        return self._missing_volumes

    @missing_volumes.setter
    def missing_volumes(self, missing_volumes):
        """
        Sets the missing_volumes of this FirmwareUpgradeHealthCheckResult.
        Verify that there are no missing drives/volume-groups.

        :param missing_volumes: The missing_volumes of this FirmwareUpgradeHealthCheckResult.
        :type: StorageDeviceHealthCheck
        """
        self._missing_volumes = missing_volumes

    @property
    def drive_check(self):
        """
        Gets the drive_check of this FirmwareUpgradeHealthCheckResult.
        Verify that at least one optimal drive is present

        :return: The drive_check of this FirmwareUpgradeHealthCheckResult.
        :rtype: StorageDeviceHealthCheck
        :required/optional: required
        """
        return self._drive_check

    @drive_check.setter
    def drive_check(self, drive_check):
        """
        Sets the drive_check of this FirmwareUpgradeHealthCheckResult.
        Verify that at least one optimal drive is present

        :param drive_check: The drive_check of this FirmwareUpgradeHealthCheckResult.
        :type: StorageDeviceHealthCheck
        """
        self._drive_check = drive_check

    @property
    def exclusive_operations(self):
        """
        Gets the exclusive_operations of this FirmwareUpgradeHealthCheckResult.
        An upgrade operation cannot proceed if an exclusive operation is in progress on a volume. Examples: volume expansion, RAID type migration.

        :return: The exclusive_operations of this FirmwareUpgradeHealthCheckResult.
        :rtype: ExclusiveOperationCheck
        :required/optional: required
        """
        return self._exclusive_operations

    @exclusive_operations.setter
    def exclusive_operations(self, exclusive_operations):
        """
        Sets the exclusive_operations of this FirmwareUpgradeHealthCheckResult.
        An upgrade operation cannot proceed if an exclusive operation is in progress on a volume. Examples: volume expansion, RAID type migration.

        :param exclusive_operations: The exclusive_operations of this FirmwareUpgradeHealthCheckResult.
        :type: ExclusiveOperationCheck
        """
        self._exclusive_operations = exclusive_operations

    @property
    def failed_drives_present(self):
        """
        Gets the failed_drives_present of this FirmwareUpgradeHealthCheckResult.


        :return: The failed_drives_present of this FirmwareUpgradeHealthCheckResult.
        :rtype: StorageDeviceHealthCheck
        :required/optional: required
        """
        return self._failed_drives_present

    @failed_drives_present.setter
    def failed_drives_present(self, failed_drives_present):
        """
        Sets the failed_drives_present of this FirmwareUpgradeHealthCheckResult.


        :param failed_drives_present: The failed_drives_present of this FirmwareUpgradeHealthCheckResult.
        :type: StorageDeviceHealthCheck
        """
        self._failed_drives_present = failed_drives_present

    @property
    def valid_password_set(self):
        """
        Gets the valid_password_set of this FirmwareUpgradeHealthCheckResult.


        :return: The valid_password_set of this FirmwareUpgradeHealthCheckResult.
        :rtype: StorageDeviceHealthCheck
        :required/optional: required
        """
        return self._valid_password_set

    @valid_password_set.setter
    def valid_password_set(self, valid_password_set):
        """
        Sets the valid_password_set of this FirmwareUpgradeHealthCheckResult.


        :param valid_password_set: The valid_password_set of this FirmwareUpgradeHealthCheckResult.
        :type: StorageDeviceHealthCheck
        """
        self._valid_password_set = valid_password_set

    @property
    def mel_check(self):
        """
        Gets the mel_check of this FirmwareUpgradeHealthCheckResult.


        :return: The mel_check of this FirmwareUpgradeHealthCheckResult.
        :rtype: MelEventHealthCheck
        :required/optional: required
        """
        return self._mel_check

    @mel_check.setter
    def mel_check(self, mel_check):
        """
        Sets the mel_check of this FirmwareUpgradeHealthCheckResult.


        :param mel_check: The mel_check of this FirmwareUpgradeHealthCheckResult.
        :type: MelEventHealthCheck
        """
        self._mel_check = mel_check

    @property
    def successful(self):
        """
        Gets the successful of this FirmwareUpgradeHealthCheckResult.


        :return: The successful of this FirmwareUpgradeHealthCheckResult.
        :rtype: bool
        :required/optional: required
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """
        Sets the successful of this FirmwareUpgradeHealthCheckResult.


        :param successful: The successful of this FirmwareUpgradeHealthCheckResult.
        :type: bool
        """
        self._successful = successful

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

