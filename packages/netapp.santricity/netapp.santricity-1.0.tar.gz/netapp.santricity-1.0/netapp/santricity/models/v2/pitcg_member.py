# coding: utf-8

"""
PITCGMember.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class PITCGMember(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PITCGMember - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'consistency_group_id': 'str',  # (required parameter)
            'volume_id': 'str',  # (required parameter)
            'volume_wwn': 'str',  # (required parameter)
            'base_volume_name': 'str',  # (required parameter)
            'cluster_size': 'int',  # (required parameter)
            'total_repository_volumes': 'int',  # (required parameter)
            'total_repository_capacity': 'int',  # (required parameter)
            'used_repository_capacity': 'int',  # (required parameter)
            'full_warn_threshold': 'int',  # (required parameter)
            'total_snapshot_images': 'int',  # (required parameter)
            'total_snapshot_volumes': 'int',  # (required parameter)
            'auto_delete_snapshots': 'bool',  # (required parameter)
            'auto_delete_limit': 'int',  # (required parameter)
            'pit_group_id': 'str',  # (required parameter)
            'repository_volume': 'str'
        }

        self.attribute_map = {
            'consistency_group_id': 'consistencyGroupId',  # (required parameter)
            'volume_id': 'volumeId',  # (required parameter)
            'volume_wwn': 'volumeWwn',  # (required parameter)
            'base_volume_name': 'baseVolumeName',  # (required parameter)
            'cluster_size': 'clusterSize',  # (required parameter)
            'total_repository_volumes': 'totalRepositoryVolumes',  # (required parameter)
            'total_repository_capacity': 'totalRepositoryCapacity',  # (required parameter)
            'used_repository_capacity': 'usedRepositoryCapacity',  # (required parameter)
            'full_warn_threshold': 'fullWarnThreshold',  # (required parameter)
            'total_snapshot_images': 'totalSnapshotImages',  # (required parameter)
            'total_snapshot_volumes': 'totalSnapshotVolumes',  # (required parameter)
            'auto_delete_snapshots': 'autoDeleteSnapshots',  # (required parameter)
            'auto_delete_limit': 'autoDeleteLimit',  # (required parameter)
            'pit_group_id': 'pitGroupId',  # (required parameter)
            'repository_volume': 'repositoryVolume'
        }

        self._consistency_group_id = None
        self._volume_id = None
        self._volume_wwn = None
        self._base_volume_name = None
        self._cluster_size = None
        self._total_repository_volumes = None
        self._total_repository_capacity = None
        self._used_repository_capacity = None
        self._full_warn_threshold = None
        self._total_snapshot_images = None
        self._total_snapshot_volumes = None
        self._auto_delete_snapshots = None
        self._auto_delete_limit = None
        self._pit_group_id = None
        self._repository_volume = None

    @property
    def consistency_group_id(self):
        """
        Gets the consistency_group_id of this PITCGMember.


        :return: The consistency_group_id of this PITCGMember.
        :rtype: str
        :required/optional: required
        """
        return self._consistency_group_id

    @consistency_group_id.setter
    def consistency_group_id(self, consistency_group_id):
        """
        Sets the consistency_group_id of this PITCGMember.


        :param consistency_group_id: The consistency_group_id of this PITCGMember.
        :type: str
        """
        self._consistency_group_id = consistency_group_id

    @property
    def volume_id(self):
        """
        Gets the volume_id of this PITCGMember.


        :return: The volume_id of this PITCGMember.
        :rtype: str
        :required/optional: required
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """
        Sets the volume_id of this PITCGMember.


        :param volume_id: The volume_id of this PITCGMember.
        :type: str
        """
        self._volume_id = volume_id

    @property
    def volume_wwn(self):
        """
        Gets the volume_wwn of this PITCGMember.


        :return: The volume_wwn of this PITCGMember.
        :rtype: str
        :required/optional: required
        """
        return self._volume_wwn

    @volume_wwn.setter
    def volume_wwn(self, volume_wwn):
        """
        Sets the volume_wwn of this PITCGMember.


        :param volume_wwn: The volume_wwn of this PITCGMember.
        :type: str
        """
        self._volume_wwn = volume_wwn

    @property
    def base_volume_name(self):
        """
        Gets the base_volume_name of this PITCGMember.


        :return: The base_volume_name of this PITCGMember.
        :rtype: str
        :required/optional: required
        """
        return self._base_volume_name

    @base_volume_name.setter
    def base_volume_name(self, base_volume_name):
        """
        Sets the base_volume_name of this PITCGMember.


        :param base_volume_name: The base_volume_name of this PITCGMember.
        :type: str
        """
        self._base_volume_name = base_volume_name

    @property
    def cluster_size(self):
        """
        Gets the cluster_size of this PITCGMember.
        The cluster size (in bytes).

        :return: The cluster_size of this PITCGMember.
        :rtype: int
        :required/optional: required
        """
        return self._cluster_size

    @cluster_size.setter
    def cluster_size(self, cluster_size):
        """
        Sets the cluster_size of this PITCGMember.
        The cluster size (in bytes).

        :param cluster_size: The cluster_size of this PITCGMember.
        :type: int
        """
        self._cluster_size = cluster_size

    @property
    def total_repository_volumes(self):
        """
        Gets the total_repository_volumes of this PITCGMember.
        Total number of repository volumes in use by the underlying snapshotGroup

        :return: The total_repository_volumes of this PITCGMember.
        :rtype: int
        :required/optional: required
        """
        return self._total_repository_volumes

    @total_repository_volumes.setter
    def total_repository_volumes(self, total_repository_volumes):
        """
        Sets the total_repository_volumes of this PITCGMember.
        Total number of repository volumes in use by the underlying snapshotGroup

        :param total_repository_volumes: The total_repository_volumes of this PITCGMember.
        :type: int
        """
        self._total_repository_volumes = total_repository_volumes

    @property
    def total_repository_capacity(self):
        """
        Gets the total_repository_capacity of this PITCGMember.
        Total repository capacity

        :return: The total_repository_capacity of this PITCGMember.
        :rtype: int
        :required/optional: required
        """
        return self._total_repository_capacity

    @total_repository_capacity.setter
    def total_repository_capacity(self, total_repository_capacity):
        """
        Sets the total_repository_capacity of this PITCGMember.
        Total repository capacity

        :param total_repository_capacity: The total_repository_capacity of this PITCGMember.
        :type: int
        """
        self._total_repository_capacity = total_repository_capacity

    @property
    def used_repository_capacity(self):
        """
        Gets the used_repository_capacity of this PITCGMember.
        The amount of repository capacity that is being utilized

        :return: The used_repository_capacity of this PITCGMember.
        :rtype: int
        :required/optional: required
        """
        return self._used_repository_capacity

    @used_repository_capacity.setter
    def used_repository_capacity(self, used_repository_capacity):
        """
        Sets the used_repository_capacity of this PITCGMember.
        The amount of repository capacity that is being utilized

        :param used_repository_capacity: The used_repository_capacity of this PITCGMember.
        :type: int
        """
        self._used_repository_capacity = used_repository_capacity

    @property
    def full_warn_threshold(self):
        """
        Gets the full_warn_threshold of this PITCGMember.
        The capacity threshold at which the user will be warned about running out of capacity for the repository

        :return: The full_warn_threshold of this PITCGMember.
        :rtype: int
        :required/optional: required
        """
        return self._full_warn_threshold

    @full_warn_threshold.setter
    def full_warn_threshold(self, full_warn_threshold):
        """
        Sets the full_warn_threshold of this PITCGMember.
        The capacity threshold at which the user will be warned about running out of capacity for the repository

        :param full_warn_threshold: The full_warn_threshold of this PITCGMember.
        :type: int
        """
        self._full_warn_threshold = full_warn_threshold

    @property
    def total_snapshot_images(self):
        """
        Gets the total_snapshot_images of this PITCGMember.
        The total number of snapshot images defined for this member

        :return: The total_snapshot_images of this PITCGMember.
        :rtype: int
        :required/optional: required
        """
        return self._total_snapshot_images

    @total_snapshot_images.setter
    def total_snapshot_images(self, total_snapshot_images):
        """
        Sets the total_snapshot_images of this PITCGMember.
        The total number of snapshot images defined for this member

        :param total_snapshot_images: The total_snapshot_images of this PITCGMember.
        :type: int
        """
        self._total_snapshot_images = total_snapshot_images

    @property
    def total_snapshot_volumes(self):
        """
        Gets the total_snapshot_volumes of this PITCGMember.
        The total number of snapshot volumes defined for this member

        :return: The total_snapshot_volumes of this PITCGMember.
        :rtype: int
        :required/optional: required
        """
        return self._total_snapshot_volumes

    @total_snapshot_volumes.setter
    def total_snapshot_volumes(self, total_snapshot_volumes):
        """
        Sets the total_snapshot_volumes of this PITCGMember.
        The total number of snapshot volumes defined for this member

        :param total_snapshot_volumes: The total_snapshot_volumes of this PITCGMember.
        :type: int
        """
        self._total_snapshot_volumes = total_snapshot_volumes

    @property
    def auto_delete_snapshots(self):
        """
        Gets the auto_delete_snapshots of this PITCGMember.
        Automatically purge all snapshots over this value

        :return: The auto_delete_snapshots of this PITCGMember.
        :rtype: bool
        :required/optional: required
        """
        return self._auto_delete_snapshots

    @auto_delete_snapshots.setter
    def auto_delete_snapshots(self, auto_delete_snapshots):
        """
        Sets the auto_delete_snapshots of this PITCGMember.
        Automatically purge all snapshots over this value

        :param auto_delete_snapshots: The auto_delete_snapshots of this PITCGMember.
        :type: bool
        """
        self._auto_delete_snapshots = auto_delete_snapshots

    @property
    def auto_delete_limit(self):
        """
        Gets the auto_delete_limit of this PITCGMember.
        If autoDeleteSnapshots is enabled, the maximum number allowed before autoDeletion occurs

        :return: The auto_delete_limit of this PITCGMember.
        :rtype: int
        :required/optional: required
        """
        return self._auto_delete_limit

    @auto_delete_limit.setter
    def auto_delete_limit(self, auto_delete_limit):
        """
        Sets the auto_delete_limit of this PITCGMember.
        If autoDeleteSnapshots is enabled, the maximum number allowed before autoDeletion occurs

        :param auto_delete_limit: The auto_delete_limit of this PITCGMember.
        :type: int
        """
        self._auto_delete_limit = auto_delete_limit

    @property
    def pit_group_id(self):
        """
        Gets the pit_group_id of this PITCGMember.
        Reference to the snapshotGroup

        :return: The pit_group_id of this PITCGMember.
        :rtype: str
        :required/optional: required
        """
        return self._pit_group_id

    @pit_group_id.setter
    def pit_group_id(self, pit_group_id):
        """
        Sets the pit_group_id of this PITCGMember.
        Reference to the snapshotGroup

        :param pit_group_id: The pit_group_id of this PITCGMember.
        :type: str
        """
        self._pit_group_id = pit_group_id

    @property
    def repository_volume(self):
        """
        Gets the repository_volume of this PITCGMember.
        Reference to the repository volume of the pitGroup/snapshotGroup

        :return: The repository_volume of this PITCGMember.
        :rtype: str
        :required/optional: required
        """
        return self._repository_volume

    @repository_volume.setter
    def repository_volume(self, repository_volume):
        """
        Sets the repository_volume of this PITCGMember.
        Reference to the repository volume of the pitGroup/snapshotGroup

        :param repository_volume: The repository_volume of this PITCGMember.
        :type: str
        """
        self._repository_volume = repository_volume

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

