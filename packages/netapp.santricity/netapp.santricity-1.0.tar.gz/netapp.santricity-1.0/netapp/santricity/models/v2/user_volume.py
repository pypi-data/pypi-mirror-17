# coding: utf-8

"""
UserVolume.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class UserVolume(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UserVolume - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'metadata': 'list[VolumeMetadataItem]',  
            'volume_group_ref': 'str',  
            'disk_pool': 'bool',  
            'cache_settings': 'VolumeCache',  # (required parameter)
            'flash_cached': 'bool',  
            'thin_provisioned': 'bool',  
            'data_assurance': 'bool',  
            'blk_size': 'int',  
            'segment_size': 'int',  
            'media_scan': 'VolumeMediaScanParams',  
            'protection_type': 'str',  
            'object_type': 'str',  
            'name': 'str',  
            'id': 'str',  
            'wwn': 'str',  
            'list_of_mappings': 'list[LUNMapping]',  
            'mapped': 'bool',  # (required parameter)
            'current_controller_id': 'str',  
            'preferred_controller_id': 'str',  
            'total_size_in_bytes': 'int'
        }

        self.attribute_map = {
            'metadata': 'metadata',  
            'volume_group_ref': 'volumeGroupRef',  
            'disk_pool': 'diskPool',  
            'cache_settings': 'cacheSettings',  # (required parameter)
            'flash_cached': 'flashCached',  
            'thin_provisioned': 'thinProvisioned',  
            'data_assurance': 'dataAssurance',  
            'blk_size': 'blkSize',  
            'segment_size': 'segmentSize',  
            'media_scan': 'mediaScan',  
            'protection_type': 'protectionType',  
            'object_type': 'objectType',  
            'name': 'name',  
            'id': 'id',  
            'wwn': 'wwn',  
            'list_of_mappings': 'listOfMappings',  
            'mapped': 'mapped',  # (required parameter)
            'current_controller_id': 'currentControllerId',  
            'preferred_controller_id': 'preferredControllerId',  
            'total_size_in_bytes': 'totalSizeInBytes'
        }

        self._metadata = None
        self._volume_group_ref = None
        self._disk_pool = None
        self._cache_settings = None
        self._flash_cached = None
        self._thin_provisioned = None
        self._data_assurance = None
        self._blk_size = None
        self._segment_size = None
        self._media_scan = None
        self._protection_type = None
        self._object_type = None
        self._name = None
        self._id = None
        self._wwn = None
        self._list_of_mappings = None
        self._mapped = None
        self._current_controller_id = None
        self._preferred_controller_id = None
        self._total_size_in_bytes = None

    @property
    def metadata(self):
        """
        Gets the metadata of this UserVolume.


        :return: The metadata of this UserVolume.
        :rtype: list[VolumeMetadataItem]
        :required/optional: optional
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this UserVolume.


        :param metadata: The metadata of this UserVolume.
        :type: list[VolumeMetadataItem]
        """
        self._metadata = metadata

    @property
    def volume_group_ref(self):
        """
        Gets the volume_group_ref of this UserVolume.


        :return: The volume_group_ref of this UserVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._volume_group_ref

    @volume_group_ref.setter
    def volume_group_ref(self, volume_group_ref):
        """
        Sets the volume_group_ref of this UserVolume.


        :param volume_group_ref: The volume_group_ref of this UserVolume.
        :type: str
        """
        self._volume_group_ref = volume_group_ref

    @property
    def disk_pool(self):
        """
        Gets the disk_pool of this UserVolume.


        :return: The disk_pool of this UserVolume.
        :rtype: bool
        :required/optional: optional
        """
        return self._disk_pool

    @disk_pool.setter
    def disk_pool(self, disk_pool):
        """
        Sets the disk_pool of this UserVolume.


        :param disk_pool: The disk_pool of this UserVolume.
        :type: bool
        """
        self._disk_pool = disk_pool

    @property
    def cache_settings(self):
        """
        Gets the cache_settings of this UserVolume.
        The volume-specific caching parameters currently in effect for the volume.

        :return: The cache_settings of this UserVolume.
        :rtype: VolumeCache
        :required/optional: required
        """
        return self._cache_settings

    @cache_settings.setter
    def cache_settings(self, cache_settings):
        """
        Sets the cache_settings of this UserVolume.
        The volume-specific caching parameters currently in effect for the volume.

        :param cache_settings: The cache_settings of this UserVolume.
        :type: VolumeCache
        """
        self._cache_settings = cache_settings

    @property
    def flash_cached(self):
        """
        Gets the flash_cached of this UserVolume.


        :return: The flash_cached of this UserVolume.
        :rtype: bool
        :required/optional: optional
        """
        return self._flash_cached

    @flash_cached.setter
    def flash_cached(self, flash_cached):
        """
        Sets the flash_cached of this UserVolume.


        :param flash_cached: The flash_cached of this UserVolume.
        :type: bool
        """
        self._flash_cached = flash_cached

    @property
    def thin_provisioned(self):
        """
        Gets the thin_provisioned of this UserVolume.


        :return: The thin_provisioned of this UserVolume.
        :rtype: bool
        :required/optional: optional
        """
        return self._thin_provisioned

    @thin_provisioned.setter
    def thin_provisioned(self, thin_provisioned):
        """
        Sets the thin_provisioned of this UserVolume.


        :param thin_provisioned: The thin_provisioned of this UserVolume.
        :type: bool
        """
        self._thin_provisioned = thin_provisioned

    @property
    def data_assurance(self):
        """
        Gets the data_assurance of this UserVolume.


        :return: The data_assurance of this UserVolume.
        :rtype: bool
        :required/optional: optional
        """
        return self._data_assurance

    @data_assurance.setter
    def data_assurance(self, data_assurance):
        """
        Sets the data_assurance of this UserVolume.


        :param data_assurance: The data_assurance of this UserVolume.
        :type: bool
        """
        self._data_assurance = data_assurance

    @property
    def blk_size(self):
        """
        Gets the blk_size of this UserVolume.


        :return: The blk_size of this UserVolume.
        :rtype: int
        :required/optional: optional
        """
        return self._blk_size

    @blk_size.setter
    def blk_size(self, blk_size):
        """
        Sets the blk_size of this UserVolume.


        :param blk_size: The blk_size of this UserVolume.
        :type: int
        """
        self._blk_size = blk_size

    @property
    def segment_size(self):
        """
        Gets the segment_size of this UserVolume.


        :return: The segment_size of this UserVolume.
        :rtype: int
        :required/optional: optional
        """
        return self._segment_size

    @segment_size.setter
    def segment_size(self, segment_size):
        """
        Sets the segment_size of this UserVolume.


        :param segment_size: The segment_size of this UserVolume.
        :type: int
        """
        self._segment_size = segment_size

    @property
    def media_scan(self):
        """
        Gets the media_scan of this UserVolume.


        :return: The media_scan of this UserVolume.
        :rtype: VolumeMediaScanParams
        :required/optional: optional
        """
        return self._media_scan

    @media_scan.setter
    def media_scan(self, media_scan):
        """
        Sets the media_scan of this UserVolume.


        :param media_scan: The media_scan of this UserVolume.
        :type: VolumeMediaScanParams
        """
        self._media_scan = media_scan

    @property
    def protection_type(self):
        """
        Gets the protection_type of this UserVolume.


        :return: The protection_type of this UserVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._protection_type

    @protection_type.setter
    def protection_type(self, protection_type):
        """
        Sets the protection_type of this UserVolume.


        :param protection_type: The protection_type of this UserVolume.
        :type: str
        """
        allowed_values = ["type0Protection", "type1Protection", "type2Protection", "type3Protection", "__UNDEFINED"]
        if protection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._protection_type = protection_type

    @property
    def object_type(self):
        """
        Gets the object_type of this UserVolume.


        :return: The object_type of this UserVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this UserVolume.


        :param object_type: The object_type of this UserVolume.
        :type: str
        """
        allowed_values = ["volume", "pool", "host", "lunMapping", "hostGroup", "thinVolume", "drive", "volumeCopy", "pit", "pitView", "snapshotGroup", "snapshot", "accessVolume", "legacySnapshot", "hostType", "metadataTag", "managementUrl", "folder", "asyncMirrorGroup", "asyncMirrorGroupMember", "asyncMirrorGroupIncompleteMember", "consistencyGroup", "consistencyGroupView", "fan", "battery", "storageSystem", "controller", "powerSupply", "minihub", "esm", "drawer", "hostBoard", "interconnectCRU", "cacheBackupDevice", "tray", "supportCRU", "hostPort", "initiator", "snapshotSchedule", "thermalSensor", "sfp", "flashCache", "featureAttribute", "featureState", "lockKeyId", "remoteVolume", "mirrorVolume", "vaultMirrorVolume", "vaultMirrorGroup", "metadataVolume", "sasPort", "sasExpander", "channelPort", "speedNegError", "snmpAgentBundle", "stagedFirmware", "workload"]
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._object_type = object_type

    @property
    def name(self):
        """
        Gets the name of this UserVolume.


        :return: The name of this UserVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UserVolume.


        :param name: The name of this UserVolume.
        :type: str
        """
        self._name = name

    @property
    def id(self):
        """
        Gets the id of this UserVolume.


        :return: The id of this UserVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UserVolume.


        :param id: The id of this UserVolume.
        :type: str
        """
        self._id = id

    @property
    def wwn(self):
        """
        Gets the wwn of this UserVolume.


        :return: The wwn of this UserVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """
        Sets the wwn of this UserVolume.


        :param wwn: The wwn of this UserVolume.
        :type: str
        """
        self._wwn = wwn

    @property
    def list_of_mappings(self):
        """
        Gets the list_of_mappings of this UserVolume.


        :return: The list_of_mappings of this UserVolume.
        :rtype: list[LUNMapping]
        :required/optional: optional
        """
        return self._list_of_mappings

    @list_of_mappings.setter
    def list_of_mappings(self, list_of_mappings):
        """
        Sets the list_of_mappings of this UserVolume.


        :param list_of_mappings: The list_of_mappings of this UserVolume.
        :type: list[LUNMapping]
        """
        self._list_of_mappings = list_of_mappings

    @property
    def mapped(self):
        """
        Gets the mapped of this UserVolume.


        :return: The mapped of this UserVolume.
        :rtype: bool
        :required/optional: required
        """
        return self._mapped

    @mapped.setter
    def mapped(self, mapped):
        """
        Sets the mapped of this UserVolume.


        :param mapped: The mapped of this UserVolume.
        :type: bool
        """
        self._mapped = mapped

    @property
    def current_controller_id(self):
        """
        Gets the current_controller_id of this UserVolume.


        :return: The current_controller_id of this UserVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._current_controller_id

    @current_controller_id.setter
    def current_controller_id(self, current_controller_id):
        """
        Sets the current_controller_id of this UserVolume.


        :param current_controller_id: The current_controller_id of this UserVolume.
        :type: str
        """
        self._current_controller_id = current_controller_id

    @property
    def preferred_controller_id(self):
        """
        Gets the preferred_controller_id of this UserVolume.


        :return: The preferred_controller_id of this UserVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._preferred_controller_id

    @preferred_controller_id.setter
    def preferred_controller_id(self, preferred_controller_id):
        """
        Sets the preferred_controller_id of this UserVolume.


        :param preferred_controller_id: The preferred_controller_id of this UserVolume.
        :type: str
        """
        self._preferred_controller_id = preferred_controller_id

    @property
    def total_size_in_bytes(self):
        """
        Gets the total_size_in_bytes of this UserVolume.


        :return: The total_size_in_bytes of this UserVolume.
        :rtype: int
        :required/optional: optional
        """
        return self._total_size_in_bytes

    @total_size_in_bytes.setter
    def total_size_in_bytes(self, total_size_in_bytes):
        """
        Sets the total_size_in_bytes of this UserVolume.


        :param total_size_in_bytes: The total_size_in_bytes of this UserVolume.
        :type: int
        """
        self._total_size_in_bytes = total_size_in_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

