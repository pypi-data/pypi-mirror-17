# coding: utf-8

"""
ObjectChangeEvent.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class ObjectChangeEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ObjectChangeEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'timestamp': 'datetime',  # (required parameter)
            'event_number': 'int',  # (required parameter)
            'event_type': 'str',  
            'added_objects': 'list[EventObjectIdentifier]',  # (required parameter)
            'modified_objects': 'list[EventObjectIdentifier]',  # (required parameter)
            'deleted_objects': 'list[EventObjectIdentifier]'
        }

        self.attribute_map = {
            'timestamp': 'timestamp',  # (required parameter)
            'event_number': 'eventNumber',  # (required parameter)
            'event_type': 'eventType',  
            'added_objects': 'addedObjects',  # (required parameter)
            'modified_objects': 'modifiedObjects',  # (required parameter)
            'deleted_objects': 'deletedObjects'
        }

        self._timestamp = None
        self._event_number = None
        self._event_type = None
        self._added_objects = None
        self._modified_objects = None
        self._deleted_objects = None

    @property
    def timestamp(self):
        """
        Gets the timestamp of this ObjectChangeEvent.


        :return: The timestamp of this ObjectChangeEvent.
        :rtype: datetime
        :required/optional: required
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this ObjectChangeEvent.


        :param timestamp: The timestamp of this ObjectChangeEvent.
        :type: datetime
        """
        self._timestamp = timestamp

    @property
    def event_number(self):
        """
        Gets the event_number of this ObjectChangeEvent.


        :return: The event_number of this ObjectChangeEvent.
        :rtype: int
        :required/optional: required
        """
        return self._event_number

    @event_number.setter
    def event_number(self, event_number):
        """
        Sets the event_number of this ObjectChangeEvent.


        :param event_number: The event_number of this ObjectChangeEvent.
        :type: int
        """
        self._event_number = event_number

    @property
    def event_type(self):
        """
        Gets the event_type of this ObjectChangeEvent.


        :return: The event_type of this ObjectChangeEvent.
        :rtype: str
        :required/optional: optional
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this ObjectChangeEvent.


        :param event_type: The event_type of this ObjectChangeEvent.
        :type: str
        """
        allowed_values = ["objectGraphChangeEvent", "passwordStatusEvent", "storageSystemStatusEvent", "storageSystemMDChangeEvent", "folderEvent", "metadataTagEvent", "softwareDownloadEvent", "softwareReloadEvent", "asupConfigChangeEvent", "iomConfigChangeEvent", "alertConfigChangeEvent", "firmwareDownloadEvent", "criticalMelChangeEvent", "statisticsCollectionEvent", "melClearEvent", "workload"]
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._event_type = event_type

    @property
    def added_objects(self):
        """
        Gets the added_objects of this ObjectChangeEvent.
        List of objects added.  Only certain objects that have rest endpoints will be represented in this list.      See Event ObjectTypes for types of objects that have events

        :return: The added_objects of this ObjectChangeEvent.
        :rtype: list[EventObjectIdentifier]
        :required/optional: required
        """
        return self._added_objects

    @added_objects.setter
    def added_objects(self, added_objects):
        """
        Sets the added_objects of this ObjectChangeEvent.
        List of objects added.  Only certain objects that have rest endpoints will be represented in this list.      See Event ObjectTypes for types of objects that have events

        :param added_objects: The added_objects of this ObjectChangeEvent.
        :type: list[EventObjectIdentifier]
        """
        self._added_objects = added_objects

    @property
    def modified_objects(self):
        """
        Gets the modified_objects of this ObjectChangeEvent.
        List of objects updated.  Only certain objects that have rest endpoints will be represented in this list.      See Event ObjectTypes for types of objects that have events

        :return: The modified_objects of this ObjectChangeEvent.
        :rtype: list[EventObjectIdentifier]
        :required/optional: required
        """
        return self._modified_objects

    @modified_objects.setter
    def modified_objects(self, modified_objects):
        """
        Sets the modified_objects of this ObjectChangeEvent.
        List of objects updated.  Only certain objects that have rest endpoints will be represented in this list.      See Event ObjectTypes for types of objects that have events

        :param modified_objects: The modified_objects of this ObjectChangeEvent.
        :type: list[EventObjectIdentifier]
        """
        self._modified_objects = modified_objects

    @property
    def deleted_objects(self):
        """
        Gets the deleted_objects of this ObjectChangeEvent.
        List of objects deleted.  Only certain objects that have rest endpoints will be represented in this list.      See Event ObjectTypes for types of objects that have events

        :return: The deleted_objects of this ObjectChangeEvent.
        :rtype: list[EventObjectIdentifier]
        :required/optional: required
        """
        return self._deleted_objects

    @deleted_objects.setter
    def deleted_objects(self, deleted_objects):
        """
        Sets the deleted_objects of this ObjectChangeEvent.
        List of objects deleted.  Only certain objects that have rest endpoints will be represented in this list.      See Event ObjectTypes for types of objects that have events

        :param deleted_objects: The deleted_objects of this ObjectChangeEvent.
        :type: list[EventObjectIdentifier]
        """
        self._deleted_objects = deleted_objects

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

