# coding: utf-8

"""
ObjectBundle.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class ObjectBundle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ObjectBundle - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'config_generation': 'int',  # (required parameter)
            'sa': 'StorageArray',  # (required parameter)
            'tray': 'list[Tray]',  # (required parameter)
            'component_bundle': 'ComponentBundle',  # (required parameter)
            'controller': 'list[Controller]',  # (required parameter)
            'drive': 'list[Drive]',  # (required parameter)
            'volume_group': 'list[VolumeGroup]',  # (required parameter)
            'volume': 'list[Volume]',  # (required parameter)
            'free_extent': 'list[FreeExtent]',  # (required parameter)
            'dve_vol': 'list[DVEVolume]',  # (required parameter)
            'storage_pool_bundle': 'StoragePoolBundle',  # (required parameter)
            'high_level_vol_bundle': 'HLVolumeBundle',  # (required parameter)
            'ghost_vol_bundle': 'GhostVolBundle',  # (required parameter)
            'consistency_group_bundle': 'ConsistencyGroupBundle',  # (required parameter)
            'io_interface': 'list[IoInterface]',  # (required parameter)
            'network_interface': 'list[NetworkInterface]',  # (required parameter)
            'lock_key_i_ds': 'list[LockKeyID]',  # (required parameter)
            'interposer': 'list[Interposer]',  # (required parameter)
            'io_interface_hic_map': 'list[IoInterfaceHicMap]',  # (required parameter)
            'schedule': 'list[ScheduleInstance]',  # (required parameter)
            'remote_array': 'list[RemoteArray]',  # (required parameter)
            'flash_cache_bundle': 'FlashCacheBundle',  # (required parameter)
            'snmp_bundle': 'SNMPAgentBundle',  # (required parameter)
            'application_awareness_bundle': 'ApplicationAwarenessBundle'
        }

        self.attribute_map = {
            'config_generation': 'configGeneration',  # (required parameter)
            'sa': 'sa',  # (required parameter)
            'tray': 'tray',  # (required parameter)
            'component_bundle': 'componentBundle',  # (required parameter)
            'controller': 'controller',  # (required parameter)
            'drive': 'drive',  # (required parameter)
            'volume_group': 'volumeGroup',  # (required parameter)
            'volume': 'volume',  # (required parameter)
            'free_extent': 'freeExtent',  # (required parameter)
            'dve_vol': 'dveVol',  # (required parameter)
            'storage_pool_bundle': 'storagePoolBundle',  # (required parameter)
            'high_level_vol_bundle': 'highLevelVolBundle',  # (required parameter)
            'ghost_vol_bundle': 'ghostVolBundle',  # (required parameter)
            'consistency_group_bundle': 'consistencyGroupBundle',  # (required parameter)
            'io_interface': 'ioInterface',  # (required parameter)
            'network_interface': 'networkInterface',  # (required parameter)
            'lock_key_i_ds': 'lockKeyIDs',  # (required parameter)
            'interposer': 'interposer',  # (required parameter)
            'io_interface_hic_map': 'ioInterfaceHicMap',  # (required parameter)
            'schedule': 'schedule',  # (required parameter)
            'remote_array': 'remoteArray',  # (required parameter)
            'flash_cache_bundle': 'flashCacheBundle',  # (required parameter)
            'snmp_bundle': 'snmpBundle',  # (required parameter)
            'application_awareness_bundle': 'applicationAwarenessBundle'
        }

        self._config_generation = None
        self._sa = None
        self._tray = None
        self._component_bundle = None
        self._controller = None
        self._drive = None
        self._volume_group = None
        self._volume = None
        self._free_extent = None
        self._dve_vol = None
        self._storage_pool_bundle = None
        self._high_level_vol_bundle = None
        self._ghost_vol_bundle = None
        self._consistency_group_bundle = None
        self._io_interface = None
        self._network_interface = None
        self._lock_key_i_ds = None
        self._interposer = None
        self._io_interface_hic_map = None
        self._schedule = None
        self._remote_array = None
        self._flash_cache_bundle = None
        self._snmp_bundle = None
        self._application_awareness_bundle = None

    @property
    def config_generation(self):
        """
        Gets the config_generation of this ObjectBundle.
        The configuration generation number that was in effect at the time this object bundle was constructed by the controller. The client can use this value to determine if it currently holds the latest version of the object graph.

        :return: The config_generation of this ObjectBundle.
        :rtype: int
        :required/optional: required
        """
        return self._config_generation

    @config_generation.setter
    def config_generation(self, config_generation):
        """
        Sets the config_generation of this ObjectBundle.
        The configuration generation number that was in effect at the time this object bundle was constructed by the controller. The client can use this value to determine if it currently holds the latest version of the object graph.

        :param config_generation: The config_generation of this ObjectBundle.
        :type: int
        """
        self._config_generation = config_generation

    @property
    def sa(self):
        """
        Gets the sa of this ObjectBundle.
        A StorageArray object that contains base information about the storage array as a whole.

        :return: The sa of this ObjectBundle.
        :rtype: StorageArray
        :required/optional: required
        """
        return self._sa

    @sa.setter
    def sa(self, sa):
        """
        Sets the sa of this ObjectBundle.
        A StorageArray object that contains base information about the storage array as a whole.

        :param sa: The sa of this ObjectBundle.
        :type: StorageArray
        """
        self._sa = sa

    @property
    def tray(self):
        """
        Gets the tray of this ObjectBundle.
        A variable-length array of Tray structures. This array contains one element for each tray object that exists within the storage array.

        :return: The tray of this ObjectBundle.
        :rtype: list[Tray]
        :required/optional: required
        """
        return self._tray

    @tray.setter
    def tray(self, tray):
        """
        Sets the tray of this ObjectBundle.
        A variable-length array of Tray structures. This array contains one element for each tray object that exists within the storage array.

        :param tray: The tray of this ObjectBundle.
        :type: list[Tray]
        """
        self._tray = tray

    @property
    def component_bundle(self):
        """
        Gets the component_bundle of this ObjectBundle.
        A variable-length array of Component structures. This array contains one element for each physical component object that exists within the storage array.

        :return: The component_bundle of this ObjectBundle.
        :rtype: ComponentBundle
        :required/optional: required
        """
        return self._component_bundle

    @component_bundle.setter
    def component_bundle(self, component_bundle):
        """
        Sets the component_bundle of this ObjectBundle.
        A variable-length array of Component structures. This array contains one element for each physical component object that exists within the storage array.

        :param component_bundle: The component_bundle of this ObjectBundle.
        :type: ComponentBundle
        """
        self._component_bundle = component_bundle

    @property
    def controller(self):
        """
        Gets the controller of this ObjectBundle.
        A variable-length array of Controller structures. This array contains one element for each RAID controller object that exists within the storage array.

        :return: The controller of this ObjectBundle.
        :rtype: list[Controller]
        :required/optional: required
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """
        Sets the controller of this ObjectBundle.
        A variable-length array of Controller structures. This array contains one element for each RAID controller object that exists within the storage array.

        :param controller: The controller of this ObjectBundle.
        :type: list[Controller]
        """
        self._controller = controller

    @property
    def drive(self):
        """
        Gets the drive of this ObjectBundle.
        A variable-length array of Drive structures. This array contains one element for each physical disk drive object that exists within the storage array.

        :return: The drive of this ObjectBundle.
        :rtype: list[Drive]
        :required/optional: required
        """
        return self._drive

    @drive.setter
    def drive(self, drive):
        """
        Sets the drive of this ObjectBundle.
        A variable-length array of Drive structures. This array contains one element for each physical disk drive object that exists within the storage array.

        :param drive: The drive of this ObjectBundle.
        :type: list[Drive]
        """
        self._drive = drive

    @property
    def volume_group(self):
        """
        Gets the volume_group of this ObjectBundle.
        A variable-length array of VolumeGroup structures. This array contains one element for each volume group object that exists within the storage array.

        :return: The volume_group of this ObjectBundle.
        :rtype: list[VolumeGroup]
        :required/optional: required
        """
        return self._volume_group

    @volume_group.setter
    def volume_group(self, volume_group):
        """
        Sets the volume_group of this ObjectBundle.
        A variable-length array of VolumeGroup structures. This array contains one element for each volume group object that exists within the storage array.

        :param volume_group: The volume_group of this ObjectBundle.
        :type: list[VolumeGroup]
        """
        self._volume_group = volume_group

    @property
    def volume(self):
        """
        Gets the volume of this ObjectBundle.
        A variable-length array of VolumeGroup structures. This array contains one element for each volume group object that exists within the storage array.

        :return: The volume of this ObjectBundle.
        :rtype: list[Volume]
        :required/optional: required
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """
        Sets the volume of this ObjectBundle.
        A variable-length array of VolumeGroup structures. This array contains one element for each volume group object that exists within the storage array.

        :param volume: The volume of this ObjectBundle.
        :type: list[Volume]
        """
        self._volume = volume

    @property
    def free_extent(self):
        """
        Gets the free_extent of this ObjectBundle.
        A variable-length array of FreeExtent structures. This array contains one element for each free extent object that exists within the storage array.

        :return: The free_extent of this ObjectBundle.
        :rtype: list[FreeExtent]
        :required/optional: required
        """
        return self._free_extent

    @free_extent.setter
    def free_extent(self, free_extent):
        """
        Sets the free_extent of this ObjectBundle.
        A variable-length array of FreeExtent structures. This array contains one element for each free extent object that exists within the storage array.

        :param free_extent: The free_extent of this ObjectBundle.
        :type: list[FreeExtent]
        """
        self._free_extent = free_extent

    @property
    def dve_vol(self):
        """
        Gets the dve_vol of this ObjectBundle.
        A variable-length array of DVE structures. This array contains one element for each volume being expanded.

        :return: The dve_vol of this ObjectBundle.
        :rtype: list[DVEVolume]
        :required/optional: required
        """
        return self._dve_vol

    @dve_vol.setter
    def dve_vol(self, dve_vol):
        """
        Sets the dve_vol of this ObjectBundle.
        A variable-length array of DVE structures. This array contains one element for each volume being expanded.

        :param dve_vol: The dve_vol of this ObjectBundle.
        :type: list[DVEVolume]
        """
        self._dve_vol = dve_vol

    @property
    def storage_pool_bundle(self):
        """
        Gets the storage_pool_bundle of this ObjectBundle.
        An embedded object bundle that contains all configuration information relative to the \"Storage Partitions\" feature.

        :return: The storage_pool_bundle of this ObjectBundle.
        :rtype: StoragePoolBundle
        :required/optional: required
        """
        return self._storage_pool_bundle

    @storage_pool_bundle.setter
    def storage_pool_bundle(self, storage_pool_bundle):
        """
        Sets the storage_pool_bundle of this ObjectBundle.
        An embedded object bundle that contains all configuration information relative to the \"Storage Partitions\" feature.

        :param storage_pool_bundle: The storage_pool_bundle of this ObjectBundle.
        :type: StoragePoolBundle
        """
        self._storage_pool_bundle = storage_pool_bundle

    @property
    def high_level_vol_bundle(self):
        """
        Gets the high_level_vol_bundle of this ObjectBundle.
        An embedded object bundle that contains all the information relative to the Higher-Level Volumes.

        :return: The high_level_vol_bundle of this ObjectBundle.
        :rtype: HLVolumeBundle
        :required/optional: required
        """
        return self._high_level_vol_bundle

    @high_level_vol_bundle.setter
    def high_level_vol_bundle(self, high_level_vol_bundle):
        """
        Sets the high_level_vol_bundle of this ObjectBundle.
        An embedded object bundle that contains all the information relative to the Higher-Level Volumes.

        :param high_level_vol_bundle: The high_level_vol_bundle of this ObjectBundle.
        :type: HLVolumeBundle
        """
        self._high_level_vol_bundle = high_level_vol_bundle

    @property
    def ghost_vol_bundle(self):
        """
        Gets the ghost_vol_bundle of this ObjectBundle.
        An embedded object bundle that contains all the information relative to missing volumes.

        :return: The ghost_vol_bundle of this ObjectBundle.
        :rtype: GhostVolBundle
        :required/optional: required
        """
        return self._ghost_vol_bundle

    @ghost_vol_bundle.setter
    def ghost_vol_bundle(self, ghost_vol_bundle):
        """
        Sets the ghost_vol_bundle of this ObjectBundle.
        An embedded object bundle that contains all the information relative to missing volumes.

        :param ghost_vol_bundle: The ghost_vol_bundle of this ObjectBundle.
        :type: GhostVolBundle
        """
        self._ghost_vol_bundle = ghost_vol_bundle

    @property
    def consistency_group_bundle(self):
        """
        Gets the consistency_group_bundle of this ObjectBundle.
        Write consistency group bundle.

        :return: The consistency_group_bundle of this ObjectBundle.
        :rtype: ConsistencyGroupBundle
        :required/optional: required
        """
        return self._consistency_group_bundle

    @consistency_group_bundle.setter
    def consistency_group_bundle(self, consistency_group_bundle):
        """
        Sets the consistency_group_bundle of this ObjectBundle.
        Write consistency group bundle.

        :param consistency_group_bundle: The consistency_group_bundle of this ObjectBundle.
        :type: ConsistencyGroupBundle
        """
        self._consistency_group_bundle = consistency_group_bundle

    @property
    def io_interface(self):
        """
        Gets the io_interface of this ObjectBundle.
        A variable-length array of IoInterface structures. This array contains one element for each I/O interface object that exists within the storage array

        :return: The io_interface of this ObjectBundle.
        :rtype: list[IoInterface]
        :required/optional: required
        """
        return self._io_interface

    @io_interface.setter
    def io_interface(self, io_interface):
        """
        Sets the io_interface of this ObjectBundle.
        A variable-length array of IoInterface structures. This array contains one element for each I/O interface object that exists within the storage array

        :param io_interface: The io_interface of this ObjectBundle.
        :type: list[IoInterface]
        """
        self._io_interface = io_interface

    @property
    def network_interface(self):
        """
        Gets the network_interface of this ObjectBundle.
        A variable-length array of NetworkInterface structures. This array contains one element for each network interface object that exists within the storage array

        :return: The network_interface of this ObjectBundle.
        :rtype: list[NetworkInterface]
        :required/optional: required
        """
        return self._network_interface

    @network_interface.setter
    def network_interface(self, network_interface):
        """
        Sets the network_interface of this ObjectBundle.
        A variable-length array of NetworkInterface structures. This array contains one element for each network interface object that exists within the storage array

        :param network_interface: The network_interface of this ObjectBundle.
        :type: list[NetworkInterface]
        """
        self._network_interface = network_interface

    @property
    def lock_key_i_ds(self):
        """
        Gets the lock_key_i_ds of this ObjectBundle.
        A variable length array of LockKeyID structures. Contains lock key information for the array.

        :return: The lock_key_i_ds of this ObjectBundle.
        :rtype: list[LockKeyID]
        :required/optional: required
        """
        return self._lock_key_i_ds

    @lock_key_i_ds.setter
    def lock_key_i_ds(self, lock_key_i_ds):
        """
        Sets the lock_key_i_ds of this ObjectBundle.
        A variable length array of LockKeyID structures. Contains lock key information for the array.

        :param lock_key_i_ds: The lock_key_i_ds of this ObjectBundle.
        :type: list[LockKeyID]
        """
        self._lock_key_i_ds = lock_key_i_ds

    @property
    def interposer(self):
        """
        Gets the interposer of this ObjectBundle.
        A variable length array of drive interposer data. An entry will appear in this array only if the interposerPresent field in the corresponding Drive structure is set to True.

        :return: The interposer of this ObjectBundle.
        :rtype: list[Interposer]
        :required/optional: required
        """
        return self._interposer

    @interposer.setter
    def interposer(self, interposer):
        """
        Sets the interposer of this ObjectBundle.
        A variable length array of drive interposer data. An entry will appear in this array only if the interposerPresent field in the corresponding Drive structure is set to True.

        :param interposer: The interposer of this ObjectBundle.
        :type: list[Interposer]
        """
        self._interposer = interposer

    @property
    def io_interface_hic_map(self):
        """
        Gets the io_interface_hic_map of this ObjectBundle.
        This is a list of structures that provides a mapping from I/O interfaces to their associated HICs.

        :return: The io_interface_hic_map of this ObjectBundle.
        :rtype: list[IoInterfaceHicMap]
        :required/optional: required
        """
        return self._io_interface_hic_map

    @io_interface_hic_map.setter
    def io_interface_hic_map(self, io_interface_hic_map):
        """
        Sets the io_interface_hic_map of this ObjectBundle.
        This is a list of structures that provides a mapping from I/O interfaces to their associated HICs.

        :param io_interface_hic_map: The io_interface_hic_map of this ObjectBundle.
        :type: list[IoInterfaceHicMap]
        """
        self._io_interface_hic_map = io_interface_hic_map

    @property
    def schedule(self):
        """
        Gets the schedule of this ObjectBundle.
        A list of current schedules.

        :return: The schedule of this ObjectBundle.
        :rtype: list[ScheduleInstance]
        :required/optional: required
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this ObjectBundle.
        A list of current schedules.

        :param schedule: The schedule of this ObjectBundle.
        :type: list[ScheduleInstance]
        """
        self._schedule = schedule

    @property
    def remote_array(self):
        """
        Gets the remote_array of this ObjectBundle.
        This is a list of remote arrays which this array has visibility to for monitoring.

        :return: The remote_array of this ObjectBundle.
        :rtype: list[RemoteArray]
        :required/optional: required
        """
        return self._remote_array

    @remote_array.setter
    def remote_array(self, remote_array):
        """
        Sets the remote_array of this ObjectBundle.
        This is a list of remote arrays which this array has visibility to for monitoring.

        :param remote_array: The remote_array of this ObjectBundle.
        :type: list[RemoteArray]
        """
        self._remote_array = remote_array

    @property
    def flash_cache_bundle(self):
        """
        Gets the flash_cache_bundle of this ObjectBundle.
        An embedded object bundle that contains all of the information related to flash cache objects.

        :return: The flash_cache_bundle of this ObjectBundle.
        :rtype: FlashCacheBundle
        :required/optional: required
        """
        return self._flash_cache_bundle

    @flash_cache_bundle.setter
    def flash_cache_bundle(self, flash_cache_bundle):
        """
        Sets the flash_cache_bundle of this ObjectBundle.
        An embedded object bundle that contains all of the information related to flash cache objects.

        :param flash_cache_bundle: The flash_cache_bundle of this ObjectBundle.
        :type: FlashCacheBundle
        """
        self._flash_cache_bundle = flash_cache_bundle

    @property
    def snmp_bundle(self):
        """
        Gets the snmp_bundle of this ObjectBundle.
        SNMP-related objects

        :return: The snmp_bundle of this ObjectBundle.
        :rtype: SNMPAgentBundle
        :required/optional: required
        """
        return self._snmp_bundle

    @snmp_bundle.setter
    def snmp_bundle(self, snmp_bundle):
        """
        Sets the snmp_bundle of this ObjectBundle.
        SNMP-related objects

        :param snmp_bundle: The snmp_bundle of this ObjectBundle.
        :type: SNMPAgentBundle
        """
        self._snmp_bundle = snmp_bundle

    @property
    def application_awareness_bundle(self):
        """
        Gets the application_awareness_bundle of this ObjectBundle.
        This reports the key-value pairs and their references, and the mappings between Volumes and these key-value pairs. The data is used by the application and is opaque to the CFW.

        :return: The application_awareness_bundle of this ObjectBundle.
        :rtype: ApplicationAwarenessBundle
        :required/optional: required
        """
        return self._application_awareness_bundle

    @application_awareness_bundle.setter
    def application_awareness_bundle(self, application_awareness_bundle):
        """
        Sets the application_awareness_bundle of this ObjectBundle.
        This reports the key-value pairs and their references, and the mappings between Volumes and these key-value pairs. The data is used by the application and is opaque to the CFW.

        :param application_awareness_bundle: The application_awareness_bundle of this ObjectBundle.
        :type: ApplicationAwarenessBundle
        """
        self._application_awareness_bundle = application_awareness_bundle

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

