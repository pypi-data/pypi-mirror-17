# coding: utf-8

"""
PerformanceRingStartDetails.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class PerformanceRingStartDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PerformanceRingStartDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'perf_ring_type': 'str',  # (required parameter)
            'number_of_seconds': 'int',  # (required parameter)
            'number_of_minutes': 'int',  # (required parameter)
            'only_unread_data': 'bool'
        }

        self.attribute_map = {
            'perf_ring_type': 'perfRingType',  # (required parameter)
            'number_of_seconds': 'numberOfSeconds',  # (required parameter)
            'number_of_minutes': 'numberOfMinutes',  # (required parameter)
            'only_unread_data': 'onlyUnreadData'
        }

        self._perf_ring_type = None
        self._number_of_seconds = None
        self._number_of_minutes = None
        self._only_unread_data = None

    @property
    def perf_ring_type(self):
        """
        Gets the perf_ring_type of this PerformanceRingStartDetails.
        This field is the output format for the ring buffer data retrieval.

        :return: The perf_ring_type of this PerformanceRingStartDetails.
        :rtype: str
        :required/optional: required
        """
        return self._perf_ring_type

    @perf_ring_type.setter
    def perf_ring_type(self, perf_ring_type):
        """
        Sets the perf_ring_type of this PerformanceRingStartDetails.
        This field is the output format for the ring buffer data retrieval.

        :param perf_ring_type: The perf_ring_type of this PerformanceRingStartDetails.
        :type: str
        """
        allowed_values = ["summary", "channel", "latency", "drive", "all", "__UNDEFINED"]
        if perf_ring_type not in allowed_values:
            raise ValueError(
                "Invalid value for `perf_ring_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._perf_ring_type = perf_ring_type

    @property
    def number_of_seconds(self):
        """
        Gets the number_of_seconds of this PerformanceRingStartDetails.
        The total number of seconds to retrieve, up to 2048, 0 indicates all available, -1 indicates to skip any returning data.

        :return: The number_of_seconds of this PerformanceRingStartDetails.
        :rtype: int
        :required/optional: required
        """
        return self._number_of_seconds

    @number_of_seconds.setter
    def number_of_seconds(self, number_of_seconds):
        """
        Sets the number_of_seconds of this PerformanceRingStartDetails.
        The total number of seconds to retrieve, up to 2048, 0 indicates all available, -1 indicates to skip any returning data.

        :param number_of_seconds: The number_of_seconds of this PerformanceRingStartDetails.
        :type: int
        """
        self._number_of_seconds = number_of_seconds

    @property
    def number_of_minutes(self):
        """
        Gets the number_of_minutes of this PerformanceRingStartDetails.
        The total number of minutes to retrieve, up to 2048, 0 indicates all available, -1 indicates to skip any returning data.

        :return: The number_of_minutes of this PerformanceRingStartDetails.
        :rtype: int
        :required/optional: required
        """
        return self._number_of_minutes

    @number_of_minutes.setter
    def number_of_minutes(self, number_of_minutes):
        """
        Sets the number_of_minutes of this PerformanceRingStartDetails.
        The total number of minutes to retrieve, up to 2048, 0 indicates all available, -1 indicates to skip any returning data.

        :param number_of_minutes: The number_of_minutes of this PerformanceRingStartDetails.
        :type: int
        """
        self._number_of_minutes = number_of_minutes

    @property
    def only_unread_data(self):
        """
        Gets the only_unread_data of this PerformanceRingStartDetails.
        This field is used with a value of all available, once the data is read a flag is set in the ringBuffer structure to indicate that the data has been read via SYMbol. When combined with a numberOfSeconds or numberOfMinutes is 0 it returns only data previously not sent via SYMbol. When numberOfSeconds or numberOfMinutes are anything other than -1 or 0 the field is ignored.

        :return: The only_unread_data of this PerformanceRingStartDetails.
        :rtype: bool
        :required/optional: required
        """
        return self._only_unread_data

    @only_unread_data.setter
    def only_unread_data(self, only_unread_data):
        """
        Sets the only_unread_data of this PerformanceRingStartDetails.
        This field is used with a value of all available, once the data is read a flag is set in the ringBuffer structure to indicate that the data has been read via SYMbol. When combined with a numberOfSeconds or numberOfMinutes is 0 it returns only data previously not sent via SYMbol. When numberOfSeconds or numberOfMinutes are anything other than -1 or 0 the field is ignored.

        :param only_unread_data: The only_unread_data of this PerformanceRingStartDetails.
        :type: bool
        """
        self._only_unread_data = only_unread_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

