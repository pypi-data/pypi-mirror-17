# coding: utf-8

"""
PITConsistencyGroupView.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class PITConsistencyGroupView(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PITConsistencyGroupView - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cg_view_ref': 'str',  # (required parameter)
            'group_ref': 'str',  # (required parameter)
            'label': 'str',  # (required parameter)
            'view_time': 'int',  # (required parameter)
            'view_sequence_number': 'int',  # (required parameter)
            'name': 'str',  
            'id': 'str'
        }

        self.attribute_map = {
            'cg_view_ref': 'cgViewRef',  # (required parameter)
            'group_ref': 'groupRef',  # (required parameter)
            'label': 'label',  # (required parameter)
            'view_time': 'viewTime',  # (required parameter)
            'view_sequence_number': 'viewSequenceNumber',  # (required parameter)
            'name': 'name',  
            'id': 'id'
        }

        self._cg_view_ref = None
        self._group_ref = None
        self._label = None
        self._view_time = None
        self._view_sequence_number = None
        self._name = None
        self._id = None

    @property
    def cg_view_ref(self):
        """
        Gets the cg_view_ref of this PITConsistencyGroupView.
        The reference (key) for this PITConsistencyGroupView.

        :return: The cg_view_ref of this PITConsistencyGroupView.
        :rtype: str
        :required/optional: required
        """
        return self._cg_view_ref

    @cg_view_ref.setter
    def cg_view_ref(self, cg_view_ref):
        """
        Sets the cg_view_ref of this PITConsistencyGroupView.
        The reference (key) for this PITConsistencyGroupView.

        :param cg_view_ref: The cg_view_ref of this PITConsistencyGroupView.
        :type: str
        """
        self._cg_view_ref = cg_view_ref

    @property
    def group_ref(self):
        """
        Gets the group_ref of this PITConsistencyGroupView.
        The PiT Consistency Group to which the Consistency Group View belongs.

        :return: The group_ref of this PITConsistencyGroupView.
        :rtype: str
        :required/optional: required
        """
        return self._group_ref

    @group_ref.setter
    def group_ref(self, group_ref):
        """
        Sets the group_ref of this PITConsistencyGroupView.
        The PiT Consistency Group to which the Consistency Group View belongs.

        :param group_ref: The group_ref of this PITConsistencyGroupView.
        :type: str
        """
        self._group_ref = group_ref

    @property
    def label(self):
        """
        Gets the label of this PITConsistencyGroupView.
        The name of the Consistency Group View.

        :return: The label of this PITConsistencyGroupView.
        :rtype: str
        :required/optional: required
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this PITConsistencyGroupView.
        The name of the Consistency Group View.

        :param label: The label of this PITConsistencyGroupView.
        :type: str
        """
        self._label = label

    @property
    def view_time(self):
        """
        Gets the view_time of this PITConsistencyGroupView.
        The controller-time (measured in seconds since January 1, 1970) when the Consistency Group View was created or re-attached to another PiT. All member Views that are part of this Consistency Group View have this value in their corresponding fields.

        :return: The view_time of this PITConsistencyGroupView.
        :rtype: int
        :required/optional: required
        """
        return self._view_time

    @view_time.setter
    def view_time(self, view_time):
        """
        Sets the view_time of this PITConsistencyGroupView.
        The controller-time (measured in seconds since January 1, 1970) when the Consistency Group View was created or re-attached to another PiT. All member Views that are part of this Consistency Group View have this value in their corresponding fields.

        :param view_time: The view_time of this PITConsistencyGroupView.
        :type: int
        """
        self._view_time = view_time

    @property
    def view_sequence_number(self):
        """
        Gets the view_sequence_number of this PITConsistencyGroupView.
        The view sequence number. This is a monotonically increasing sequence value that is common across all member Views that are part of this Consistency Group View.

        :return: The view_sequence_number of this PITConsistencyGroupView.
        :rtype: int
        :required/optional: required
        """
        return self._view_sequence_number

    @view_sequence_number.setter
    def view_sequence_number(self, view_sequence_number):
        """
        Sets the view_sequence_number of this PITConsistencyGroupView.
        The view sequence number. This is a monotonically increasing sequence value that is common across all member Views that are part of this Consistency Group View.

        :param view_sequence_number: The view_sequence_number of this PITConsistencyGroupView.
        :type: int
        """
        self._view_sequence_number = view_sequence_number

    @property
    def name(self):
        """
        Gets the name of this PITConsistencyGroupView.


        :return: The name of this PITConsistencyGroupView.
        :rtype: str
        :required/optional: optional
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PITConsistencyGroupView.


        :param name: The name of this PITConsistencyGroupView.
        :type: str
        """
        self._name = name

    @property
    def id(self):
        """
        Gets the id of this PITConsistencyGroupView.


        :return: The id of this PITConsistencyGroupView.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PITConsistencyGroupView.


        :param id: The id of this PITConsistencyGroupView.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

