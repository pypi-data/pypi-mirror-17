# coding: utf-8

"""
HLVolumeBundle.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class HLVolumeBundle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HLVolumeBundle - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'snapshot_vol': 'list[SnapshotVolume]',  # (required parameter)
            'mirror_vol': 'list[MirrorProxyVolume]',  # (required parameter)
            'metadata_vol': 'list[MetadataVolume]',  # (required parameter)
            'remote_vol': 'list[RemoteVolume]',  # (required parameter)
            'volume_copy': 'list[VolumeCopy]',  # (required parameter)
            'pit_group': 'list[PITGroup]',  # (required parameter)
            'pit': 'list[PIT]',  # (required parameter)
            'pit_view': 'list[PITView]',  # (required parameter)
            'pit_consistency_group': 'list[PITConsistencyGroup]',  # (required parameter)
            'concat_volume': 'list[ConcatVolume]',  # (required parameter)
            'concat_vol_member': 'list[ConcatVolumeMember]',  # (required parameter)
            'pit_consistency_group_view': 'list[PITConsistencyGroupView]',  # (required parameter)
            'thin_volume': 'list[ThinVolume]',  # (required parameter)
            'async_mirror_group': 'list[AsyncMirrorGroup]',  # (required parameter)
            'async_mirror_group_member': 'list[AsyncMirrorGroupMember]',  # (required parameter)
            'async_mirror_group_incomplete_member': 'list[AsyncMirrorGroupIncompleteMember]'
        }

        self.attribute_map = {
            'snapshot_vol': 'snapshotVol',  # (required parameter)
            'mirror_vol': 'mirrorVol',  # (required parameter)
            'metadata_vol': 'metadataVol',  # (required parameter)
            'remote_vol': 'remoteVol',  # (required parameter)
            'volume_copy': 'volumeCopy',  # (required parameter)
            'pit_group': 'pitGroup',  # (required parameter)
            'pit': 'pit',  # (required parameter)
            'pit_view': 'pitView',  # (required parameter)
            'pit_consistency_group': 'pitConsistencyGroup',  # (required parameter)
            'concat_volume': 'concatVolume',  # (required parameter)
            'concat_vol_member': 'concatVolMember',  # (required parameter)
            'pit_consistency_group_view': 'pitConsistencyGroupView',  # (required parameter)
            'thin_volume': 'thinVolume',  # (required parameter)
            'async_mirror_group': 'asyncMirrorGroup',  # (required parameter)
            'async_mirror_group_member': 'asyncMirrorGroupMember',  # (required parameter)
            'async_mirror_group_incomplete_member': 'asyncMirrorGroupIncompleteMember'
        }

        self._snapshot_vol = None
        self._mirror_vol = None
        self._metadata_vol = None
        self._remote_vol = None
        self._volume_copy = None
        self._pit_group = None
        self._pit = None
        self._pit_view = None
        self._pit_consistency_group = None
        self._concat_volume = None
        self._concat_vol_member = None
        self._pit_consistency_group_view = None
        self._thin_volume = None
        self._async_mirror_group = None
        self._async_mirror_group_member = None
        self._async_mirror_group_incomplete_member = None

    @property
    def snapshot_vol(self):
        """
        Gets the snapshot_vol of this HLVolumeBundle.
        An array of SnapshotVolume objects.

        :return: The snapshot_vol of this HLVolumeBundle.
        :rtype: list[SnapshotVolume]
        :required/optional: required
        """
        return self._snapshot_vol

    @snapshot_vol.setter
    def snapshot_vol(self, snapshot_vol):
        """
        Sets the snapshot_vol of this HLVolumeBundle.
        An array of SnapshotVolume objects.

        :param snapshot_vol: The snapshot_vol of this HLVolumeBundle.
        :type: list[SnapshotVolume]
        """
        self._snapshot_vol = snapshot_vol

    @property
    def mirror_vol(self):
        """
        Gets the mirror_vol of this HLVolumeBundle.
        An array of MirrorProxyVolume objects.

        :return: The mirror_vol of this HLVolumeBundle.
        :rtype: list[MirrorProxyVolume]
        :required/optional: required
        """
        return self._mirror_vol

    @mirror_vol.setter
    def mirror_vol(self, mirror_vol):
        """
        Sets the mirror_vol of this HLVolumeBundle.
        An array of MirrorProxyVolume objects.

        :param mirror_vol: The mirror_vol of this HLVolumeBundle.
        :type: list[MirrorProxyVolume]
        """
        self._mirror_vol = mirror_vol

    @property
    def metadata_vol(self):
        """
        Gets the metadata_vol of this HLVolumeBundle.
        An array of MetadataVolume objects.

        :return: The metadata_vol of this HLVolumeBundle.
        :rtype: list[MetadataVolume]
        :required/optional: required
        """
        return self._metadata_vol

    @metadata_vol.setter
    def metadata_vol(self, metadata_vol):
        """
        Sets the metadata_vol of this HLVolumeBundle.
        An array of MetadataVolume objects.

        :param metadata_vol: The metadata_vol of this HLVolumeBundle.
        :type: list[MetadataVolume]
        """
        self._metadata_vol = metadata_vol

    @property
    def remote_vol(self):
        """
        Gets the remote_vol of this HLVolumeBundle.
        An array of RemoteVolume objects.

        :return: The remote_vol of this HLVolumeBundle.
        :rtype: list[RemoteVolume]
        :required/optional: required
        """
        return self._remote_vol

    @remote_vol.setter
    def remote_vol(self, remote_vol):
        """
        Sets the remote_vol of this HLVolumeBundle.
        An array of RemoteVolume objects.

        :param remote_vol: The remote_vol of this HLVolumeBundle.
        :type: list[RemoteVolume]
        """
        self._remote_vol = remote_vol

    @property
    def volume_copy(self):
        """
        Gets the volume_copy of this HLVolumeBundle.
        An array of VolumeCopy objects.

        :return: The volume_copy of this HLVolumeBundle.
        :rtype: list[VolumeCopy]
        :required/optional: required
        """
        return self._volume_copy

    @volume_copy.setter
    def volume_copy(self, volume_copy):
        """
        Sets the volume_copy of this HLVolumeBundle.
        An array of VolumeCopy objects.

        :param volume_copy: The volume_copy of this HLVolumeBundle.
        :type: list[VolumeCopy]
        """
        self._volume_copy = volume_copy

    @property
    def pit_group(self):
        """
        Gets the pit_group of this HLVolumeBundle.
        An array of PITGroup objects.

        :return: The pit_group of this HLVolumeBundle.
        :rtype: list[PITGroup]
        :required/optional: required
        """
        return self._pit_group

    @pit_group.setter
    def pit_group(self, pit_group):
        """
        Sets the pit_group of this HLVolumeBundle.
        An array of PITGroup objects.

        :param pit_group: The pit_group of this HLVolumeBundle.
        :type: list[PITGroup]
        """
        self._pit_group = pit_group

    @property
    def pit(self):
        """
        Gets the pit of this HLVolumeBundle.
        An array of PiT objects.

        :return: The pit of this HLVolumeBundle.
        :rtype: list[PIT]
        :required/optional: required
        """
        return self._pit

    @pit.setter
    def pit(self, pit):
        """
        Sets the pit of this HLVolumeBundle.
        An array of PiT objects.

        :param pit: The pit of this HLVolumeBundle.
        :type: list[PIT]
        """
        self._pit = pit

    @property
    def pit_view(self):
        """
        Gets the pit_view of this HLVolumeBundle.
        An array of PITView objects.

        :return: The pit_view of this HLVolumeBundle.
        :rtype: list[PITView]
        :required/optional: required
        """
        return self._pit_view

    @pit_view.setter
    def pit_view(self, pit_view):
        """
        Sets the pit_view of this HLVolumeBundle.
        An array of PITView objects.

        :param pit_view: The pit_view of this HLVolumeBundle.
        :type: list[PITView]
        """
        self._pit_view = pit_view

    @property
    def pit_consistency_group(self):
        """
        Gets the pit_consistency_group of this HLVolumeBundle.
        An array of PITConsistencyGroup objects.

        :return: The pit_consistency_group of this HLVolumeBundle.
        :rtype: list[PITConsistencyGroup]
        :required/optional: required
        """
        return self._pit_consistency_group

    @pit_consistency_group.setter
    def pit_consistency_group(self, pit_consistency_group):
        """
        Sets the pit_consistency_group of this HLVolumeBundle.
        An array of PITConsistencyGroup objects.

        :param pit_consistency_group: The pit_consistency_group of this HLVolumeBundle.
        :type: list[PITConsistencyGroup]
        """
        self._pit_consistency_group = pit_consistency_group

    @property
    def concat_volume(self):
        """
        Gets the concat_volume of this HLVolumeBundle.
        An array of ConcatVolume objects.

        :return: The concat_volume of this HLVolumeBundle.
        :rtype: list[ConcatVolume]
        :required/optional: required
        """
        return self._concat_volume

    @concat_volume.setter
    def concat_volume(self, concat_volume):
        """
        Sets the concat_volume of this HLVolumeBundle.
        An array of ConcatVolume objects.

        :param concat_volume: The concat_volume of this HLVolumeBundle.
        :type: list[ConcatVolume]
        """
        self._concat_volume = concat_volume

    @property
    def concat_vol_member(self):
        """
        Gets the concat_vol_member of this HLVolumeBundle.
        An array of ConcatVolumeMember objects.

        :return: The concat_vol_member of this HLVolumeBundle.
        :rtype: list[ConcatVolumeMember]
        :required/optional: required
        """
        return self._concat_vol_member

    @concat_vol_member.setter
    def concat_vol_member(self, concat_vol_member):
        """
        Sets the concat_vol_member of this HLVolumeBundle.
        An array of ConcatVolumeMember objects.

        :param concat_vol_member: The concat_vol_member of this HLVolumeBundle.
        :type: list[ConcatVolumeMember]
        """
        self._concat_vol_member = concat_vol_member

    @property
    def pit_consistency_group_view(self):
        """
        Gets the pit_consistency_group_view of this HLVolumeBundle.
        An array of PITConsistencyGroupView objects.

        :return: The pit_consistency_group_view of this HLVolumeBundle.
        :rtype: list[PITConsistencyGroupView]
        :required/optional: required
        """
        return self._pit_consistency_group_view

    @pit_consistency_group_view.setter
    def pit_consistency_group_view(self, pit_consistency_group_view):
        """
        Sets the pit_consistency_group_view of this HLVolumeBundle.
        An array of PITConsistencyGroupView objects.

        :param pit_consistency_group_view: The pit_consistency_group_view of this HLVolumeBundle.
        :type: list[PITConsistencyGroupView]
        """
        self._pit_consistency_group_view = pit_consistency_group_view

    @property
    def thin_volume(self):
        """
        Gets the thin_volume of this HLVolumeBundle.
        An array of ThinVolume objects.

        :return: The thin_volume of this HLVolumeBundle.
        :rtype: list[ThinVolume]
        :required/optional: required
        """
        return self._thin_volume

    @thin_volume.setter
    def thin_volume(self, thin_volume):
        """
        Sets the thin_volume of this HLVolumeBundle.
        An array of ThinVolume objects.

        :param thin_volume: The thin_volume of this HLVolumeBundle.
        :type: list[ThinVolume]
        """
        self._thin_volume = thin_volume

    @property
    def async_mirror_group(self):
        """
        Gets the async_mirror_group of this HLVolumeBundle.
        Async Mirror Groups.

        :return: The async_mirror_group of this HLVolumeBundle.
        :rtype: list[AsyncMirrorGroup]
        :required/optional: required
        """
        return self._async_mirror_group

    @async_mirror_group.setter
    def async_mirror_group(self, async_mirror_group):
        """
        Sets the async_mirror_group of this HLVolumeBundle.
        Async Mirror Groups.

        :param async_mirror_group: The async_mirror_group of this HLVolumeBundle.
        :type: list[AsyncMirrorGroup]
        """
        self._async_mirror_group = async_mirror_group

    @property
    def async_mirror_group_member(self):
        """
        Gets the async_mirror_group_member of this HLVolumeBundle.
        Async Mirror Group Members.

        :return: The async_mirror_group_member of this HLVolumeBundle.
        :rtype: list[AsyncMirrorGroupMember]
        :required/optional: required
        """
        return self._async_mirror_group_member

    @async_mirror_group_member.setter
    def async_mirror_group_member(self, async_mirror_group_member):
        """
        Sets the async_mirror_group_member of this HLVolumeBundle.
        Async Mirror Group Members.

        :param async_mirror_group_member: The async_mirror_group_member of this HLVolumeBundle.
        :type: list[AsyncMirrorGroupMember]
        """
        self._async_mirror_group_member = async_mirror_group_member

    @property
    def async_mirror_group_incomplete_member(self):
        """
        Gets the async_mirror_group_incomplete_member of this HLVolumeBundle.
        \"Incomplete\" Async Mirror Group Members.

        :return: The async_mirror_group_incomplete_member of this HLVolumeBundle.
        :rtype: list[AsyncMirrorGroupIncompleteMember]
        :required/optional: required
        """
        return self._async_mirror_group_incomplete_member

    @async_mirror_group_incomplete_member.setter
    def async_mirror_group_incomplete_member(self, async_mirror_group_incomplete_member):
        """
        Sets the async_mirror_group_incomplete_member of this HLVolumeBundle.
        \"Incomplete\" Async Mirror Group Members.

        :param async_mirror_group_incomplete_member: The async_mirror_group_incomplete_member of this HLVolumeBundle.
        :type: list[AsyncMirrorGroupIncompleteMember]
        """
        self._async_mirror_group_incomplete_member = async_mirror_group_incomplete_member

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

