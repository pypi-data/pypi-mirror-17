# coding: utf-8

"""
SACache.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class SACache(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SACache - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cache_blk_size': 'int',  # (required parameter)
            'demand_flush_amount': 'int',  # (required parameter)
            'demand_flush_threshold': 'int',  # (required parameter)
            'reserved1': 'str',  
            'reserved2': 'str'
        }

        self.attribute_map = {
            'cache_blk_size': 'cacheBlkSize',  # (required parameter)
            'demand_flush_amount': 'demandFlushAmount',  # (required parameter)
            'demand_flush_threshold': 'demandFlushThreshold',  # (required parameter)
            'reserved1': 'reserved1',  
            'reserved2': 'reserved2'
        }

        self._cache_blk_size = None
        self._demand_flush_amount = None
        self._demand_flush_threshold = None
        self._reserved1 = None
        self._reserved2 = None

    @property
    def cache_blk_size(self):
        """
        Gets the cache_blk_size of this SACache.
        The characteristic size, in bytes, of a cache block.

        :return: The cache_blk_size of this SACache.
        :rtype: int
        :required/optional: required
        """
        return self._cache_blk_size

    @cache_blk_size.setter
    def cache_blk_size(self, cache_blk_size):
        """
        Sets the cache_blk_size of this SACache.
        The characteristic size, in bytes, of a cache block.

        :param cache_blk_size: The cache_blk_size of this SACache.
        :type: int
        """
        self._cache_blk_size = cache_blk_size

    @property
    def demand_flush_amount(self):
        """
        Gets the demand_flush_amount of this SACache.
        Specifies the amount of cache data that will be flushed to disk when a cache flush operation is initiated. This value is specified as an integer in the range 0-100 that represents the percentage of the controller's write cache data that can remain in the \"dirty\", or unflushed state. When demand flush operations are started, data will be flushed from cache to disk until the overall amount of dirty data drops to or below the percentage specified by this value.

        :return: The demand_flush_amount of this SACache.
        :rtype: int
        :required/optional: required
        """
        return self._demand_flush_amount

    @demand_flush_amount.setter
    def demand_flush_amount(self, demand_flush_amount):
        """
        Sets the demand_flush_amount of this SACache.
        Specifies the amount of cache data that will be flushed to disk when a cache flush operation is initiated. This value is specified as an integer in the range 0-100 that represents the percentage of the controller's write cache data that can remain in the \"dirty\", or unflushed state. When demand flush operations are started, data will be flushed from cache to disk until the overall amount of dirty data drops to or below the percentage specified by this value.

        :param demand_flush_amount: The demand_flush_amount of this SACache.
        :type: int
        """
        self._demand_flush_amount = demand_flush_amount

    @property
    def demand_flush_threshold(self):
        """
        Gets the demand_flush_threshold of this SACache.
        Specifies the \"level of fullness\" of \"dirty\" data in the controller's write cache which, when reached, will cause the controller to begin flushing data from cache to disk. This value is specified as a percentage, in the range 0-100, of the overall write cache capacity of the controller. After flushing begins, it will continue until enough data has been flushed to drop the percentage of dirty data to or below the value specified in the demandFlushAmount parameter described above.

        :return: The demand_flush_threshold of this SACache.
        :rtype: int
        :required/optional: required
        """
        return self._demand_flush_threshold

    @demand_flush_threshold.setter
    def demand_flush_threshold(self, demand_flush_threshold):
        """
        Sets the demand_flush_threshold of this SACache.
        Specifies the \"level of fullness\" of \"dirty\" data in the controller's write cache which, when reached, will cause the controller to begin flushing data from cache to disk. This value is specified as a percentage, in the range 0-100, of the overall write cache capacity of the controller. After flushing begins, it will continue until enough data has been flushed to drop the percentage of dirty data to or below the value specified in the demandFlushAmount parameter described above.

        :param demand_flush_threshold: The demand_flush_threshold of this SACache.
        :type: int
        """
        self._demand_flush_threshold = demand_flush_threshold

    @property
    def reserved1(self):
        """
        Gets the reserved1 of this SACache.


        :return: The reserved1 of this SACache.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved1

    @reserved1.setter
    def reserved1(self, reserved1):
        """
        Sets the reserved1 of this SACache.


        :param reserved1: The reserved1 of this SACache.
        :type: str
        """
        self._reserved1 = reserved1

    @property
    def reserved2(self):
        """
        Gets the reserved2 of this SACache.


        :return: The reserved2 of this SACache.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved2

    @reserved2.setter
    def reserved2(self, reserved2):
        """
        Sets the reserved2 of this SACache.


        :param reserved2: The reserved2 of this SACache.
        :type: str
        """
        self._reserved2 = reserved2

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

