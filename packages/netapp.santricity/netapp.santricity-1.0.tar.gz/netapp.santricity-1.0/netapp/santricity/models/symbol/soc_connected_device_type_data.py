# coding: utf-8

"""
SocConnectedDeviceTypeData.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class SocConnectedDeviceTypeData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SocConnectedDeviceTypeData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',  # (required parameter)
            'alternate_controller': 'str',  
            'local_controller': 'str',  
            'drive': 'str',  
            'esm': 'str',  
            'sfp': 'str',  
            'physical_location': 'Location',  
            'drawer': 'str'
        }

        self.attribute_map = {
            'type': 'type',  # (required parameter)
            'alternate_controller': 'alternateController',  
            'local_controller': 'localController',  
            'drive': 'drive',  
            'esm': 'esm',  
            'sfp': 'sfp',  
            'physical_location': 'physicalLocation',  
            'drawer': 'drawer'
        }

        self._type = None
        self._alternate_controller = None
        self._local_controller = None
        self._drive = None
        self._esm = None
        self._sfp = None
        self._physical_location = None
        self._drawer = None

    @property
    def type(self):
        """
        Gets the type of this SocConnectedDeviceTypeData.
        This enumeration object is used to identify the type of device attached to a SOC port.

        :return: The type of this SocConnectedDeviceTypeData.
        :rtype: str
        :required/optional: required
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SocConnectedDeviceTypeData.
        This enumeration object is used to identify the type of device attached to a SOC port.

        :param type: The type of this SocConnectedDeviceTypeData.
        :type: str
        """
        allowed_values = ["controllerLocal", "controllerAlternate", "drive", "esm", "sfp", "unknownDevice", "drawer", "__UNDEFINED"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def alternate_controller(self):
        """
        Gets the alternate_controller of this SocConnectedDeviceTypeData.
        This field identifies the alternate controller. It is present only if type is equal to SOC_PORT_CONTROLLER_ALTERNATE.

        :return: The alternate_controller of this SocConnectedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._alternate_controller

    @alternate_controller.setter
    def alternate_controller(self, alternate_controller):
        """
        Sets the alternate_controller of this SocConnectedDeviceTypeData.
        This field identifies the alternate controller. It is present only if type is equal to SOC_PORT_CONTROLLER_ALTERNATE.

        :param alternate_controller: The alternate_controller of this SocConnectedDeviceTypeData.
        :type: str
        """
        self._alternate_controller = alternate_controller

    @property
    def local_controller(self):
        """
        Gets the local_controller of this SocConnectedDeviceTypeData.
        This field identifies the local controller. It is present only if type is equal to SOC_PORT_CONTROLLER_LOCAL.

        :return: The local_controller of this SocConnectedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._local_controller

    @local_controller.setter
    def local_controller(self, local_controller):
        """
        Sets the local_controller of this SocConnectedDeviceTypeData.
        This field identifies the local controller. It is present only if type is equal to SOC_PORT_CONTROLLER_LOCAL.

        :param local_controller: The local_controller of this SocConnectedDeviceTypeData.
        :type: str
        """
        self._local_controller = local_controller

    @property
    def drive(self):
        """
        Gets the drive of this SocConnectedDeviceTypeData.
        This field identifies a drive. It is present only if type is equal to SOC_PORT_DRIVE.

        :return: The drive of this SocConnectedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._drive

    @drive.setter
    def drive(self, drive):
        """
        Sets the drive of this SocConnectedDeviceTypeData.
        This field identifies a drive. It is present only if type is equal to SOC_PORT_DRIVE.

        :param drive: The drive of this SocConnectedDeviceTypeData.
        :type: str
        """
        self._drive = drive

    @property
    def esm(self):
        """
        Gets the esm of this SocConnectedDeviceTypeData.
        This field identifies an ESM. It is only present if type is equal to SOC_PORT_ESM.

        :return: The esm of this SocConnectedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._esm

    @esm.setter
    def esm(self, esm):
        """
        Sets the esm of this SocConnectedDeviceTypeData.
        This field identifies an ESM. It is only present if type is equal to SOC_PORT_ESM.

        :param esm: The esm of this SocConnectedDeviceTypeData.
        :type: str
        """
        self._esm = esm

    @property
    def sfp(self):
        """
        Gets the sfp of this SocConnectedDeviceTypeData.
        This field identifies an SFP. It is only present if type is equal to SOC_PORT_SFP.

        :return: The sfp of this SocConnectedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._sfp

    @sfp.setter
    def sfp(self, sfp):
        """
        Sets the sfp of this SocConnectedDeviceTypeData.
        This field identifies an SFP. It is only present if type is equal to SOC_PORT_SFP.

        :param sfp: The sfp of this SocConnectedDeviceTypeData.
        :type: str
        """
        self._sfp = sfp

    @property
    def physical_location(self):
        """
        Gets the physical_location of this SocConnectedDeviceTypeData.
        This field identifies the location of an unknown device. It is only present if the type is set to SOC_PORT_UNKNOWN_DEVICE.

        :return: The physical_location of this SocConnectedDeviceTypeData.
        :rtype: Location
        :required/optional: optional
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """
        Sets the physical_location of this SocConnectedDeviceTypeData.
        This field identifies the location of an unknown device. It is only present if the type is set to SOC_PORT_UNKNOWN_DEVICE.

        :param physical_location: The physical_location of this SocConnectedDeviceTypeData.
        :type: Location
        """
        self._physical_location = physical_location

    @property
    def drawer(self):
        """
        Gets the drawer of this SocConnectedDeviceTypeData.
        This field identifies the location of the drawer. It is only present if the type is set to SOC_PORT_DRAWER.

        :return: The drawer of this SocConnectedDeviceTypeData.
        :rtype: str
        :required/optional: optional
        """
        return self._drawer

    @drawer.setter
    def drawer(self, drawer):
        """
        Sets the drawer of this SocConnectedDeviceTypeData.
        This field identifies the location of the drawer. It is only present if the type is set to SOC_PORT_DRAWER.

        :param drawer: The drawer of this SocConnectedDeviceTypeData.
        :type: str
        """
        self._drawer = drawer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

