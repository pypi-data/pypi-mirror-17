# coding: utf-8

"""
EnhancedIbBaselinedStatistics.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class EnhancedIbBaselinedStatistics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EnhancedIbBaselinedStatistics - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'time_data': 'StatisticalTimeData',  # (required parameter)
            'ib_interface_statistics_raw': 'list[EnhancedIbInterfaceStatistics]',  # (required parameter)
            'ib_interface_statistics_rel': 'list[EnhancedIbInterfaceStatistics]'
        }

        self.attribute_map = {
            'time_data': 'timeData',  # (required parameter)
            'ib_interface_statistics_raw': 'ibInterfaceStatisticsRaw',  # (required parameter)
            'ib_interface_statistics_rel': 'ibInterfaceStatisticsRel'
        }

        self._time_data = None
        self._ib_interface_statistics_raw = None
        self._ib_interface_statistics_rel = None

    @property
    def time_data(self):
        """
        Gets the time_data of this EnhancedIbBaselinedStatistics.
        The time at which the baseline was established.

        :return: The time_data of this EnhancedIbBaselinedStatistics.
        :rtype: StatisticalTimeData
        :required/optional: required
        """
        return self._time_data

    @time_data.setter
    def time_data(self, time_data):
        """
        Sets the time_data of this EnhancedIbBaselinedStatistics.
        The time at which the baseline was established.

        :param time_data: The time_data of this EnhancedIbBaselinedStatistics.
        :type: StatisticalTimeData
        """
        self._time_data = time_data

    @property
    def ib_interface_statistics_raw(self):
        """
        Gets the ib_interface_statistics_raw of this EnhancedIbBaselinedStatistics.
        Contains \"raw\" IB host interface statistics. (1) Note that these raw values are reset to zero on a controller reboot so the counters will contain values accumulated since the last controller reboot. The one exception to this rule is when the Infiniband (IB) subnet manager running in the IB fabric resets a counter, usually as a result of a manual command issued from a host. (2) Note that the raw counters may reach a hardware limited maximum value in which case they will not accumulate any more until reset by the subnet manager or if the controller reboots. If the counter reaches its maximum value, the StatisticQualifier element for the statistic will indicate STAT_INVALID_STUCK and the value will reflect the max value. (3) Note that raw statistics that are not supported by that particular type of IB hardware will return a qualifier of STAT_NOT SUPPORTED.

        :return: The ib_interface_statistics_raw of this EnhancedIbBaselinedStatistics.
        :rtype: list[EnhancedIbInterfaceStatistics]
        :required/optional: required
        """
        return self._ib_interface_statistics_raw

    @ib_interface_statistics_raw.setter
    def ib_interface_statistics_raw(self, ib_interface_statistics_raw):
        """
        Sets the ib_interface_statistics_raw of this EnhancedIbBaselinedStatistics.
        Contains \"raw\" IB host interface statistics. (1) Note that these raw values are reset to zero on a controller reboot so the counters will contain values accumulated since the last controller reboot. The one exception to this rule is when the Infiniband (IB) subnet manager running in the IB fabric resets a counter, usually as a result of a manual command issued from a host. (2) Note that the raw counters may reach a hardware limited maximum value in which case they will not accumulate any more until reset by the subnet manager or if the controller reboots. If the counter reaches its maximum value, the StatisticQualifier element for the statistic will indicate STAT_INVALID_STUCK and the value will reflect the max value. (3) Note that raw statistics that are not supported by that particular type of IB hardware will return a qualifier of STAT_NOT SUPPORTED.

        :param ib_interface_statistics_raw: The ib_interface_statistics_raw of this EnhancedIbBaselinedStatistics.
        :type: list[EnhancedIbInterfaceStatistics]
        """
        self._ib_interface_statistics_raw = ib_interface_statistics_raw

    @property
    def ib_interface_statistics_rel(self):
        """
        Gets the ib_interface_statistics_rel of this EnhancedIbBaselinedStatistics.
        Contains \"rel\" IB host interface statistics. \"Rel\" is the difference between the raw counters (see IbInterfaceStatisticsRaw) and the value of the counters at the time setIserStatisticsBaseline() or setIbStatisticsBaseline() was invoked. (1) A controller reboot sets the baseline timestamp for counters for that controller to the time of the (re)boot with counter values all set to zero. (2) The subnet manager resetting a counter may cause the \"rel\" difference to be negative, in which case the counter's associated \"value\" attribute will be negative and the StatisticQualifier element will indicate STAT_INVALID_EXTERNAL_RESET. (3) Note that if the associated raw counter is set to STAT_INVALID_STUCK then the rel counter will also be set to STAT_INVALID_STUCK. (4) If the associated raw counter is set to STAT_NOT_SUPPORTED then the rel counter will be set to STAT_NOT_SUPPORTED.

        :return: The ib_interface_statistics_rel of this EnhancedIbBaselinedStatistics.
        :rtype: list[EnhancedIbInterfaceStatistics]
        :required/optional: required
        """
        return self._ib_interface_statistics_rel

    @ib_interface_statistics_rel.setter
    def ib_interface_statistics_rel(self, ib_interface_statistics_rel):
        """
        Sets the ib_interface_statistics_rel of this EnhancedIbBaselinedStatistics.
        Contains \"rel\" IB host interface statistics. \"Rel\" is the difference between the raw counters (see IbInterfaceStatisticsRaw) and the value of the counters at the time setIserStatisticsBaseline() or setIbStatisticsBaseline() was invoked. (1) A controller reboot sets the baseline timestamp for counters for that controller to the time of the (re)boot with counter values all set to zero. (2) The subnet manager resetting a counter may cause the \"rel\" difference to be negative, in which case the counter's associated \"value\" attribute will be negative and the StatisticQualifier element will indicate STAT_INVALID_EXTERNAL_RESET. (3) Note that if the associated raw counter is set to STAT_INVALID_STUCK then the rel counter will also be set to STAT_INVALID_STUCK. (4) If the associated raw counter is set to STAT_NOT_SUPPORTED then the rel counter will be set to STAT_NOT_SUPPORTED.

        :param ib_interface_statistics_rel: The ib_interface_statistics_rel of this EnhancedIbBaselinedStatistics.
        :type: list[EnhancedIbInterfaceStatistics]
        """
        self._ib_interface_statistics_rel = ib_interface_statistics_rel

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

