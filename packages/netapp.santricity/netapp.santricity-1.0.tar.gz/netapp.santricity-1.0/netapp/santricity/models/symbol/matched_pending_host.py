# coding: utf-8

"""
MatchedPendingHost.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class MatchedPendingHost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MatchedPendingHost - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'pending_host': 'PendingHost',  # (required parameter)
            'matching_configured_host': 'str',  # (required parameter)
            'match_type': 'str',  # (required parameter)
            'host_name_change': 'bool',  # (required parameter)
            'host_type_change': 'bool',  # (required parameter)
            'unconfigured_ports': 'list[SCSIInitiatorPortId]',  # (required parameter)
            'matching_ports': 'list[str]',  # (required parameter)
            'conflicting_ports': 'list[str]',  # (required parameter)
            'missing_ports': 'list[str]',  # (required parameter)
            'matching_initiators': 'list[str]',  # (required parameter)
            'conflicting_initiators': 'list[str]',  # (required parameter)
            'missing_initiators': 'list[str]'
        }

        self.attribute_map = {
            'pending_host': 'pendingHost',  # (required parameter)
            'matching_configured_host': 'matchingConfiguredHost',  # (required parameter)
            'match_type': 'matchType',  # (required parameter)
            'host_name_change': 'hostNameChange',  # (required parameter)
            'host_type_change': 'hostTypeChange',  # (required parameter)
            'unconfigured_ports': 'unconfiguredPorts',  # (required parameter)
            'matching_ports': 'matchingPorts',  # (required parameter)
            'conflicting_ports': 'conflictingPorts',  # (required parameter)
            'missing_ports': 'missingPorts',  # (required parameter)
            'matching_initiators': 'matchingInitiators',  # (required parameter)
            'conflicting_initiators': 'conflictingInitiators',  # (required parameter)
            'missing_initiators': 'missingInitiators'
        }

        self._pending_host = None
        self._matching_configured_host = None
        self._match_type = None
        self._host_name_change = None
        self._host_type_change = None
        self._unconfigured_ports = None
        self._matching_ports = None
        self._conflicting_ports = None
        self._missing_ports = None
        self._matching_initiators = None
        self._conflicting_initiators = None
        self._missing_initiators = None

    @property
    def pending_host(self):
        """
        Gets the pending_host of this MatchedPendingHost.
        A description of the pending host as it was submitted by the host context agent.

        :return: The pending_host of this MatchedPendingHost.
        :rtype: PendingHost
        :required/optional: required
        """
        return self._pending_host

    @pending_host.setter
    def pending_host(self, pending_host):
        """
        Sets the pending_host of this MatchedPendingHost.
        A description of the pending host as it was submitted by the host context agent.

        :param pending_host: The pending_host of this MatchedPendingHost.
        :type: PendingHost
        """
        self._pending_host = pending_host

    @property
    def matching_configured_host(self):
        """
        Gets the matching_configured_host of this MatchedPendingHost.
        A reference to the configured host with which the pending host is matched.

        :return: The matching_configured_host of this MatchedPendingHost.
        :rtype: str
        :required/optional: required
        """
        return self._matching_configured_host

    @matching_configured_host.setter
    def matching_configured_host(self, matching_configured_host):
        """
        Sets the matching_configured_host of this MatchedPendingHost.
        A reference to the configured host with which the pending host is matched.

        :param matching_configured_host: The matching_configured_host of this MatchedPendingHost.
        :type: str
        """
        self._matching_configured_host = matching_configured_host

    @property
    def match_type(self):
        """
        Gets the match_type of this MatchedPendingHost.
        An indication of the host properties on which the match is based.

        :return: The match_type of this MatchedPendingHost.
        :rtype: str
        :required/optional: required
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """
        Sets the match_type of this MatchedPendingHost.
        An indication of the host properties on which the match is based.

        :param match_type: The match_type of this MatchedPendingHost.
        :type: str
        """
        allowed_values = ["nameOnly", "portsOnly", "nameAndPorts", "__UNDEFINED"]
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._match_type = match_type

    @property
    def host_name_change(self):
        """
        Gets the host_name_change of this MatchedPendingHost.
        True if the name of the pending host is different than the configured host.

        :return: The host_name_change of this MatchedPendingHost.
        :rtype: bool
        :required/optional: required
        """
        return self._host_name_change

    @host_name_change.setter
    def host_name_change(self, host_name_change):
        """
        Sets the host_name_change of this MatchedPendingHost.
        True if the name of the pending host is different than the configured host.

        :param host_name_change: The host_name_change of this MatchedPendingHost.
        :type: bool
        """
        self._host_name_change = host_name_change

    @property
    def host_type_change(self):
        """
        Gets the host_type_change of this MatchedPendingHost.
        True if the type of the pending host is different than the configured host.

        :return: The host_type_change of this MatchedPendingHost.
        :rtype: bool
        :required/optional: required
        """
        return self._host_type_change

    @host_type_change.setter
    def host_type_change(self, host_type_change):
        """
        Sets the host_type_change of this MatchedPendingHost.
        True if the type of the pending host is different than the configured host.

        :param host_type_change: The host_type_change of this MatchedPendingHost.
        :type: bool
        """
        self._host_type_change = host_type_change

    @property
    def unconfigured_ports(self):
        """
        Gets the unconfigured_ports of this MatchedPendingHost.
        yet been created in the configured topology.

        :return: The unconfigured_ports of this MatchedPendingHost.
        :rtype: list[SCSIInitiatorPortId]
        :required/optional: required
        """
        return self._unconfigured_ports

    @unconfigured_ports.setter
    def unconfigured_ports(self, unconfigured_ports):
        """
        Sets the unconfigured_ports of this MatchedPendingHost.
        yet been created in the configured topology.

        :param unconfigured_ports: The unconfigured_ports of this MatchedPendingHost.
        :type: list[SCSIInitiatorPortId]
        """
        self._unconfigured_ports = unconfigured_ports

    @property
    def matching_ports(self):
        """
        Gets the matching_ports of this MatchedPendingHost.
        A list of HostPortRef structures representing configured ports that are common between this pending host and the configured host identified by the matchingConfiguredHost field.

        :return: The matching_ports of this MatchedPendingHost.
        :rtype: list[str]
        :required/optional: required
        """
        return self._matching_ports

    @matching_ports.setter
    def matching_ports(self, matching_ports):
        """
        Sets the matching_ports of this MatchedPendingHost.
        A list of HostPortRef structures representing configured ports that are common between this pending host and the configured host identified by the matchingConfiguredHost field.

        :param matching_ports: The matching_ports of this MatchedPendingHost.
        :type: list[str]
        """
        self._matching_ports = matching_ports

    @property
    def conflicting_ports(self):
        """
        Gets the conflicting_ports of this MatchedPendingHost.
        A list of HostPortRef structures representing configured ports belonging to the pending host that conflict with ports in the configured topology. The definition of a port conflict for a matched pending host is any port belonging to the pending host that (1) is not identified in matchingPorts and (2) matches a port in the configured topology.

        :return: The conflicting_ports of this MatchedPendingHost.
        :rtype: list[str]
        :required/optional: required
        """
        return self._conflicting_ports

    @conflicting_ports.setter
    def conflicting_ports(self, conflicting_ports):
        """
        Sets the conflicting_ports of this MatchedPendingHost.
        A list of HostPortRef structures representing configured ports belonging to the pending host that conflict with ports in the configured topology. The definition of a port conflict for a matched pending host is any port belonging to the pending host that (1) is not identified in matchingPorts and (2) matches a port in the configured topology.

        :param conflicting_ports: The conflicting_ports of this MatchedPendingHost.
        :type: list[str]
        """
        self._conflicting_ports = conflicting_ports

    @property
    def missing_ports(self):
        """
        Gets the missing_ports of this MatchedPendingHost.
        A list of HostPortRef structures representing configured ports belonging to the host identified by matchingConfiguredHost, which are not present in the pending host ports.

        :return: The missing_ports of this MatchedPendingHost.
        :rtype: list[str]
        :required/optional: required
        """
        return self._missing_ports

    @missing_ports.setter
    def missing_ports(self, missing_ports):
        """
        Sets the missing_ports of this MatchedPendingHost.
        A list of HostPortRef structures representing configured ports belonging to the host identified by matchingConfiguredHost, which are not present in the pending host ports.

        :param missing_ports: The missing_ports of this MatchedPendingHost.
        :type: list[str]
        """
        self._missing_ports = missing_ports

    @property
    def matching_initiators(self):
        """
        Gets the matching_initiators of this MatchedPendingHost.
        A list of ScsiNodeRef elements representing configured initiators that are common between this pending host and the configured host identified by the matchingConfiguredHost field.

        :return: The matching_initiators of this MatchedPendingHost.
        :rtype: list[str]
        :required/optional: required
        """
        return self._matching_initiators

    @matching_initiators.setter
    def matching_initiators(self, matching_initiators):
        """
        Sets the matching_initiators of this MatchedPendingHost.
        A list of ScsiNodeRef elements representing configured initiators that are common between this pending host and the configured host identified by the matchingConfiguredHost field.

        :param matching_initiators: The matching_initiators of this MatchedPendingHost.
        :type: list[str]
        """
        self._matching_initiators = matching_initiators

    @property
    def conflicting_initiators(self):
        """
        Gets the conflicting_initiators of this MatchedPendingHost.
        A list of ScsiNodeRef elements representing configured initiators belonging to the pending host that conflict with ports or initiators in the configured topology. The definition of an initiator conflict for a matched pending host is any initiator belonging to the pending host that (1) is not identified in matching Initiators and (2) matches an initiator in the configured topology.

        :return: The conflicting_initiators of this MatchedPendingHost.
        :rtype: list[str]
        :required/optional: required
        """
        return self._conflicting_initiators

    @conflicting_initiators.setter
    def conflicting_initiators(self, conflicting_initiators):
        """
        Sets the conflicting_initiators of this MatchedPendingHost.
        A list of ScsiNodeRef elements representing configured initiators belonging to the pending host that conflict with ports or initiators in the configured topology. The definition of an initiator conflict for a matched pending host is any initiator belonging to the pending host that (1) is not identified in matching Initiators and (2) matches an initiator in the configured topology.

        :param conflicting_initiators: The conflicting_initiators of this MatchedPendingHost.
        :type: list[str]
        """
        self._conflicting_initiators = conflicting_initiators

    @property
    def missing_initiators(self):
        """
        Gets the missing_initiators of this MatchedPendingHost.
        A list of ScsiNodeRef elements representing configured initiators belonging to the host identified by matchingConfiguredHost, which are not present in the pending host initiators.

        :return: The missing_initiators of this MatchedPendingHost.
        :rtype: list[str]
        :required/optional: required
        """
        return self._missing_initiators

    @missing_initiators.setter
    def missing_initiators(self, missing_initiators):
        """
        Sets the missing_initiators of this MatchedPendingHost.
        A list of ScsiNodeRef elements representing configured initiators belonging to the host identified by matchingConfiguredHost, which are not present in the pending host initiators.

        :param missing_initiators: The missing_initiators of this MatchedPendingHost.
        :type: list[str]
        """
        self._missing_initiators = missing_initiators

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

