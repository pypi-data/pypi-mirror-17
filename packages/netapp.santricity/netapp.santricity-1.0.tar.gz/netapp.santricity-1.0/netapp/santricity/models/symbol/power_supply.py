# coding: utf-8

"""
PowerSupply.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class PowerSupply(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PowerSupply - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'power_supply_ref': 'str',  # (required parameter)
            'status': 'str',  # (required parameter)
            'physical_location': 'Location',  # (required parameter)
            'part_number': 'str',  # (required parameter)
            'serial_number': 'str',  # (required parameter)
            'vendor_name': 'str',  # (required parameter)
            'manufacturer_date': 'int',  # (required parameter)
            'fru_type': 'str',  # (required parameter)
            'reserved1': 'str',  
            'reserved2': 'str',  
            'rtr_attributes': 'RTRAttributes',  # (required parameter)
            'repair_policy': 'RepairPolicy',  # (required parameter)
            'firmware_revision': 'str',  # (required parameter)
            'manufacturing_device_code': 'int',  # (required parameter)
            'id': 'str'
        }

        self.attribute_map = {
            'power_supply_ref': 'powerSupplyRef',  # (required parameter)
            'status': 'status',  # (required parameter)
            'physical_location': 'physicalLocation',  # (required parameter)
            'part_number': 'partNumber',  # (required parameter)
            'serial_number': 'serialNumber',  # (required parameter)
            'vendor_name': 'vendorName',  # (required parameter)
            'manufacturer_date': 'manufacturerDate',  # (required parameter)
            'fru_type': 'fruType',  # (required parameter)
            'reserved1': 'reserved1',  
            'reserved2': 'reserved2',  
            'rtr_attributes': 'rtrAttributes',  # (required parameter)
            'repair_policy': 'repairPolicy',  # (required parameter)
            'firmware_revision': 'firmwareRevision',  # (required parameter)
            'manufacturing_device_code': 'manufacturingDeviceCode',  # (required parameter)
            'id': 'id'
        }

        self._power_supply_ref = None
        self._status = None
        self._physical_location = None
        self._part_number = None
        self._serial_number = None
        self._vendor_name = None
        self._manufacturer_date = None
        self._fru_type = None
        self._reserved1 = None
        self._reserved2 = None
        self._rtr_attributes = None
        self._repair_policy = None
        self._firmware_revision = None
        self._manufacturing_device_code = None
        self._id = None

    @property
    def power_supply_ref(self):
        """
        Gets the power_supply_ref of this PowerSupply.
        The physical location of the power supply. The parent reference in Location identifies the tray or CRU that physically houses the power supply, and the position field is the parent-relative/like-component relative number of the power supply, starting at one.

        :return: The power_supply_ref of this PowerSupply.
        :rtype: str
        :required/optional: required
        """
        return self._power_supply_ref

    @power_supply_ref.setter
    def power_supply_ref(self, power_supply_ref):
        """
        Sets the power_supply_ref of this PowerSupply.
        The physical location of the power supply. The parent reference in Location identifies the tray or CRU that physically houses the power supply, and the position field is the parent-relative/like-component relative number of the power supply, starting at one.

        :param power_supply_ref: The power_supply_ref of this PowerSupply.
        :type: str
        """
        self._power_supply_ref = power_supply_ref

    @property
    def status(self):
        """
        Gets the status of this PowerSupply.
        The operation status of the power supply.

        :return: The status of this PowerSupply.
        :rtype: str
        :required/optional: required
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this PowerSupply.
        The operation status of the power supply.

        :param status: The status of this PowerSupply.
        :type: str
        """
        allowed_values = ["optimal", "failed", "removed", "unknown", "noinput", "__UNDEFINED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def physical_location(self):
        """
        Gets the physical_location of this PowerSupply.
        The physical location of the power supply. Note that the tray reference identifies the enclosure containing the power supply. For non-XBB controller enclosures, the slot information does not apply. For XBB controller enclosures, the slot information is an ordinal identifier (a value of 1 means the first (left) power supply and a value of 2 means the second (right) power supply).

        :return: The physical_location of this PowerSupply.
        :rtype: Location
        :required/optional: required
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """
        Sets the physical_location of this PowerSupply.
        The physical location of the power supply. Note that the tray reference identifies the enclosure containing the power supply. For non-XBB controller enclosures, the slot information does not apply. For XBB controller enclosures, the slot information is an ordinal identifier (a value of 1 means the first (left) power supply and a value of 2 means the second (right) power supply).

        :param physical_location: The physical_location of this PowerSupply.
        :type: Location
        """
        self._physical_location = physical_location

    @property
    def part_number(self):
        """
        Gets the part_number of this PowerSupply.
        The part number of the power supply from VPD data.

        :return: The part_number of this PowerSupply.
        :rtype: str
        :required/optional: required
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """
        Sets the part_number of this PowerSupply.
        The part number of the power supply from VPD data.

        :param part_number: The part_number of this PowerSupply.
        :type: str
        """
        self._part_number = part_number

    @property
    def serial_number(self):
        """
        Gets the serial_number of this PowerSupply.
        The serial number of the power supply.

        :return: The serial_number of this PowerSupply.
        :rtype: str
        :required/optional: required
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this PowerSupply.
        The serial number of the power supply.

        :param serial_number: The serial_number of this PowerSupply.
        :type: str
        """
        self._serial_number = serial_number

    @property
    def vendor_name(self):
        """
        Gets the vendor_name of this PowerSupply.
        The name of the manufacturer of the power supply.

        :return: The vendor_name of this PowerSupply.
        :rtype: str
        :required/optional: required
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """
        Sets the vendor_name of this PowerSupply.
        The name of the manufacturer of the power supply.

        :param vendor_name: The vendor_name of this PowerSupply.
        :type: str
        """
        self._vendor_name = vendor_name

    @property
    def manufacturer_date(self):
        """
        Gets the manufacturer_date of this PowerSupply.
        The date the power supply was manufactured.

        :return: The manufacturer_date of this PowerSupply.
        :rtype: int
        :required/optional: required
        """
        return self._manufacturer_date

    @manufacturer_date.setter
    def manufacturer_date(self, manufacturer_date):
        """
        Sets the manufacturer_date of this PowerSupply.
        The date the power supply was manufactured.

        :param manufacturer_date: The manufacturer_date of this PowerSupply.
        :type: int
        """
        self._manufacturer_date = manufacturer_date

    @property
    def fru_type(self):
        """
        Gets the fru_type of this PowerSupply.
        The field replaceable unit type of the power supply.

        :return: The fru_type of this PowerSupply.
        :rtype: str
        :required/optional: required
        """
        return self._fru_type

    @fru_type.setter
    def fru_type(self, fru_type):
        """
        Sets the fru_type of this PowerSupply.
        The field replaceable unit type of the power supply.

        :param fru_type: The fru_type of this PowerSupply.
        :type: str
        """
        self._fru_type = fru_type

    @property
    def reserved1(self):
        """
        Gets the reserved1 of this PowerSupply.


        :return: The reserved1 of this PowerSupply.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved1

    @reserved1.setter
    def reserved1(self, reserved1):
        """
        Sets the reserved1 of this PowerSupply.


        :param reserved1: The reserved1 of this PowerSupply.
        :type: str
        """
        self._reserved1 = reserved1

    @property
    def reserved2(self):
        """
        Gets the reserved2 of this PowerSupply.


        :return: The reserved2 of this PowerSupply.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved2

    @reserved2.setter
    def reserved2(self, reserved2):
        """
        Sets the reserved2 of this PowerSupply.


        :param reserved2: The reserved2 of this PowerSupply.
        :type: str
        """
        self._reserved2 = reserved2

    @property
    def rtr_attributes(self):
        """
        Gets the rtr_attributes of this PowerSupply.
        The CRU type of the power supply plus its ready-to-remove attributes, which are based on the CRU type

        :return: The rtr_attributes of this PowerSupply.
        :rtype: RTRAttributes
        :required/optional: required
        """
        return self._rtr_attributes

    @rtr_attributes.setter
    def rtr_attributes(self, rtr_attributes):
        """
        Sets the rtr_attributes of this PowerSupply.
        The CRU type of the power supply plus its ready-to-remove attributes, which are based on the CRU type

        :param rtr_attributes: The rtr_attributes of this PowerSupply.
        :type: RTRAttributes
        """
        self._rtr_attributes = rtr_attributes

    @property
    def repair_policy(self):
        """
        Gets the repair_policy of this PowerSupply.
        The repair policy for the power supply component.

        :return: The repair_policy of this PowerSupply.
        :rtype: RepairPolicy
        :required/optional: required
        """
        return self._repair_policy

    @repair_policy.setter
    def repair_policy(self, repair_policy):
        """
        Sets the repair_policy of this PowerSupply.
        The repair policy for the power supply component.

        :param repair_policy: The repair_policy of this PowerSupply.
        :type: RepairPolicy
        """
        self._repair_policy = repair_policy

    @property
    def firmware_revision(self):
        """
        Gets the firmware_revision of this PowerSupply.
        An ASCII character string that identifies the version of the firmware.

        :return: The firmware_revision of this PowerSupply.
        :rtype: str
        :required/optional: required
        """
        return self._firmware_revision

    @firmware_revision.setter
    def firmware_revision(self, firmware_revision):
        """
        Sets the firmware_revision of this PowerSupply.
        An ASCII character string that identifies the version of the firmware.

        :param firmware_revision: The firmware_revision of this PowerSupply.
        :type: str
        """
        self._firmware_revision = firmware_revision

    @property
    def manufacturing_device_code(self):
        """
        Gets the manufacturing_device_code of this PowerSupply.
        An integer value that specifies the Manufacturing Device Code.

        :return: The manufacturing_device_code of this PowerSupply.
        :rtype: int
        :required/optional: required
        """
        return self._manufacturing_device_code

    @manufacturing_device_code.setter
    def manufacturing_device_code(self, manufacturing_device_code):
        """
        Sets the manufacturing_device_code of this PowerSupply.
        An integer value that specifies the Manufacturing Device Code.

        :param manufacturing_device_code: The manufacturing_device_code of this PowerSupply.
        :type: int
        """
        self._manufacturing_device_code = manufacturing_device_code

    @property
    def id(self):
        """
        Gets the id of this PowerSupply.


        :return: The id of this PowerSupply.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PowerSupply.


        :param id: The id of this PowerSupply.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

