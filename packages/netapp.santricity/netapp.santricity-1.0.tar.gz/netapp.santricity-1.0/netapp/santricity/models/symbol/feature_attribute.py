# coding: utf-8

"""
FeatureAttribute.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class FeatureAttribute(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FeatureAttribute - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'feature_attr_id': 'str',  # (required parameter)
            'key_enabled': 'bool',  
            'key_limit': 'int',  
            'shipped_enabled': 'bool',  
            'shipped_limit': 'int',  
            'subject_to_gold_key': 'bool',  
            'supported_values': 'list[str]',  
            'evaluation_duration': 'int'
        }

        self.attribute_map = {
            'feature_attr_id': 'featureAttrId',  # (required parameter)
            'key_enabled': 'keyEnabled',  
            'key_limit': 'keyLimit',  
            'shipped_enabled': 'shippedEnabled',  
            'shipped_limit': 'shippedLimit',  
            'subject_to_gold_key': 'subjectToGoldKey',  
            'supported_values': 'supportedValues',  
            'evaluation_duration': 'evaluationDuration'
        }

        self._feature_attr_id = None
        self._key_enabled = None
        self._key_limit = None
        self._shipped_enabled = None
        self._shipped_limit = None
        self._subject_to_gold_key = None
        self._supported_values = None
        self._evaluation_duration = None

    @property
    def feature_attr_id(self):
        """
        Gets the feature_attr_id of this FeatureAttribute.
        This enumeration identifies the defined feature attributes.

        :return: The feature_attr_id of this FeatureAttribute.
        :rtype: str
        :required/optional: required
        """
        return self._feature_attr_id

    @feature_attr_id.setter
    def feature_attr_id(self, feature_attr_id):
        """
        Sets the feature_attr_id of this FeatureAttribute.
        This enumeration identifies the defined feature attributes.

        :param feature_attr_id: The feature_attr_id of this FeatureAttribute.
        :type: str
        """
        allowed_values = ["shippedEnabled", "shippedLimit", "keyEnabled", "keyLimit", "supportedValues", "subjectToGoldKey", "evalDuration", "__UNDEFINED"]
        if feature_attr_id not in allowed_values:
            raise ValueError(
                "Invalid value for `feature_attr_id`, must be one of {0}"
                .format(allowed_values)
            )
        self._feature_attr_id = feature_attr_id

    @property
    def key_enabled(self):
        """
        Gets the key_enabled of this FeatureAttribute.
        The boolean value for a \"KEY ENABLED\" attribute. This field is only present if featureAttrId is equal to FEATURE_ATTR_KEY_ENABLED.

        :return: The key_enabled of this FeatureAttribute.
        :rtype: bool
        :required/optional: optional
        """
        return self._key_enabled

    @key_enabled.setter
    def key_enabled(self, key_enabled):
        """
        Sets the key_enabled of this FeatureAttribute.
        The boolean value for a \"KEY ENABLED\" attribute. This field is only present if featureAttrId is equal to FEATURE_ATTR_KEY_ENABLED.

        :param key_enabled: The key_enabled of this FeatureAttribute.
        :type: bool
        """
        self._key_enabled = key_enabled

    @property
    def key_limit(self):
        """
        Gets the key_limit of this FeatureAttribute.
        The integer value for a \"KEY LIMIT\" attribute. This field is only present if featureAttrId is equal to FEAUTRE_ATTR_KEY_LIMIT.

        :return: The key_limit of this FeatureAttribute.
        :rtype: int
        :required/optional: optional
        """
        return self._key_limit

    @key_limit.setter
    def key_limit(self, key_limit):
        """
        Sets the key_limit of this FeatureAttribute.
        The integer value for a \"KEY LIMIT\" attribute. This field is only present if featureAttrId is equal to FEAUTRE_ATTR_KEY_LIMIT.

        :param key_limit: The key_limit of this FeatureAttribute.
        :type: int
        """
        self._key_limit = key_limit

    @property
    def shipped_enabled(self):
        """
        Gets the shipped_enabled of this FeatureAttribute.
        The boolean value for a \"SHIPPED ENABLED\" attribute. This field is only present if featureAttrId is equal to FEATURE_ATTR_SHIPPED_ENABLED.

        :return: The shipped_enabled of this FeatureAttribute.
        :rtype: bool
        :required/optional: optional
        """
        return self._shipped_enabled

    @shipped_enabled.setter
    def shipped_enabled(self, shipped_enabled):
        """
        Sets the shipped_enabled of this FeatureAttribute.
        The boolean value for a \"SHIPPED ENABLED\" attribute. This field is only present if featureAttrId is equal to FEATURE_ATTR_SHIPPED_ENABLED.

        :param shipped_enabled: The shipped_enabled of this FeatureAttribute.
        :type: bool
        """
        self._shipped_enabled = shipped_enabled

    @property
    def shipped_limit(self):
        """
        Gets the shipped_limit of this FeatureAttribute.
        The integer value for a \"SHIPPED LIMIT\" attribute. This field is only present if featurAttrId is equal to FEATURE_ATTR_SHIPPED_LIMIT.

        :return: The shipped_limit of this FeatureAttribute.
        :rtype: int
        :required/optional: optional
        """
        return self._shipped_limit

    @shipped_limit.setter
    def shipped_limit(self, shipped_limit):
        """
        Sets the shipped_limit of this FeatureAttribute.
        The integer value for a \"SHIPPED LIMIT\" attribute. This field is only present if featurAttrId is equal to FEATURE_ATTR_SHIPPED_LIMIT.

        :param shipped_limit: The shipped_limit of this FeatureAttribute.
        :type: int
        """
        self._shipped_limit = shipped_limit

    @property
    def subject_to_gold_key(self):
        """
        Gets the subject_to_gold_key of this FeatureAttribute.
        The boolean value for a \"SUBJECT_TO_GOLD_KEY\" attribute. This field is only present if featureAttrId is equal to FEATURE_ATTR_SUBJECT_TO_GOLD_KEY.

        :return: The subject_to_gold_key of this FeatureAttribute.
        :rtype: bool
        :required/optional: optional
        """
        return self._subject_to_gold_key

    @subject_to_gold_key.setter
    def subject_to_gold_key(self, subject_to_gold_key):
        """
        Sets the subject_to_gold_key of this FeatureAttribute.
        The boolean value for a \"SUBJECT_TO_GOLD_KEY\" attribute. This field is only present if featureAttrId is equal to FEATURE_ATTR_SUBJECT_TO_GOLD_KEY.

        :param subject_to_gold_key: The subject_to_gold_key of this FeatureAttribute.
        :type: bool
        """
        self._subject_to_gold_key = subject_to_gold_key

    @property
    def supported_values(self):
        """
        Gets the supported_values of this FeatureAttribute.
        The set of string values for a \"SUPPORTED VALUES\" attribute. This field is only present if featureAttrId is equal to FEATURE_ATTR_SUPPORTED_VALUES.

        :return: The supported_values of this FeatureAttribute.
        :rtype: list[str]
        :required/optional: optional
        """
        return self._supported_values

    @supported_values.setter
    def supported_values(self, supported_values):
        """
        Sets the supported_values of this FeatureAttribute.
        The set of string values for a \"SUPPORTED VALUES\" attribute. This field is only present if featureAttrId is equal to FEATURE_ATTR_SUPPORTED_VALUES.

        :param supported_values: The supported_values of this FeatureAttribute.
        :type: list[str]
        """
        self._supported_values = supported_values

    @property
    def evaluation_duration(self):
        """
        Gets the evaluation_duration of this FeatureAttribute.
        An unsigned integer representing the number of days for the \"EVALUATION DURATION\" attribute. This field is only present if featureAttrId is equal to FEATURE_ATTR_EVAL_DURATION.

        :return: The evaluation_duration of this FeatureAttribute.
        :rtype: int
        :required/optional: optional
        """
        return self._evaluation_duration

    @evaluation_duration.setter
    def evaluation_duration(self, evaluation_duration):
        """
        Sets the evaluation_duration of this FeatureAttribute.
        An unsigned integer representing the number of days for the \"EVALUATION DURATION\" attribute. This field is only present if featureAttrId is equal to FEATURE_ATTR_EVAL_DURATION.

        :param evaluation_duration: The evaluation_duration of this FeatureAttribute.
        :type: int
        """
        self._evaluation_duration = evaluation_duration

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

