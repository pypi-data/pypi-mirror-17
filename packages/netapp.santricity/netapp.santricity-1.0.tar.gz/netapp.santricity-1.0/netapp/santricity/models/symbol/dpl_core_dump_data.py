# coding: utf-8

"""
DPLCoreDumpData.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DPLCoreDumpData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DPLCoreDumpData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'dpl_core_dump_tag': 'int',  # (required parameter)
            'dpl_core_dump_needs_retrieved': 'bool',  # (required parameter)
            'dpl_core_dump_enabled': 'bool',  # (required parameter)
            'time_stamp': 'int'
        }

        self.attribute_map = {
            'dpl_core_dump_tag': 'dplCoreDumpTag',  # (required parameter)
            'dpl_core_dump_needs_retrieved': 'dplCoreDumpNeedsRetrieved',  # (required parameter)
            'dpl_core_dump_enabled': 'dplCoreDumpEnabled',  # (required parameter)
            'time_stamp': 'timeStamp'
        }

        self._dpl_core_dump_tag = None
        self._dpl_core_dump_needs_retrieved = None
        self._dpl_core_dump_enabled = None
        self._time_stamp = None

    @property
    def dpl_core_dump_tag(self):
        """
        Gets the dpl_core_dump_tag of this DPLCoreDumpData.
        The tag value of the DPL core dump currently in controller memory. Each core dump has a unique tag value. A value of DPL_CORE_DUMP_NULL_TAG indicates there is no DPL core dump to retrieve.

        :return: The dpl_core_dump_tag of this DPLCoreDumpData.
        :rtype: int
        :required/optional: required
        """
        return self._dpl_core_dump_tag

    @dpl_core_dump_tag.setter
    def dpl_core_dump_tag(self, dpl_core_dump_tag):
        """
        Sets the dpl_core_dump_tag of this DPLCoreDumpData.
        The tag value of the DPL core dump currently in controller memory. Each core dump has a unique tag value. A value of DPL_CORE_DUMP_NULL_TAG indicates there is no DPL core dump to retrieve.

        :param dpl_core_dump_tag: The dpl_core_dump_tag of this DPLCoreDumpData.
        :type: int
        """
        self._dpl_core_dump_tag = dpl_core_dump_tag

    @property
    def dpl_core_dump_needs_retrieved(self):
        """
        Gets the dpl_core_dump_needs_retrieved of this DPLCoreDumpData.
        If true, a DPL core dump currently exists in controller memory and has not been retrieved.

        :return: The dpl_core_dump_needs_retrieved of this DPLCoreDumpData.
        :rtype: bool
        :required/optional: required
        """
        return self._dpl_core_dump_needs_retrieved

    @dpl_core_dump_needs_retrieved.setter
    def dpl_core_dump_needs_retrieved(self, dpl_core_dump_needs_retrieved):
        """
        Sets the dpl_core_dump_needs_retrieved of this DPLCoreDumpData.
        If true, a DPL core dump currently exists in controller memory and has not been retrieved.

        :param dpl_core_dump_needs_retrieved: The dpl_core_dump_needs_retrieved of this DPLCoreDumpData.
        :type: bool
        """
        self._dpl_core_dump_needs_retrieved = dpl_core_dump_needs_retrieved

    @property
    def dpl_core_dump_enabled(self):
        """
        Gets the dpl_core_dump_enabled of this DPLCoreDumpData.
        If true, DPL Core Dump is enabled in the controller.

        :return: The dpl_core_dump_enabled of this DPLCoreDumpData.
        :rtype: bool
        :required/optional: required
        """
        return self._dpl_core_dump_enabled

    @dpl_core_dump_enabled.setter
    def dpl_core_dump_enabled(self, dpl_core_dump_enabled):
        """
        Sets the dpl_core_dump_enabled of this DPLCoreDumpData.
        If true, DPL Core Dump is enabled in the controller.

        :param dpl_core_dump_enabled: The dpl_core_dump_enabled of this DPLCoreDumpData.
        :type: bool
        """
        self._dpl_core_dump_enabled = dpl_core_dump_enabled

    @property
    def time_stamp(self):
        """
        Gets the time_stamp of this DPLCoreDumpData.
        The time that the core dump was collected measured in seconds since midnight GMT on January 1, 1970.

        :return: The time_stamp of this DPLCoreDumpData.
        :rtype: int
        :required/optional: required
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """
        Sets the time_stamp of this DPLCoreDumpData.
        The time that the core dump was collected measured in seconds since midnight GMT on January 1, 1970.

        :param time_stamp: The time_stamp of this DPLCoreDumpData.
        :type: int
        """
        self._time_stamp = time_stamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

