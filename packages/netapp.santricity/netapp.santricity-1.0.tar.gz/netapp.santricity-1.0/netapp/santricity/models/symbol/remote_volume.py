# coding: utf-8

"""
RemoteVolume.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class RemoteVolume(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RemoteVolume - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'world_wide_name': 'str',  # (required parameter)
            'remote_vol_ref': 'str',  # (required parameter)
            'manager': 'str',  # (required parameter)
            'remote_array_id': 'SAIdentifier',  # (required parameter)
            'remote_node_wwn': 'str',  # (required parameter)
            'remote_vol_wwn': 'str',  # (required parameter)
            'remote_vol_user_label': 'str',  # (required parameter)
            'remote_vol_state': 'str',  # (required parameter)
            'remote_vol_capacity': 'int',  # (required parameter)
            'volume_handle': 'int',  # (required parameter)
            'perms': 'VolumePerms',  # (required parameter)
            'reserved1': 'str',  
            'reserved2': 'str',  
            'remote_node_name': 'ScsiNodeName',  # (required parameter)
            'remote_vol_security_type': 'str'
        }

        self.attribute_map = {
            'world_wide_name': 'worldWideName',  # (required parameter)
            'remote_vol_ref': 'remoteVolRef',  # (required parameter)
            'manager': 'manager',  # (required parameter)
            'remote_array_id': 'remoteArrayId',  # (required parameter)
            'remote_node_wwn': 'remoteNodeWWN',  # (required parameter)
            'remote_vol_wwn': 'remoteVolWWN',  # (required parameter)
            'remote_vol_user_label': 'remoteVolUserLabel',  # (required parameter)
            'remote_vol_state': 'remoteVolState',  # (required parameter)
            'remote_vol_capacity': 'remoteVolCapacity',  # (required parameter)
            'volume_handle': 'volumeHandle',  # (required parameter)
            'perms': 'perms',  # (required parameter)
            'reserved1': 'reserved1',  
            'reserved2': 'reserved2',  
            'remote_node_name': 'remoteNodeName',  # (required parameter)
            'remote_vol_security_type': 'remoteVolSecurityType'
        }

        self._world_wide_name = None
        self._remote_vol_ref = None
        self._manager = None
        self._remote_array_id = None
        self._remote_node_wwn = None
        self._remote_vol_wwn = None
        self._remote_vol_user_label = None
        self._remote_vol_state = None
        self._remote_vol_capacity = None
        self._volume_handle = None
        self._perms = None
        self._reserved1 = None
        self._reserved2 = None
        self._remote_node_name = None
        self._remote_vol_security_type = None

    @property
    def world_wide_name(self):
        """
        Gets the world_wide_name of this RemoteVolume.
        The WWN of the remote volume.

        :return: The world_wide_name of this RemoteVolume.
        :rtype: str
        :required/optional: required
        """
        return self._world_wide_name

    @world_wide_name.setter
    def world_wide_name(self, world_wide_name):
        """
        Sets the world_wide_name of this RemoteVolume.
        The WWN of the remote volume.

        :param world_wide_name: The world_wide_name of this RemoteVolume.
        :type: str
        """
        self._world_wide_name = world_wide_name

    @property
    def remote_vol_ref(self):
        """
        Gets the remote_vol_ref of this RemoteVolume.
        The identifier of the remote volume.

        :return: The remote_vol_ref of this RemoteVolume.
        :rtype: str
        :required/optional: required
        """
        return self._remote_vol_ref

    @remote_vol_ref.setter
    def remote_vol_ref(self, remote_vol_ref):
        """
        Sets the remote_vol_ref of this RemoteVolume.
        The identifier of the remote volume.

        :param remote_vol_ref: The remote_vol_ref of this RemoteVolume.
        :type: str
        """
        self._remote_vol_ref = remote_vol_ref

    @property
    def manager(self):
        """
        Gets the manager of this RemoteVolume.
        The controller that owns the remote volume.

        :return: The manager of this RemoteVolume.
        :rtype: str
        :required/optional: required
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this RemoteVolume.
        The controller that owns the remote volume.

        :param manager: The manager of this RemoteVolume.
        :type: str
        """
        self._manager = manager

    @property
    def remote_array_id(self):
        """
        Gets the remote_array_id of this RemoteVolume.
        The identifier of the remote array.

        :return: The remote_array_id of this RemoteVolume.
        :rtype: SAIdentifier
        :required/optional: required
        """
        return self._remote_array_id

    @remote_array_id.setter
    def remote_array_id(self, remote_array_id):
        """
        Sets the remote_array_id of this RemoteVolume.
        The identifier of the remote array.

        :param remote_array_id: The remote_array_id of this RemoteVolume.
        :type: SAIdentifier
        """
        self._remote_array_id = remote_array_id

    @property
    def remote_node_wwn(self):
        """
        Gets the remote_node_wwn of this RemoteVolume.
        This field is deprecated. It will continue to be supported if remoteNodeName is NULL (IOInterfaceType == IO_IF_NOT_IMPLEMENTED). This will allow continued compatibility with clients still using this field.

        :return: The remote_node_wwn of this RemoteVolume.
        :rtype: str
        :required/optional: required
        """
        return self._remote_node_wwn

    @remote_node_wwn.setter
    def remote_node_wwn(self, remote_node_wwn):
        """
        Sets the remote_node_wwn of this RemoteVolume.
        This field is deprecated. It will continue to be supported if remoteNodeName is NULL (IOInterfaceType == IO_IF_NOT_IMPLEMENTED). This will allow continued compatibility with clients still using this field.

        :param remote_node_wwn: The remote_node_wwn of this RemoteVolume.
        :type: str
        """
        self._remote_node_wwn = remote_node_wwn

    @property
    def remote_vol_wwn(self):
        """
        Gets the remote_vol_wwn of this RemoteVolume.
        The WWN of the volume on the remote array.

        :return: The remote_vol_wwn of this RemoteVolume.
        :rtype: str
        :required/optional: required
        """
        return self._remote_vol_wwn

    @remote_vol_wwn.setter
    def remote_vol_wwn(self, remote_vol_wwn):
        """
        Sets the remote_vol_wwn of this RemoteVolume.
        The WWN of the volume on the remote array.

        :param remote_vol_wwn: The remote_vol_wwn of this RemoteVolume.
        :type: str
        """
        self._remote_vol_wwn = remote_vol_wwn

    @property
    def remote_vol_user_label(self):
        """
        Gets the remote_vol_user_label of this RemoteVolume.
        The user assigned label of the remote volume.

        :return: The remote_vol_user_label of this RemoteVolume.
        :rtype: str
        :required/optional: required
        """
        return self._remote_vol_user_label

    @remote_vol_user_label.setter
    def remote_vol_user_label(self, remote_vol_user_label):
        """
        Sets the remote_vol_user_label of this RemoteVolume.
        The user assigned label of the remote volume.

        :param remote_vol_user_label: The remote_vol_user_label of this RemoteVolume.
        :type: str
        """
        self._remote_vol_user_label = remote_vol_user_label

    @property
    def remote_vol_state(self):
        """
        Gets the remote_vol_state of this RemoteVolume.
        The state of the current remote volume.

        :return: The remote_vol_state of this RemoteVolume.
        :rtype: str
        :required/optional: required
        """
        return self._remote_vol_state

    @remote_vol_state.setter
    def remote_vol_state(self, remote_vol_state):
        """
        Sets the remote_vol_state of this RemoteVolume.
        The state of the current remote volume.

        :param remote_vol_state: The remote_vol_state of this RemoteVolume.
        :type: str
        """
        allowed_values = ["optimal", "noLun", "noArray", "noFabric", "initializing", "wwnChangeFailed", "__UNDEFINED"]
        if remote_vol_state not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_vol_state`, must be one of {0}"
                .format(allowed_values)
            )
        self._remote_vol_state = remote_vol_state

    @property
    def remote_vol_capacity(self):
        """
        Gets the remote_vol_capacity of this RemoteVolume.
        The actual capacity of the volume on the remote array.

        :return: The remote_vol_capacity of this RemoteVolume.
        :rtype: int
        :required/optional: required
        """
        return self._remote_vol_capacity

    @remote_vol_capacity.setter
    def remote_vol_capacity(self, remote_vol_capacity):
        """
        Sets the remote_vol_capacity of this RemoteVolume.
        The actual capacity of the volume on the remote array.

        :param remote_vol_capacity: The remote_vol_capacity of this RemoteVolume.
        :type: int
        """
        self._remote_vol_capacity = remote_vol_capacity

    @property
    def volume_handle(self):
        """
        Gets the volume_handle of this RemoteVolume.
        The SSID of the remote volume.

        :return: The volume_handle of this RemoteVolume.
        :rtype: int
        :required/optional: required
        """
        return self._volume_handle

    @volume_handle.setter
    def volume_handle(self, volume_handle):
        """
        Sets the volume_handle of this RemoteVolume.
        The SSID of the remote volume.

        :param volume_handle: The volume_handle of this RemoteVolume.
        :type: int
        """
        self._volume_handle = volume_handle

    @property
    def perms(self):
        """
        Gets the perms of this RemoteVolume.
        The permissions of the volume.

        :return: The perms of this RemoteVolume.
        :rtype: VolumePerms
        :required/optional: required
        """
        return self._perms

    @perms.setter
    def perms(self, perms):
        """
        Sets the perms of this RemoteVolume.
        The permissions of the volume.

        :param perms: The perms of this RemoteVolume.
        :type: VolumePerms
        """
        self._perms = perms

    @property
    def reserved1(self):
        """
        Gets the reserved1 of this RemoteVolume.


        :return: The reserved1 of this RemoteVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved1

    @reserved1.setter
    def reserved1(self, reserved1):
        """
        Sets the reserved1 of this RemoteVolume.


        :param reserved1: The reserved1 of this RemoteVolume.
        :type: str
        """
        self._reserved1 = reserved1

    @property
    def reserved2(self):
        """
        Gets the reserved2 of this RemoteVolume.


        :return: The reserved2 of this RemoteVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved2

    @reserved2.setter
    def reserved2(self, reserved2):
        """
        Sets the reserved2 of this RemoteVolume.


        :param reserved2: The reserved2 of this RemoteVolume.
        :type: str
        """
        self._reserved2 = reserved2

    @property
    def remote_node_name(self):
        """
        Gets the remote_node_name of this RemoteVolume.
        The name of the RemoteVolume.

        :return: The remote_node_name of this RemoteVolume.
        :rtype: ScsiNodeName
        :required/optional: required
        """
        return self._remote_node_name

    @remote_node_name.setter
    def remote_node_name(self, remote_node_name):
        """
        Sets the remote_node_name of this RemoteVolume.
        The name of the RemoteVolume.

        :param remote_node_name: The remote_node_name of this RemoteVolume.
        :type: ScsiNodeName
        """
        self._remote_node_name = remote_node_name

    @property
    def remote_vol_security_type(self):
        """
        Gets the remote_vol_security_type of this RemoteVolume.
        The security type of the volume on the remote array. Note this may be SECURITY_TYPE_UNKNOWN if connection to remote array is down.

        :return: The remote_vol_security_type of this RemoteVolume.
        :rtype: str
        :required/optional: required
        """
        return self._remote_vol_security_type

    @remote_vol_security_type.setter
    def remote_vol_security_type(self, remote_vol_security_type):
        """
        Sets the remote_vol_security_type of this RemoteVolume.
        The security type of the volume on the remote array. Note this may be SECURITY_TYPE_UNKNOWN if connection to remote array is down.

        :param remote_vol_security_type: The remote_vol_security_type of this RemoteVolume.
        :type: str
        """
        allowed_values = ["unknown", "none", "capable", "enabled", "__UNDEFINED"]
        if remote_vol_security_type not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_vol_security_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._remote_vol_security_type = remote_vol_security_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

