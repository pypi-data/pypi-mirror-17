# coding: utf-8

"""
ObjectReference.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class ObjectReference(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ObjectReference - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ref_type': 'str',  # (required parameter)
            'controller_ref': 'str',  
            'symbol_ref': 'str',  
            'typed_reference': 'TypedSYMbolReference'
        }

        self.attribute_map = {
            'ref_type': 'refType',  # (required parameter)
            'controller_ref': 'controllerRef',  
            'symbol_ref': 'symbolRef',  
            'typed_reference': 'typedReference'
        }

        self._ref_type = None
        self._controller_ref = None
        self._symbol_ref = None
        self._typed_reference = None

    @property
    def ref_type(self):
        """
        Gets the ref_type of this ObjectReference.
        This enumeration identifies the different types of object references.

        :return: The ref_type of this ObjectReference.
        :rtype: str
        :required/optional: required
        """
        return self._ref_type

    @ref_type.setter
    def ref_type(self, ref_type):
        """
        Sets the ref_type of this ObjectReference.
        This enumeration identifies the different types of object references.

        :param ref_type: The ref_type of this ObjectReference.
        :type: str
        """
        allowed_values = ["generic", "controller", "genericTyped", "__UNDEFINED"]
        if ref_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ref_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._ref_type = ref_type

    @property
    def controller_ref(self):
        """
        Gets the controller_ref of this ObjectReference.
        A ControllerRef that refers to the object. Controllers are identified separately from other SYMbol objects because their refs require special handling by the firmware. This field is only valid if refType is equal to OBJ_REF_CONTROLLER.

        :return: The controller_ref of this ObjectReference.
        :rtype: str
        :required/optional: optional
        """
        return self._controller_ref

    @controller_ref.setter
    def controller_ref(self, controller_ref):
        """
        Sets the controller_ref of this ObjectReference.
        A ControllerRef that refers to the object. Controllers are identified separately from other SYMbol objects because their refs require special handling by the firmware. This field is only valid if refType is equal to OBJ_REF_CONTROLLER.

        :param controller_ref: The controller_ref of this ObjectReference.
        :type: str
        """
        self._controller_ref = controller_ref

    @property
    def symbol_ref(self):
        """
        Gets the symbol_ref of this ObjectReference.
        A SYMbolRef that refers to the object. All non-controller objects can be identified by an untyped SYMbol reference. This field is only present if refType is equal to OBJ_REF_GENERIC.

        :return: The symbol_ref of this ObjectReference.
        :rtype: str
        :required/optional: optional
        """
        return self._symbol_ref

    @symbol_ref.setter
    def symbol_ref(self, symbol_ref):
        """
        Sets the symbol_ref of this ObjectReference.
        A SYMbolRef that refers to the object. All non-controller objects can be identified by an untyped SYMbol reference. This field is only present if refType is equal to OBJ_REF_GENERIC.

        :param symbol_ref: The symbol_ref of this ObjectReference.
        :type: str
        """
        self._symbol_ref = symbol_ref

    @property
    def typed_reference(self):
        """
        Gets the typed_reference of this ObjectReference.
        A reference to a SYMbol object that includes object type information. This value is only present if the discriminator refType is set to OBJ_REF_GENERIC_TYPED.

        :return: The typed_reference of this ObjectReference.
        :rtype: TypedSYMbolReference
        :required/optional: optional
        """
        return self._typed_reference

    @typed_reference.setter
    def typed_reference(self, typed_reference):
        """
        Sets the typed_reference of this ObjectReference.
        A reference to a SYMbol object that includes object type information. This value is only present if the discriminator refType is set to OBJ_REF_GENERIC_TYPED.

        :param typed_reference: The typed_reference of this ObjectReference.
        :type: TypedSYMbolReference
        """
        self._typed_reference = typed_reference

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

