# coding: utf-8

"""
ChannelDiagnosticDescriptor.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class ChannelDiagnosticDescriptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ChannelDiagnosticDescriptor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'controller': 'str',  # (required parameter)
            'drive_channel': 'int',  # (required parameter)
            'devices': 'list[ChannelDiagDevice]',  # (required parameter)
            'max_time_interval': 'int',  # (required parameter)
            'diag_params': 'ChannelDiagTypeParams'
        }

        self.attribute_map = {
            'controller': 'controller',  # (required parameter)
            'drive_channel': 'driveChannel',  # (required parameter)
            'devices': 'devices',  # (required parameter)
            'max_time_interval': 'maxTimeInterval',  # (required parameter)
            'diag_params': 'diagParams'
        }

        self._controller = None
        self._drive_channel = None
        self._devices = None
        self._max_time_interval = None
        self._diag_params = None

    @property
    def controller(self):
        """
        Gets the controller of this ChannelDiagnosticDescriptor.
        A reference indicating the controller that is to perform the test.

        :return: The controller of this ChannelDiagnosticDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """
        Sets the controller of this ChannelDiagnosticDescriptor.
        A reference indicating the controller that is to perform the test.

        :param controller: The controller of this ChannelDiagnosticDescriptor.
        :type: str
        """
        self._controller = controller

    @property
    def drive_channel(self):
        """
        Gets the drive_channel of this ChannelDiagnosticDescriptor.
        The number of the drive channel to test.

        :return: The drive_channel of this ChannelDiagnosticDescriptor.
        :rtype: int
        :required/optional: required
        """
        return self._drive_channel

    @drive_channel.setter
    def drive_channel(self, drive_channel):
        """
        Sets the drive_channel of this ChannelDiagnosticDescriptor.
        The number of the drive channel to test.

        :param drive_channel: The drive_channel of this ChannelDiagnosticDescriptor.
        :type: int
        """
        self._drive_channel = drive_channel

    @property
    def devices(self):
        """
        Gets the devices of this ChannelDiagnosticDescriptor.
        A variable-length array of values, each value indicating a device on the referenced channel to be included in the test. To specify \"all devices,\" all that is needed is a single instance of ChannelDiagDevice with deviceType set to CHANNEL_DEVICE_ALL.

        :return: The devices of this ChannelDiagnosticDescriptor.
        :rtype: list[ChannelDiagDevice]
        :required/optional: required
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """
        Sets the devices of this ChannelDiagnosticDescriptor.
        A variable-length array of values, each value indicating a device on the referenced channel to be included in the test. To specify \"all devices,\" all that is needed is a single instance of ChannelDiagDevice with deviceType set to CHANNEL_DEVICE_ALL.

        :param devices: The devices of this ChannelDiagnosticDescriptor.
        :type: list[ChannelDiagDevice]
        """
        self._devices = devices

    @property
    def max_time_interval(self):
        """
        Gets the max_time_interval of this ChannelDiagnosticDescriptor.
        The maximum number of seconds the test is allowed to run before it is forcibly terminated.

        :return: The max_time_interval of this ChannelDiagnosticDescriptor.
        :rtype: int
        :required/optional: required
        """
        return self._max_time_interval

    @max_time_interval.setter
    def max_time_interval(self, max_time_interval):
        """
        Sets the max_time_interval of this ChannelDiagnosticDescriptor.
        The maximum number of seconds the test is allowed to run before it is forcibly terminated.

        :param max_time_interval: The max_time_interval of this ChannelDiagnosticDescriptor.
        :type: int
        """
        self._max_time_interval = max_time_interval

    @property
    def diag_params(self):
        """
        Gets the diag_params of this ChannelDiagnosticDescriptor.
        A sub-structure indicating both the type of diagnostic test to perform and the associated test-type-dependent parameters.

        :return: The diag_params of this ChannelDiagnosticDescriptor.
        :rtype: ChannelDiagTypeParams
        :required/optional: required
        """
        return self._diag_params

    @diag_params.setter
    def diag_params(self, diag_params):
        """
        Sets the diag_params of this ChannelDiagnosticDescriptor.
        A sub-structure indicating both the type of diagnostic test to perform and the associated test-type-dependent parameters.

        :param diag_params: The diag_params of this ChannelDiagnosticDescriptor.
        :type: ChannelDiagTypeParams
        """
        self._diag_params = diag_params

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

