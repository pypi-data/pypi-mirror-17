# coding: utf-8

"""
InternetProtocolV6Data.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class InternetProtocolV6Data(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        InternetProtocolV6Data - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ipv6_local_addresses': 'list[IpV6AddressData]',  # (required parameter)
            'ipv6_routable_addresses': 'list[IpV6AddressData]',  # (required parameter)
            'ipv6_port_router_address': 'IpV6AddressData',  # (required parameter)
            'ipv6_address_config_method': 'str',  # (required parameter)
            'ipv6_outbound_packet_priority': 'SettingControl',  # (required parameter)
            'ipv6_vlan_id': 'SettingControl',  # (required parameter)
            'ipv6_hop_limit': 'int',  # (required parameter)
            'ipv6_nd_reachable_time': 'int',  # (required parameter)
            'ipv6_nd_retransmit_time': 'int',  # (required parameter)
            'ipv6_nd_stale_timeout': 'int',  # (required parameter)
            'ipv6_duplicate_address_detection_attempts': 'int'
        }

        self.attribute_map = {
            'ipv6_local_addresses': 'ipv6LocalAddresses',  # (required parameter)
            'ipv6_routable_addresses': 'ipv6RoutableAddresses',  # (required parameter)
            'ipv6_port_router_address': 'ipv6PortRouterAddress',  # (required parameter)
            'ipv6_address_config_method': 'ipv6AddressConfigMethod',  # (required parameter)
            'ipv6_outbound_packet_priority': 'ipv6OutboundPacketPriority',  # (required parameter)
            'ipv6_vlan_id': 'ipv6VlanId',  # (required parameter)
            'ipv6_hop_limit': 'ipv6HopLimit',  # (required parameter)
            'ipv6_nd_reachable_time': 'ipv6NdReachableTime',  # (required parameter)
            'ipv6_nd_retransmit_time': 'ipv6NdRetransmitTime',  # (required parameter)
            'ipv6_nd_stale_timeout': 'ipv6NdStaleTimeout',  # (required parameter)
            'ipv6_duplicate_address_detection_attempts': 'ipv6DuplicateAddressDetectionAttempts'
        }

        self._ipv6_local_addresses = None
        self._ipv6_routable_addresses = None
        self._ipv6_port_router_address = None
        self._ipv6_address_config_method = None
        self._ipv6_outbound_packet_priority = None
        self._ipv6_vlan_id = None
        self._ipv6_hop_limit = None
        self._ipv6_nd_reachable_time = None
        self._ipv6_nd_retransmit_time = None
        self._ipv6_nd_stale_timeout = None
        self._ipv6_duplicate_address_detection_attempts = None

    @property
    def ipv6_local_addresses(self):
        """
        Gets the ipv6_local_addresses of this InternetProtocolV6Data.
        The set of IPV6 local addresses that have been assigned to the iSCSI Ethernet port.

        :return: The ipv6_local_addresses of this InternetProtocolV6Data.
        :rtype: list[IpV6AddressData]
        :required/optional: required
        """
        return self._ipv6_local_addresses

    @ipv6_local_addresses.setter
    def ipv6_local_addresses(self, ipv6_local_addresses):
        """
        Sets the ipv6_local_addresses of this InternetProtocolV6Data.
        The set of IPV6 local addresses that have been assigned to the iSCSI Ethernet port.

        :param ipv6_local_addresses: The ipv6_local_addresses of this InternetProtocolV6Data.
        :type: list[IpV6AddressData]
        """
        self._ipv6_local_addresses = ipv6_local_addresses

    @property
    def ipv6_routable_addresses(self):
        """
        Gets the ipv6_routable_addresses of this InternetProtocolV6Data.
        The set of IPV6 routable addresses that have been assigned to the iSCSI Ethernet port

        :return: The ipv6_routable_addresses of this InternetProtocolV6Data.
        :rtype: list[IpV6AddressData]
        :required/optional: required
        """
        return self._ipv6_routable_addresses

    @ipv6_routable_addresses.setter
    def ipv6_routable_addresses(self, ipv6_routable_addresses):
        """
        Sets the ipv6_routable_addresses of this InternetProtocolV6Data.
        The set of IPV6 routable addresses that have been assigned to the iSCSI Ethernet port

        :param ipv6_routable_addresses: The ipv6_routable_addresses of this InternetProtocolV6Data.
        :type: list[IpV6AddressData]
        """
        self._ipv6_routable_addresses = ipv6_routable_addresses

    @property
    def ipv6_port_router_address(self):
        """
        Gets the ipv6_port_router_address of this InternetProtocolV6Data.
        The IPV6 address of the port router.

        :return: The ipv6_port_router_address of this InternetProtocolV6Data.
        :rtype: IpV6AddressData
        :required/optional: required
        """
        return self._ipv6_port_router_address

    @ipv6_port_router_address.setter
    def ipv6_port_router_address(self, ipv6_port_router_address):
        """
        Sets the ipv6_port_router_address of this InternetProtocolV6Data.
        The IPV6 address of the port router.

        :param ipv6_port_router_address: The ipv6_port_router_address of this InternetProtocolV6Data.
        :type: IpV6AddressData
        """
        self._ipv6_port_router_address = ipv6_port_router_address

    @property
    def ipv6_address_config_method(self):
        """
        Gets the ipv6_address_config_method of this InternetProtocolV6Data.
        The method by which the IPV6 address information is configured for the endpoint.

        :return: The ipv6_address_config_method of this InternetProtocolV6Data.
        :rtype: str
        :required/optional: required
        """
        return self._ipv6_address_config_method

    @ipv6_address_config_method.setter
    def ipv6_address_config_method(self, ipv6_address_config_method):
        """
        Sets the ipv6_address_config_method of this InternetProtocolV6Data.
        The method by which the IPV6 address information is configured for the endpoint.

        :param ipv6_address_config_method: The ipv6_address_config_method of this InternetProtocolV6Data.
        :type: str
        """
        allowed_values = ["configStatic", "configStateless", "__UNDEFINED"]
        if ipv6_address_config_method not in allowed_values:
            raise ValueError(
                "Invalid value for `ipv6_address_config_method`, must be one of {0}"
                .format(allowed_values)
            )
        self._ipv6_address_config_method = ipv6_address_config_method

    @property
    def ipv6_outbound_packet_priority(self):
        """
        Gets the ipv6_outbound_packet_priority of this InternetProtocolV6Data.
        Settings that govern the priority to associate with outbound IPV6 packets sent over the interface

        :return: The ipv6_outbound_packet_priority of this InternetProtocolV6Data.
        :rtype: SettingControl
        :required/optional: required
        """
        return self._ipv6_outbound_packet_priority

    @ipv6_outbound_packet_priority.setter
    def ipv6_outbound_packet_priority(self, ipv6_outbound_packet_priority):
        """
        Sets the ipv6_outbound_packet_priority of this InternetProtocolV6Data.
        Settings that govern the priority to associate with outbound IPV6 packets sent over the interface

        :param ipv6_outbound_packet_priority: The ipv6_outbound_packet_priority of this InternetProtocolV6Data.
        :type: SettingControl
        """
        self._ipv6_outbound_packet_priority = ipv6_outbound_packet_priority

    @property
    def ipv6_vlan_id(self):
        """
        Gets the ipv6_vlan_id of this InternetProtocolV6Data.
        Settings that govern the value of the IPV6 VLAN identifier for the interface. VLAN identifiers are in the range 1 through 4094.

        :return: The ipv6_vlan_id of this InternetProtocolV6Data.
        :rtype: SettingControl
        :required/optional: required
        """
        return self._ipv6_vlan_id

    @ipv6_vlan_id.setter
    def ipv6_vlan_id(self, ipv6_vlan_id):
        """
        Sets the ipv6_vlan_id of this InternetProtocolV6Data.
        Settings that govern the value of the IPV6 VLAN identifier for the interface. VLAN identifiers are in the range 1 through 4094.

        :param ipv6_vlan_id: The ipv6_vlan_id of this InternetProtocolV6Data.
        :type: SettingControl
        """
        self._ipv6_vlan_id = ipv6_vlan_id

    @property
    def ipv6_hop_limit(self):
        """
        Gets the ipv6_hop_limit of this InternetProtocolV6Data.
        The hop limit to use in IPV6 packets sent over the interface.

        :return: The ipv6_hop_limit of this InternetProtocolV6Data.
        :rtype: int
        :required/optional: required
        """
        return self._ipv6_hop_limit

    @ipv6_hop_limit.setter
    def ipv6_hop_limit(self, ipv6_hop_limit):
        """
        Sets the ipv6_hop_limit of this InternetProtocolV6Data.
        The hop limit to use in IPV6 packets sent over the interface.

        :param ipv6_hop_limit: The ipv6_hop_limit of this InternetProtocolV6Data.
        :type: int
        """
        self._ipv6_hop_limit = ipv6_hop_limit

    @property
    def ipv6_nd_reachable_time(self):
        """
        Gets the ipv6_nd_reachable_time of this InternetProtocolV6Data.
        A \"neighbor discovery\" parameter - the amount of time in milliseconds, within which a neighbor is assumed to be reachable.

        :return: The ipv6_nd_reachable_time of this InternetProtocolV6Data.
        :rtype: int
        :required/optional: required
        """
        return self._ipv6_nd_reachable_time

    @ipv6_nd_reachable_time.setter
    def ipv6_nd_reachable_time(self, ipv6_nd_reachable_time):
        """
        Sets the ipv6_nd_reachable_time of this InternetProtocolV6Data.
        A \"neighbor discovery\" parameter - the amount of time in milliseconds, within which a neighbor is assumed to be reachable.

        :param ipv6_nd_reachable_time: The ipv6_nd_reachable_time of this InternetProtocolV6Data.
        :type: int
        """
        self._ipv6_nd_reachable_time = ipv6_nd_reachable_time

    @property
    def ipv6_nd_retransmit_time(self):
        """
        Gets the ipv6_nd_retransmit_time of this InternetProtocolV6Data.
        A \"neighbor discovery\" parameter - the number of milliseconds between neighbor solicitation probes.

        :return: The ipv6_nd_retransmit_time of this InternetProtocolV6Data.
        :rtype: int
        :required/optional: required
        """
        return self._ipv6_nd_retransmit_time

    @ipv6_nd_retransmit_time.setter
    def ipv6_nd_retransmit_time(self, ipv6_nd_retransmit_time):
        """
        Sets the ipv6_nd_retransmit_time of this InternetProtocolV6Data.
        A \"neighbor discovery\" parameter - the number of milliseconds between neighbor solicitation probes.

        :param ipv6_nd_retransmit_time: The ipv6_nd_retransmit_time of this InternetProtocolV6Data.
        :type: int
        """
        self._ipv6_nd_retransmit_time = ipv6_nd_retransmit_time

    @property
    def ipv6_nd_stale_timeout(self):
        """
        Gets the ipv6_nd_stale_timeout of this InternetProtocolV6Data.
        A \"neighbor discovery\" parameter - the time in milliseconds after which information for a neighbor that cannot be verified as reachable will be considered \"stale.\"

        :return: The ipv6_nd_stale_timeout of this InternetProtocolV6Data.
        :rtype: int
        :required/optional: required
        """
        return self._ipv6_nd_stale_timeout

    @ipv6_nd_stale_timeout.setter
    def ipv6_nd_stale_timeout(self, ipv6_nd_stale_timeout):
        """
        Sets the ipv6_nd_stale_timeout of this InternetProtocolV6Data.
        A \"neighbor discovery\" parameter - the time in milliseconds after which information for a neighbor that cannot be verified as reachable will be considered \"stale.\"

        :param ipv6_nd_stale_timeout: The ipv6_nd_stale_timeout of this InternetProtocolV6Data.
        :type: int
        """
        self._ipv6_nd_stale_timeout = ipv6_nd_stale_timeout

    @property
    def ipv6_duplicate_address_detection_attempts(self):
        """
        Gets the ipv6_duplicate_address_detection_attempts of this InternetProtocolV6Data.
        The number of neighbor-solicitation messages to send in trying to determine IP address uniqueness.

        :return: The ipv6_duplicate_address_detection_attempts of this InternetProtocolV6Data.
        :rtype: int
        :required/optional: required
        """
        return self._ipv6_duplicate_address_detection_attempts

    @ipv6_duplicate_address_detection_attempts.setter
    def ipv6_duplicate_address_detection_attempts(self, ipv6_duplicate_address_detection_attempts):
        """
        Sets the ipv6_duplicate_address_detection_attempts of this InternetProtocolV6Data.
        The number of neighbor-solicitation messages to send in trying to determine IP address uniqueness.

        :param ipv6_duplicate_address_detection_attempts: The ipv6_duplicate_address_detection_attempts of this InternetProtocolV6Data.
        :type: int
        """
        self._ipv6_duplicate_address_detection_attempts = ipv6_duplicate_address_detection_attempts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

