# coding: utf-8

"""
MetadataVolume.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class MetadataVolume(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MetadataVolume - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'metadata_vol_ref': 'str',  # (required parameter)
            'metadata_vol_type': 'str',  # (required parameter)
            'associated_volume': 'str',  # (required parameter)
            'preferred_manager': 'str',  # (required parameter)
            'perms': 'VolumePerms',  # (required parameter)
            'offline': 'bool',  # (required parameter)
            'reserved1': 'str'
        }

        self.attribute_map = {
            'metadata_vol_ref': 'metadataVolRef',  # (required parameter)
            'metadata_vol_type': 'metadataVolType',  # (required parameter)
            'associated_volume': 'associatedVolume',  # (required parameter)
            'preferred_manager': 'preferredManager',  # (required parameter)
            'perms': 'perms',  # (required parameter)
            'offline': 'offline',  # (required parameter)
            'reserved1': 'reserved1'
        }

        self._metadata_vol_ref = None
        self._metadata_vol_type = None
        self._associated_volume = None
        self._preferred_manager = None
        self._perms = None
        self._offline = None
        self._reserved1 = None

    @property
    def metadata_vol_ref(self):
        """
        Gets the metadata_vol_ref of this MetadataVolume.
        This object identifies the metadata volume.

        :return: The metadata_vol_ref of this MetadataVolume.
        :rtype: str
        :required/optional: required
        """
        return self._metadata_vol_ref

    @metadata_vol_ref.setter
    def metadata_vol_ref(self, metadata_vol_ref):
        """
        Sets the metadata_vol_ref of this MetadataVolume.
        This object identifies the metadata volume.

        :param metadata_vol_ref: The metadata_vol_ref of this MetadataVolume.
        :type: str
        """
        self._metadata_vol_ref = metadata_vol_ref

    @property
    def metadata_vol_type(self):
        """
        Gets the metadata_vol_type of this MetadataVolume.
        This object specifies the metadata volume type.

        :return: The metadata_vol_type of this MetadataVolume.
        :rtype: str
        :required/optional: required
        """
        return self._metadata_vol_type

    @metadata_vol_type.setter
    def metadata_vol_type(self, metadata_vol_type):
        """
        Sets the metadata_vol_type of this MetadataVolume.
        This object specifies the metadata volume type.

        :param metadata_vol_type: The metadata_vol_type of this MetadataVolume.
        :type: str
        """
        allowed_values = ["allMdatTypes", "remoteMirror", "__UNDEFINED"]
        if metadata_vol_type not in allowed_values:
            raise ValueError(
                "Invalid value for `metadata_vol_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._metadata_vol_type = metadata_vol_type

    @property
    def associated_volume(self):
        """
        Gets the associated_volume of this MetadataVolume.
        Volume that contains data

        :return: The associated_volume of this MetadataVolume.
        :rtype: str
        :required/optional: required
        """
        return self._associated_volume

    @associated_volume.setter
    def associated_volume(self, associated_volume):
        """
        Sets the associated_volume of this MetadataVolume.
        Volume that contains data

        :param associated_volume: The associated_volume of this MetadataVolume.
        :type: str
        """
        self._associated_volume = associated_volume

    @property
    def preferred_manager(self):
        """
        Gets the preferred_manager of this MetadataVolume.
        The controller that created the metadata volume.

        :return: The preferred_manager of this MetadataVolume.
        :rtype: str
        :required/optional: required
        """
        return self._preferred_manager

    @preferred_manager.setter
    def preferred_manager(self, preferred_manager):
        """
        Sets the preferred_manager of this MetadataVolume.
        The controller that created the metadata volume.

        :param preferred_manager: The preferred_manager of this MetadataVolume.
        :type: str
        """
        self._preferred_manager = preferred_manager

    @property
    def perms(self):
        """
        Gets the perms of this MetadataVolume.
        The permissions allowed.

        :return: The perms of this MetadataVolume.
        :rtype: VolumePerms
        :required/optional: required
        """
        return self._perms

    @perms.setter
    def perms(self, perms):
        """
        Sets the perms of this MetadataVolume.
        The permissions allowed.

        :param perms: The perms of this MetadataVolume.
        :type: VolumePerms
        """
        self._perms = perms

    @property
    def offline(self):
        """
        Gets the offline of this MetadataVolume.
        True, if the volume is offline.

        :return: The offline of this MetadataVolume.
        :rtype: bool
        :required/optional: required
        """
        return self._offline

    @offline.setter
    def offline(self, offline):
        """
        Sets the offline of this MetadataVolume.
        True, if the volume is offline.

        :param offline: The offline of this MetadataVolume.
        :type: bool
        """
        self._offline = offline

    @property
    def reserved1(self):
        """
        Gets the reserved1 of this MetadataVolume.


        :return: The reserved1 of this MetadataVolume.
        :rtype: str
        :required/optional: optional
        """
        return self._reserved1

    @reserved1.setter
    def reserved1(self, reserved1):
        """
        Sets the reserved1 of this MetadataVolume.


        :param reserved1: The reserved1 of this MetadataVolume.
        :type: str
        """
        self._reserved1 = reserved1

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

