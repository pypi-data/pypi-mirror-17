# coding: utf-8

"""
DriveChannelStatistics.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DriveChannelStatistics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DriveChannelStatistics - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'start_time_stamp': 'int',  # (required parameter)
            'end_time_stamp': 'int',  # (required parameter)
            'total_io_count': 'int',  # (required parameter)
            'total_io_error_count': 'int',  # (required parameter)
            'link_status': 'str',  # (required parameter)
            'error_counts': 'DriveChannelErrorCounts'
        }

        self.attribute_map = {
            'start_time_stamp': 'startTimeStamp',  # (required parameter)
            'end_time_stamp': 'endTimeStamp',  # (required parameter)
            'total_io_count': 'totalIoCount',  # (required parameter)
            'total_io_error_count': 'totalIoErrorCount',  # (required parameter)
            'link_status': 'linkStatus',  # (required parameter)
            'error_counts': 'errorCounts'
        }

        self._start_time_stamp = None
        self._end_time_stamp = None
        self._total_io_count = None
        self._total_io_error_count = None
        self._link_status = None
        self._error_counts = None

    @property
    def start_time_stamp(self):
        """
        Gets the start_time_stamp of this DriveChannelStatistics.
        The time stamp of when the error tracking began.

        :return: The start_time_stamp of this DriveChannelStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._start_time_stamp

    @start_time_stamp.setter
    def start_time_stamp(self, start_time_stamp):
        """
        Sets the start_time_stamp of this DriveChannelStatistics.
        The time stamp of when the error tracking began.

        :param start_time_stamp: The start_time_stamp of this DriveChannelStatistics.
        :type: int
        """
        self._start_time_stamp = start_time_stamp

    @property
    def end_time_stamp(self):
        """
        Gets the end_time_stamp of this DriveChannelStatistics.
        The time stamp of when the error tracking ended.

        :return: The end_time_stamp of this DriveChannelStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._end_time_stamp

    @end_time_stamp.setter
    def end_time_stamp(self, end_time_stamp):
        """
        Sets the end_time_stamp of this DriveChannelStatistics.
        The time stamp of when the error tracking ended.

        :param end_time_stamp: The end_time_stamp of this DriveChannelStatistics.
        :type: int
        """
        self._end_time_stamp = end_time_stamp

    @property
    def total_io_count(self):
        """
        Gets the total_io_count of this DriveChannelStatistics.
        The total number of I/Os.

        :return: The total_io_count of this DriveChannelStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._total_io_count

    @total_io_count.setter
    def total_io_count(self, total_io_count):
        """
        Sets the total_io_count of this DriveChannelStatistics.
        The total number of I/Os.

        :param total_io_count: The total_io_count of this DriveChannelStatistics.
        :type: int
        """
        self._total_io_count = total_io_count

    @property
    def total_io_error_count(self):
        """
        Gets the total_io_error_count of this DriveChannelStatistics.
        The total number of I/O errors.

        :return: The total_io_error_count of this DriveChannelStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._total_io_error_count

    @total_io_error_count.setter
    def total_io_error_count(self, total_io_error_count):
        """
        Sets the total_io_error_count of this DriveChannelStatistics.
        The total number of I/O errors.

        :param total_io_error_count: The total_io_error_count of this DriveChannelStatistics.
        :type: int
        """
        self._total_io_error_count = total_io_error_count

    @property
    def link_status(self):
        """
        Gets the link_status of this DriveChannelStatistics.
        The status of the link - up, down, failed

        :return: The link_status of this DriveChannelStatistics.
        :rtype: str
        :required/optional: required
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """
        Sets the link_status of this DriveChannelStatistics.
        The status of the link - up, down, failed

        :param link_status: The link_status of this DriveChannelStatistics.
        :type: str
        """
        allowed_values = ["none", "up", "down", "failed", "__UNDEFINED"]
        if link_status not in allowed_values:
            raise ValueError(
                "Invalid value for `link_status`, must be one of {0}"
                .format(allowed_values)
            )
        self._link_status = link_status

    @property
    def error_counts(self):
        """
        Gets the error_counts of this DriveChannelStatistics.
        The error category counts.

        :return: The error_counts of this DriveChannelStatistics.
        :rtype: DriveChannelErrorCounts
        :required/optional: required
        """
        return self._error_counts

    @error_counts.setter
    def error_counts(self, error_counts):
        """
        Sets the error_counts of this DriveChannelStatistics.
        The error category counts.

        :param error_counts: The error_counts of this DriveChannelStatistics.
        :type: DriveChannelErrorCounts
        """
        self._error_counts = error_counts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

