# coding: utf-8

"""
DiskPoolDefaultAttributes.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DiskPoolDefaultAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DiskPoolDefaultAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'pool_utilization_warning_threshold': 'int',  # (required parameter)
            'pool_utilization_critical_threshold': 'int',  # (required parameter)
            'degraded_reconstruct_priority': 'str',  # (required parameter)
            'critical_reconstruct_priority': 'str',  # (required parameter)
            'background_operation_priority': 'str',  # (required parameter)
            'max_volume_size_in_megabytes': 'int',  # (required parameter)
            'max_dce_drive_count': 'int',  # (required parameter)
            'repos_granularity': 'int',  # (required parameter)
            'max_total_disk_pool_support_in_megabytes': 'int',  # (required parameter)
            'max_volume_synchronous_creation_in_megabytes': 'int'
        }

        self.attribute_map = {
            'pool_utilization_warning_threshold': 'poolUtilizationWarningThreshold',  # (required parameter)
            'pool_utilization_critical_threshold': 'poolUtilizationCriticalThreshold',  # (required parameter)
            'degraded_reconstruct_priority': 'degradedReconstructPriority',  # (required parameter)
            'critical_reconstruct_priority': 'criticalReconstructPriority',  # (required parameter)
            'background_operation_priority': 'backgroundOperationPriority',  # (required parameter)
            'max_volume_size_in_megabytes': 'maxVolumeSizeInMegabytes',  # (required parameter)
            'max_dce_drive_count': 'maxDCEDriveCount',  # (required parameter)
            'repos_granularity': 'reposGranularity',  # (required parameter)
            'max_total_disk_pool_support_in_megabytes': 'maxTotalDiskPoolSupportInMegabytes',  # (required parameter)
            'max_volume_synchronous_creation_in_megabytes': 'maxVolumeSynchronousCreationInMegabytes'
        }

        self._pool_utilization_warning_threshold = None
        self._pool_utilization_critical_threshold = None
        self._degraded_reconstruct_priority = None
        self._critical_reconstruct_priority = None
        self._background_operation_priority = None
        self._max_volume_size_in_megabytes = None
        self._max_dce_drive_count = None
        self._repos_granularity = None
        self._max_total_disk_pool_support_in_megabytes = None
        self._max_volume_synchronous_creation_in_megabytes = None

    @property
    def pool_utilization_warning_threshold(self):
        """
        Gets the pool_utilization_warning_threshold of this DiskPoolDefaultAttributes.
        The pool utilization warning threshold as a percentage of the total user configurable capacity. A MEL event is generated when the configured capacity exceeds the specified level of the configurable capacity.

        :return: The pool_utilization_warning_threshold of this DiskPoolDefaultAttributes.
        :rtype: int
        :required/optional: required
        """
        return self._pool_utilization_warning_threshold

    @pool_utilization_warning_threshold.setter
    def pool_utilization_warning_threshold(self, pool_utilization_warning_threshold):
        """
        Sets the pool_utilization_warning_threshold of this DiskPoolDefaultAttributes.
        The pool utilization warning threshold as a percentage of the total user configurable capacity. A MEL event is generated when the configured capacity exceeds the specified level of the configurable capacity.

        :param pool_utilization_warning_threshold: The pool_utilization_warning_threshold of this DiskPoolDefaultAttributes.
        :type: int
        """
        self._pool_utilization_warning_threshold = pool_utilization_warning_threshold

    @property
    def pool_utilization_critical_threshold(self):
        """
        Gets the pool_utilization_critical_threshold of this DiskPoolDefaultAttributes.
        The pool utilization critical threshold as a percentage of the total user configurable capacity. A MEL event is generated when the configured capacity exceeds the specified level of the configurable capacity.

        :return: The pool_utilization_critical_threshold of this DiskPoolDefaultAttributes.
        :rtype: int
        :required/optional: required
        """
        return self._pool_utilization_critical_threshold

    @pool_utilization_critical_threshold.setter
    def pool_utilization_critical_threshold(self, pool_utilization_critical_threshold):
        """
        Sets the pool_utilization_critical_threshold of this DiskPoolDefaultAttributes.
        The pool utilization critical threshold as a percentage of the total user configurable capacity. A MEL event is generated when the configured capacity exceeds the specified level of the configurable capacity.

        :param pool_utilization_critical_threshold: The pool_utilization_critical_threshold of this DiskPoolDefaultAttributes.
        :type: int
        """
        self._pool_utilization_critical_threshold = pool_utilization_critical_threshold

    @property
    def degraded_reconstruct_priority(self):
        """
        Gets the degraded_reconstruct_priority of this DiskPoolDefaultAttributes.
        One failed drive degraded reconstruction priority.

        :return: The degraded_reconstruct_priority of this DiskPoolDefaultAttributes.
        :rtype: str
        :required/optional: required
        """
        return self._degraded_reconstruct_priority

    @degraded_reconstruct_priority.setter
    def degraded_reconstruct_priority(self, degraded_reconstruct_priority):
        """
        Sets the degraded_reconstruct_priority of this DiskPoolDefaultAttributes.
        One failed drive degraded reconstruction priority.

        :param degraded_reconstruct_priority: The degraded_reconstruct_priority of this DiskPoolDefaultAttributes.
        :type: str
        """
        allowed_values = ["invalid", "lowest", "low", "medium", "high", "highest", "useDefault", "__UNDEFINED"]
        if degraded_reconstruct_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `degraded_reconstruct_priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._degraded_reconstruct_priority = degraded_reconstruct_priority

    @property
    def critical_reconstruct_priority(self):
        """
        Gets the critical_reconstruct_priority of this DiskPoolDefaultAttributes.
        Two failed drive reconstruction critical priority.

        :return: The critical_reconstruct_priority of this DiskPoolDefaultAttributes.
        :rtype: str
        :required/optional: required
        """
        return self._critical_reconstruct_priority

    @critical_reconstruct_priority.setter
    def critical_reconstruct_priority(self, critical_reconstruct_priority):
        """
        Sets the critical_reconstruct_priority of this DiskPoolDefaultAttributes.
        Two failed drive reconstruction critical priority.

        :param critical_reconstruct_priority: The critical_reconstruct_priority of this DiskPoolDefaultAttributes.
        :type: str
        """
        allowed_values = ["invalid", "lowest", "low", "medium", "high", "highest", "useDefault", "__UNDEFINED"]
        if critical_reconstruct_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `critical_reconstruct_priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._critical_reconstruct_priority = critical_reconstruct_priority

    @property
    def background_operation_priority(self):
        """
        Gets the background_operation_priority of this DiskPoolDefaultAttributes.
        Priority of other background operations (DVE,DCE,DCR, and IAF).

        :return: The background_operation_priority of this DiskPoolDefaultAttributes.
        :rtype: str
        :required/optional: required
        """
        return self._background_operation_priority

    @background_operation_priority.setter
    def background_operation_priority(self, background_operation_priority):
        """
        Sets the background_operation_priority of this DiskPoolDefaultAttributes.
        Priority of other background operations (DVE,DCE,DCR, and IAF).

        :param background_operation_priority: The background_operation_priority of this DiskPoolDefaultAttributes.
        :type: str
        """
        allowed_values = ["invalid", "lowest", "low", "medium", "high", "highest", "useDefault", "__UNDEFINED"]
        if background_operation_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `background_operation_priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._background_operation_priority = background_operation_priority

    @property
    def max_volume_size_in_megabytes(self):
        """
        Gets the max_volume_size_in_megabytes of this DiskPoolDefaultAttributes.
        The maximum volume size (in megabytes) for disk pools.

        :return: The max_volume_size_in_megabytes of this DiskPoolDefaultAttributes.
        :rtype: int
        :required/optional: required
        """
        return self._max_volume_size_in_megabytes

    @max_volume_size_in_megabytes.setter
    def max_volume_size_in_megabytes(self, max_volume_size_in_megabytes):
        """
        Sets the max_volume_size_in_megabytes of this DiskPoolDefaultAttributes.
        The maximum volume size (in megabytes) for disk pools.

        :param max_volume_size_in_megabytes: The max_volume_size_in_megabytes of this DiskPoolDefaultAttributes.
        :type: int
        """
        self._max_volume_size_in_megabytes = max_volume_size_in_megabytes

    @property
    def max_dce_drive_count(self):
        """
        Gets the max_dce_drive_count of this DiskPoolDefaultAttributes.
        The maximum number of drives that can be used for Dynamic Capacity Expansion (DCE).

        :return: The max_dce_drive_count of this DiskPoolDefaultAttributes.
        :rtype: int
        :required/optional: required
        """
        return self._max_dce_drive_count

    @max_dce_drive_count.setter
    def max_dce_drive_count(self, max_dce_drive_count):
        """
        Sets the max_dce_drive_count of this DiskPoolDefaultAttributes.
        The maximum number of drives that can be used for Dynamic Capacity Expansion (DCE).

        :param max_dce_drive_count: The max_dce_drive_count of this DiskPoolDefaultAttributes.
        :type: int
        """
        self._max_dce_drive_count = max_dce_drive_count

    @property
    def repos_granularity(self):
        """
        Gets the repos_granularity of this DiskPoolDefaultAttributes.
        The granularity (in bytes) of the volume capacity values that are allowed for any repository member volume allocated from disk pools.

        :return: The repos_granularity of this DiskPoolDefaultAttributes.
        :rtype: int
        :required/optional: required
        """
        return self._repos_granularity

    @repos_granularity.setter
    def repos_granularity(self, repos_granularity):
        """
        Sets the repos_granularity of this DiskPoolDefaultAttributes.
        The granularity (in bytes) of the volume capacity values that are allowed for any repository member volume allocated from disk pools.

        :param repos_granularity: The repos_granularity of this DiskPoolDefaultAttributes.
        :type: int
        """
        self._repos_granularity = repos_granularity

    @property
    def max_total_disk_pool_support_in_megabytes(self):
        """
        Gets the max_total_disk_pool_support_in_megabytes of this DiskPoolDefaultAttributes.
        The maximum total size for all disk pools.

        :return: The max_total_disk_pool_support_in_megabytes of this DiskPoolDefaultAttributes.
        :rtype: int
        :required/optional: required
        """
        return self._max_total_disk_pool_support_in_megabytes

    @max_total_disk_pool_support_in_megabytes.setter
    def max_total_disk_pool_support_in_megabytes(self, max_total_disk_pool_support_in_megabytes):
        """
        Sets the max_total_disk_pool_support_in_megabytes of this DiskPoolDefaultAttributes.
        The maximum total size for all disk pools.

        :param max_total_disk_pool_support_in_megabytes: The max_total_disk_pool_support_in_megabytes of this DiskPoolDefaultAttributes.
        :type: int
        """
        self._max_total_disk_pool_support_in_megabytes = max_total_disk_pool_support_in_megabytes

    @property
    def max_volume_synchronous_creation_in_megabytes(self):
        """
        Gets the max_volume_synchronous_creation_in_megabytes of this DiskPoolDefaultAttributes.
        Volumes with a capacity this size or smaller are created synchronously (i.e. the volume definition is complete when the SYMbol command completes). Larger volumes are completed as a background operation. The state of the volume after the SYMbol command completes is \"creating\" until the background operation completes.

        :return: The max_volume_synchronous_creation_in_megabytes of this DiskPoolDefaultAttributes.
        :rtype: int
        :required/optional: required
        """
        return self._max_volume_synchronous_creation_in_megabytes

    @max_volume_synchronous_creation_in_megabytes.setter
    def max_volume_synchronous_creation_in_megabytes(self, max_volume_synchronous_creation_in_megabytes):
        """
        Sets the max_volume_synchronous_creation_in_megabytes of this DiskPoolDefaultAttributes.
        Volumes with a capacity this size or smaller are created synchronously (i.e. the volume definition is complete when the SYMbol command completes). Larger volumes are completed as a background operation. The state of the volume after the SYMbol command completes is \"creating\" until the background operation completes.

        :param max_volume_synchronous_creation_in_megabytes: The max_volume_synchronous_creation_in_megabytes of this DiskPoolDefaultAttributes.
        :type: int
        """
        self._max_volume_synchronous_creation_in_megabytes = max_volume_synchronous_creation_in_megabytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

