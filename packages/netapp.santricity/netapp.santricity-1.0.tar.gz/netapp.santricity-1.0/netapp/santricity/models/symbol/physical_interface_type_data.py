# coding: utf-8

"""
PhysicalInterfaceTypeData.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class PhysicalInterfaceTypeData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PhysicalInterfaceTypeData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',  # (required parameter)
            'ethernet_data': 'EthernetInterfaceData',  
            'infiniband_data': 'InfinibandInterfaceData'
        }

        self.attribute_map = {
            'type': 'type',  # (required parameter)
            'ethernet_data': 'ethernetData',  
            'infiniband_data': 'infinibandData'
        }

        self._type = None
        self._ethernet_data = None
        self._infiniband_data = None

    @property
    def type(self):
        """
        Gets the type of this PhysicalInterfaceTypeData.
        This enumeration object is used to indicate the physical type of an I/O interface, in contrast to the logical protocol used by the interface (iSCSI is a logical protocol; Ethernet is a physical interface).

        :return: The type of this PhysicalInterfaceTypeData.
        :rtype: str
        :required/optional: required
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PhysicalInterfaceTypeData.
        This enumeration object is used to indicate the physical type of an I/O interface, in contrast to the logical protocol used by the interface (iSCSI is a logical protocol; Ethernet is a physical interface).

        :param type: The type of this PhysicalInterfaceTypeData.
        :type: str
        """
        allowed_values = ["unknown", "ethernet", "infiniband", "__UNDEFINED"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def ethernet_data(self):
        """
        Gets the ethernet_data of this PhysicalInterfaceTypeData.
        This field contains information about an Ethernet physical interface It is only present if the type field is equal to PHYSICAL_INTERFACE_ETHERNET.

        :return: The ethernet_data of this PhysicalInterfaceTypeData.
        :rtype: EthernetInterfaceData
        :required/optional: optional
        """
        return self._ethernet_data

    @ethernet_data.setter
    def ethernet_data(self, ethernet_data):
        """
        Sets the ethernet_data of this PhysicalInterfaceTypeData.
        This field contains information about an Ethernet physical interface It is only present if the type field is equal to PHYSICAL_INTERFACE_ETHERNET.

        :param ethernet_data: The ethernet_data of this PhysicalInterfaceTypeData.
        :type: EthernetInterfaceData
        """
        self._ethernet_data = ethernet_data

    @property
    def infiniband_data(self):
        """
        Gets the infiniband_data of this PhysicalInterfaceTypeData.
        This field indicates iSCSI/iSER interface.

        :return: The infiniband_data of this PhysicalInterfaceTypeData.
        :rtype: InfinibandInterfaceData
        :required/optional: optional
        """
        return self._infiniband_data

    @infiniband_data.setter
    def infiniband_data(self, infiniband_data):
        """
        Sets the infiniband_data of this PhysicalInterfaceTypeData.
        This field indicates iSCSI/iSER interface.

        :param infiniband_data: The infiniband_data of this PhysicalInterfaceTypeData.
        :type: InfinibandInterfaceData
        """
        self._infiniband_data = infiniband_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

