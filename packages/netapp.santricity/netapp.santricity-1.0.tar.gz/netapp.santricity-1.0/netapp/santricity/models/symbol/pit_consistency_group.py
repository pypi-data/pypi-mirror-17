# coding: utf-8

"""
PITConsistencyGroup.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class PITConsistencyGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PITConsistencyGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cg_ref': 'str',  # (required parameter)
            'label': 'str',  # (required parameter)
            'rep_full_policy': 'str',  # (required parameter)
            'full_warn_threshold': 'int',  # (required parameter)
            'auto_delete_limit': 'int',  # (required parameter)
            'rollback_priority': 'str',  # (required parameter)
            'unique_sequence_number': 'list[int]',  # (required parameter)
            'creation_pending_status': 'str',  # (required parameter)
            'name': 'str',  
            'id': 'str'
        }

        self.attribute_map = {
            'cg_ref': 'cgRef',  # (required parameter)
            'label': 'label',  # (required parameter)
            'rep_full_policy': 'repFullPolicy',  # (required parameter)
            'full_warn_threshold': 'fullWarnThreshold',  # (required parameter)
            'auto_delete_limit': 'autoDeleteLimit',  # (required parameter)
            'rollback_priority': 'rollbackPriority',  # (required parameter)
            'unique_sequence_number': 'uniqueSequenceNumber',  # (required parameter)
            'creation_pending_status': 'creationPendingStatus',  # (required parameter)
            'name': 'name',  
            'id': 'id'
        }

        self._cg_ref = None
        self._label = None
        self._rep_full_policy = None
        self._full_warn_threshold = None
        self._auto_delete_limit = None
        self._rollback_priority = None
        self._unique_sequence_number = None
        self._creation_pending_status = None
        self._name = None
        self._id = None

    @property
    def cg_ref(self):
        """
        Gets the cg_ref of this PITConsistencyGroup.
        The reference (key) for this PITConsistencyGroup.

        :return: The cg_ref of this PITConsistencyGroup.
        :rtype: str
        :required/optional: required
        """
        return self._cg_ref

    @cg_ref.setter
    def cg_ref(self, cg_ref):
        """
        Sets the cg_ref of this PITConsistencyGroup.
        The reference (key) for this PITConsistencyGroup.

        :param cg_ref: The cg_ref of this PITConsistencyGroup.
        :type: str
        """
        self._cg_ref = cg_ref

    @property
    def label(self):
        """
        Gets the label of this PITConsistencyGroup.
        The name of the Consistency Group.

        :return: The label of this PITConsistencyGroup.
        :rtype: str
        :required/optional: required
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this PITConsistencyGroup.
        The name of the Consistency Group.

        :param label: The label of this PITConsistencyGroup.
        :type: str
        """
        self._label = label

    @property
    def rep_full_policy(self):
        """
        Gets the rep_full_policy of this PITConsistencyGroup.
        The behavior on repository full condition.

        :return: The rep_full_policy of this PITConsistencyGroup.
        :rtype: str
        :required/optional: required
        """
        return self._rep_full_policy

    @rep_full_policy.setter
    def rep_full_policy(self, rep_full_policy):
        """
        Sets the rep_full_policy of this PITConsistencyGroup.
        The behavior on repository full condition.

        :param rep_full_policy: The rep_full_policy of this PITConsistencyGroup.
        :type: str
        """
        allowed_values = ["unknown", "failbasewrites", "purgepit", "__UNDEFINED"]
        if rep_full_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `rep_full_policy`, must be one of {0}"
                .format(allowed_values)
            )
        self._rep_full_policy = rep_full_policy

    @property
    def full_warn_threshold(self):
        """
        Gets the full_warn_threshold of this PITConsistencyGroup.
        The repository utilization warning threshold percentage.

        :return: The full_warn_threshold of this PITConsistencyGroup.
        :rtype: int
        :required/optional: required
        """
        return self._full_warn_threshold

    @full_warn_threshold.setter
    def full_warn_threshold(self, full_warn_threshold):
        """
        Sets the full_warn_threshold of this PITConsistencyGroup.
        The repository utilization warning threshold percentage.

        :param full_warn_threshold: The full_warn_threshold of this PITConsistencyGroup.
        :type: int
        """
        self._full_warn_threshold = full_warn_threshold

    @property
    def auto_delete_limit(self):
        """
        Gets the auto_delete_limit of this PITConsistencyGroup.
        The auto-delete indicator. If non-zero, the oldest PiT will be automatically deleted when creating a new one to keep the total number of PiTs limited to the number specified.

        :return: The auto_delete_limit of this PITConsistencyGroup.
        :rtype: int
        :required/optional: required
        """
        return self._auto_delete_limit

    @auto_delete_limit.setter
    def auto_delete_limit(self, auto_delete_limit):
        """
        Sets the auto_delete_limit of this PITConsistencyGroup.
        The auto-delete indicator. If non-zero, the oldest PiT will be automatically deleted when creating a new one to keep the total number of PiTs limited to the number specified.

        :param auto_delete_limit: The auto_delete_limit of this PITConsistencyGroup.
        :type: int
        """
        self._auto_delete_limit = auto_delete_limit

    @property
    def rollback_priority(self):
        """
        Gets the rollback_priority of this PITConsistencyGroup.
        The importance of the rollback operation.

        :return: The rollback_priority of this PITConsistencyGroup.
        :rtype: str
        :required/optional: required
        """
        return self._rollback_priority

    @rollback_priority.setter
    def rollback_priority(self, rollback_priority):
        """
        Sets the rollback_priority of this PITConsistencyGroup.
        The importance of the rollback operation.

        :param rollback_priority: The rollback_priority of this PITConsistencyGroup.
        :type: str
        """
        allowed_values = ["highest", "high", "medium", "low", "lowest", "__UNDEFINED"]
        if rollback_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `rollback_priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._rollback_priority = rollback_priority

    @property
    def unique_sequence_number(self):
        """
        Gets the unique_sequence_number of this PITConsistencyGroup.
        A list of all unique sequence numbers for all existing PiTs of members in this consistency group.

        :return: The unique_sequence_number of this PITConsistencyGroup.
        :rtype: list[int]
        :required/optional: required
        """
        return self._unique_sequence_number

    @unique_sequence_number.setter
    def unique_sequence_number(self, unique_sequence_number):
        """
        Sets the unique_sequence_number of this PITConsistencyGroup.
        A list of all unique sequence numbers for all existing PiTs of members in this consistency group.

        :param unique_sequence_number: The unique_sequence_number of this PITConsistencyGroup.
        :type: list[int]
        """
        self._unique_sequence_number = unique_sequence_number

    @property
    def creation_pending_status(self):
        """
        Gets the creation_pending_status of this PITConsistencyGroup.
        The status of Pending PiT Creation.

        :return: The creation_pending_status of this PITConsistencyGroup.
        :rtype: str
        :required/optional: required
        """
        return self._creation_pending_status

    @creation_pending_status.setter
    def creation_pending_status(self, creation_pending_status):
        """
        Sets the creation_pending_status of this PITConsistencyGroup.
        The status of Pending PiT Creation.

        :param creation_pending_status: The creation_pending_status of this PITConsistencyGroup.
        :type: str
        """
        allowed_values = ["unknown", "none", "waiting", "failed", "__UNDEFINED"]
        if creation_pending_status not in allowed_values:
            raise ValueError(
                "Invalid value for `creation_pending_status`, must be one of {0}"
                .format(allowed_values)
            )
        self._creation_pending_status = creation_pending_status

    @property
    def name(self):
        """
        Gets the name of this PITConsistencyGroup.


        :return: The name of this PITConsistencyGroup.
        :rtype: str
        :required/optional: optional
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PITConsistencyGroup.


        :param name: The name of this PITConsistencyGroup.
        :type: str
        """
        self._name = name

    @property
    def id(self):
        """
        Gets the id of this PITConsistencyGroup.


        :return: The id of this PITConsistencyGroup.
        :rtype: str
        :required/optional: optional
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PITConsistencyGroup.


        :param id: The id of this PITConsistencyGroup.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

