# coding: utf-8

"""
IoCounterGroup.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class IoCounterGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IoCounterGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'controller_ref': 'str',  # (required parameter)
            'base_time': 'int',  # (required parameter)
            'opcode_counters': 'list[OpcodeCounter]',  # (required parameter)
            'bytes_in': 'int',  # (required parameter)
            'bytes_out': 'int',  # (required parameter)
            'idle_time': 'int'
        }

        self.attribute_map = {
            'controller_ref': 'controllerRef',  # (required parameter)
            'base_time': 'baseTime',  # (required parameter)
            'opcode_counters': 'opcodeCounters',  # (required parameter)
            'bytes_in': 'bytesIn',  # (required parameter)
            'bytes_out': 'bytesOut',  # (required parameter)
            'idle_time': 'idleTime'
        }

        self._controller_ref = None
        self._base_time = None
        self._opcode_counters = None
        self._bytes_in = None
        self._bytes_out = None
        self._idle_time = None

    @property
    def controller_ref(self):
        """
        Gets the controller_ref of this IoCounterGroup.
        A reference to the controller that generated this group.

        :return: The controller_ref of this IoCounterGroup.
        :rtype: str
        :required/optional: required
        """
        return self._controller_ref

    @controller_ref.setter
    def controller_ref(self, controller_ref):
        """
        Sets the controller_ref of this IoCounterGroup.
        A reference to the controller that generated this group.

        :param controller_ref: The controller_ref of this IoCounterGroup.
        :type: str
        """
        self._controller_ref = controller_ref

    @property
    def base_time(self):
        """
        Gets the base_time of this IoCounterGroup.
        The time the counters were last reset. Time is the number of seconds since midnight, January 1, 1970.

        :return: The base_time of this IoCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._base_time

    @base_time.setter
    def base_time(self, base_time):
        """
        Sets the base_time of this IoCounterGroup.
        The time the counters were last reset. Time is the number of seconds since midnight, January 1, 1970.

        :param base_time: The base_time of this IoCounterGroup.
        :type: int
        """
        self._base_time = base_time

    @property
    def opcode_counters(self):
        """
        Gets the opcode_counters of this IoCounterGroup.
        An array of opcode counters. Each element in the array has an opcode value and an associated count of the number of times that opcode was observed.

        :return: The opcode_counters of this IoCounterGroup.
        :rtype: list[OpcodeCounter]
        :required/optional: required
        """
        return self._opcode_counters

    @opcode_counters.setter
    def opcode_counters(self, opcode_counters):
        """
        Sets the opcode_counters of this IoCounterGroup.
        An array of opcode counters. Each element in the array has an opcode value and an associated count of the number of times that opcode was observed.

        :param opcode_counters: The opcode_counters of this IoCounterGroup.
        :type: list[OpcodeCounter]
        """
        self._opcode_counters = opcode_counters

    @property
    def bytes_in(self):
        """
        Gets the bytes_in of this IoCounterGroup.
        The number of bytes transferred into controller memory.

        :return: The bytes_in of this IoCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._bytes_in

    @bytes_in.setter
    def bytes_in(self, bytes_in):
        """
        Sets the bytes_in of this IoCounterGroup.
        The number of bytes transferred into controller memory.

        :param bytes_in: The bytes_in of this IoCounterGroup.
        :type: int
        """
        self._bytes_in = bytes_in

    @property
    def bytes_out(self):
        """
        Gets the bytes_out of this IoCounterGroup.
        The number of bytes transferred out of controller memory.

        :return: The bytes_out of this IoCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._bytes_out

    @bytes_out.setter
    def bytes_out(self, bytes_out):
        """
        Sets the bytes_out of this IoCounterGroup.
        The number of bytes transferred out of controller memory.

        :param bytes_out: The bytes_out of this IoCounterGroup.
        :type: int
        """
        self._bytes_out = bytes_out

    @property
    def idle_time(self):
        """
        Gets the idle_time of this IoCounterGroup.
        The amount of time in microseconds the channel spent idle since baseTime.

        :return: The idle_time of this IoCounterGroup.
        :rtype: int
        :required/optional: required
        """
        return self._idle_time

    @idle_time.setter
    def idle_time(self, idle_time):
        """
        Sets the idle_time of this IoCounterGroup.
        The amount of time in microseconds the channel spent idle since baseTime.

        :param idle_time: The idle_time of this IoCounterGroup.
        :type: int
        """
        self._idle_time = idle_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

