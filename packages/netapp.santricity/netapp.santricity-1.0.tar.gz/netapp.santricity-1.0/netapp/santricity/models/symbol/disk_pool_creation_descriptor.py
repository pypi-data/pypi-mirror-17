# coding: utf-8

"""
DiskPoolCreationDescriptor.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class DiskPoolCreationDescriptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DiskPoolCreationDescriptor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'candidate': 'VolumeCandidate',  # (required parameter)
            'label': 'str',  # (required parameter)
            'pool_utilization_warning_threshold': 'int',  # (required parameter)
            'pool_utilization_critical_threshold': 'int',  # (required parameter)
            'degraded_reconstruct_priority': 'str',  # (required parameter)
            'critical_reconstruct_priority': 'str',  # (required parameter)
            'background_operation_priority': 'str'
        }

        self.attribute_map = {
            'candidate': 'candidate',  # (required parameter)
            'label': 'label',  # (required parameter)
            'pool_utilization_warning_threshold': 'poolUtilizationWarningThreshold',  # (required parameter)
            'pool_utilization_critical_threshold': 'poolUtilizationCriticalThreshold',  # (required parameter)
            'degraded_reconstruct_priority': 'degradedReconstructPriority',  # (required parameter)
            'critical_reconstruct_priority': 'criticalReconstructPriority',  # (required parameter)
            'background_operation_priority': 'backgroundOperationPriority'
        }

        self._candidate = None
        self._label = None
        self._pool_utilization_warning_threshold = None
        self._pool_utilization_critical_threshold = None
        self._degraded_reconstruct_priority = None
        self._critical_reconstruct_priority = None
        self._background_operation_priority = None

    @property
    def candidate(self):
        """
        Gets the candidate of this DiskPoolCreationDescriptor.
        This field must contain a Volume candidate that was returned by getVolumeCandidates.

        :return: The candidate of this DiskPoolCreationDescriptor.
        :rtype: VolumeCandidate
        :required/optional: required
        """
        return self._candidate

    @candidate.setter
    def candidate(self, candidate):
        """
        Sets the candidate of this DiskPoolCreationDescriptor.
        This field must contain a Volume candidate that was returned by getVolumeCandidates.

        :param candidate: The candidate of this DiskPoolCreationDescriptor.
        :type: VolumeCandidate
        """
        self._candidate = candidate

    @property
    def label(self):
        """
        Gets the label of this DiskPoolCreationDescriptor.
        The label string for the new Volume Group.

        :return: The label of this DiskPoolCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this DiskPoolCreationDescriptor.
        The label string for the new Volume Group.

        :param label: The label of this DiskPoolCreationDescriptor.
        :type: str
        """
        self._label = label

    @property
    def pool_utilization_warning_threshold(self):
        """
        Gets the pool_utilization_warning_threshold of this DiskPoolCreationDescriptor.
        The pool utilization warning capacity as a percentage of the total user configurable capacity. A MEL event is generated when the configured capacity exceeds the specified level of the configurable capacity.

        :return: The pool_utilization_warning_threshold of this DiskPoolCreationDescriptor.
        :rtype: int
        :required/optional: required
        """
        return self._pool_utilization_warning_threshold

    @pool_utilization_warning_threshold.setter
    def pool_utilization_warning_threshold(self, pool_utilization_warning_threshold):
        """
        Sets the pool_utilization_warning_threshold of this DiskPoolCreationDescriptor.
        The pool utilization warning capacity as a percentage of the total user configurable capacity. A MEL event is generated when the configured capacity exceeds the specified level of the configurable capacity.

        :param pool_utilization_warning_threshold: The pool_utilization_warning_threshold of this DiskPoolCreationDescriptor.
        :type: int
        """
        self._pool_utilization_warning_threshold = pool_utilization_warning_threshold

    @property
    def pool_utilization_critical_threshold(self):
        """
        Gets the pool_utilization_critical_threshold of this DiskPoolCreationDescriptor.
        The pool utilization critical threshold as a percentage of the total user configurable capacity. A MEL event is generated when the configured capacity exceeds the specified level of the configurable capacity.

        :return: The pool_utilization_critical_threshold of this DiskPoolCreationDescriptor.
        :rtype: int
        :required/optional: required
        """
        return self._pool_utilization_critical_threshold

    @pool_utilization_critical_threshold.setter
    def pool_utilization_critical_threshold(self, pool_utilization_critical_threshold):
        """
        Sets the pool_utilization_critical_threshold of this DiskPoolCreationDescriptor.
        The pool utilization critical threshold as a percentage of the total user configurable capacity. A MEL event is generated when the configured capacity exceeds the specified level of the configurable capacity.

        :param pool_utilization_critical_threshold: The pool_utilization_critical_threshold of this DiskPoolCreationDescriptor.
        :type: int
        """
        self._pool_utilization_critical_threshold = pool_utilization_critical_threshold

    @property
    def degraded_reconstruct_priority(self):
        """
        Gets the degraded_reconstruct_priority of this DiskPoolCreationDescriptor.
        One failed drive degraded reconstruction priority.

        :return: The degraded_reconstruct_priority of this DiskPoolCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._degraded_reconstruct_priority

    @degraded_reconstruct_priority.setter
    def degraded_reconstruct_priority(self, degraded_reconstruct_priority):
        """
        Sets the degraded_reconstruct_priority of this DiskPoolCreationDescriptor.
        One failed drive degraded reconstruction priority.

        :param degraded_reconstruct_priority: The degraded_reconstruct_priority of this DiskPoolCreationDescriptor.
        :type: str
        """
        allowed_values = ["invalid", "lowest", "low", "medium", "high", "highest", "useDefault", "__UNDEFINED"]
        if degraded_reconstruct_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `degraded_reconstruct_priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._degraded_reconstruct_priority = degraded_reconstruct_priority

    @property
    def critical_reconstruct_priority(self):
        """
        Gets the critical_reconstruct_priority of this DiskPoolCreationDescriptor.
        Two failed drive reconstruction critical priority.

        :return: The critical_reconstruct_priority of this DiskPoolCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._critical_reconstruct_priority

    @critical_reconstruct_priority.setter
    def critical_reconstruct_priority(self, critical_reconstruct_priority):
        """
        Sets the critical_reconstruct_priority of this DiskPoolCreationDescriptor.
        Two failed drive reconstruction critical priority.

        :param critical_reconstruct_priority: The critical_reconstruct_priority of this DiskPoolCreationDescriptor.
        :type: str
        """
        allowed_values = ["invalid", "lowest", "low", "medium", "high", "highest", "useDefault", "__UNDEFINED"]
        if critical_reconstruct_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `critical_reconstruct_priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._critical_reconstruct_priority = critical_reconstruct_priority

    @property
    def background_operation_priority(self):
        """
        Gets the background_operation_priority of this DiskPoolCreationDescriptor.
        Priority of other background operations (DVE,DCE,DCR, and IAF).

        :return: The background_operation_priority of this DiskPoolCreationDescriptor.
        :rtype: str
        :required/optional: required
        """
        return self._background_operation_priority

    @background_operation_priority.setter
    def background_operation_priority(self, background_operation_priority):
        """
        Sets the background_operation_priority of this DiskPoolCreationDescriptor.
        Priority of other background operations (DVE,DCE,DCR, and IAF).

        :param background_operation_priority: The background_operation_priority of this DiskPoolCreationDescriptor.
        :type: str
        """
        allowed_values = ["invalid", "lowest", "low", "medium", "high", "highest", "useDefault", "__UNDEFINED"]
        if background_operation_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `background_operation_priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._background_operation_priority = background_operation_priority

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

