# coding: utf-8

"""
FlashCacheAnalyticsItem.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class FlashCacheAnalyticsItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FlashCacheAnalyticsItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cache_size': 'int',  # (required parameter)
            'cache_hit_pct': 'int',  # (required parameter)
            'total_base_writes': 'int',  # (required parameter)
            'total_base_write_latency': 'int',  # (required parameter)
            'total_base_read_latency': 'int',  # (required parameter)
            'total_base_reads': 'int',  # (required parameter)
            'total_flash_cache_reads': 'int',  # (required parameter)
            'total_flash_cache_read_latency': 'int'
        }

        self.attribute_map = {
            'cache_size': 'cacheSize',  # (required parameter)
            'cache_hit_pct': 'cacheHitPct',  # (required parameter)
            'total_base_writes': 'totalBaseWrites',  # (required parameter)
            'total_base_write_latency': 'totalBaseWriteLatency',  # (required parameter)
            'total_base_read_latency': 'totalBaseReadLatency',  # (required parameter)
            'total_base_reads': 'totalBaseReads',  # (required parameter)
            'total_flash_cache_reads': 'totalFlashCacheReads',  # (required parameter)
            'total_flash_cache_read_latency': 'totalFlashCacheReadLatency'
        }

        self._cache_size = None
        self._cache_hit_pct = None
        self._total_base_writes = None
        self._total_base_write_latency = None
        self._total_base_read_latency = None
        self._total_base_reads = None
        self._total_flash_cache_reads = None
        self._total_flash_cache_read_latency = None

    @property
    def cache_size(self):
        """
        Gets the cache_size of this FlashCacheAnalyticsItem.
        The cache size in Gigabytes.

        :return: The cache_size of this FlashCacheAnalyticsItem.
        :rtype: int
        :required/optional: required
        """
        return self._cache_size

    @cache_size.setter
    def cache_size(self, cache_size):
        """
        Sets the cache_size of this FlashCacheAnalyticsItem.
        The cache size in Gigabytes.

        :param cache_size: The cache_size of this FlashCacheAnalyticsItem.
        :type: int
        """
        self._cache_size = cache_size

    @property
    def cache_hit_pct(self):
        """
        Gets the cache_hit_pct of this FlashCacheAnalyticsItem.
        The flash cache hit percentage times 100. This is calculated using totalFlashCacheReads/(totalBaseWrites + totalBaseReads + totalFlashCacheReads).

        :return: The cache_hit_pct of this FlashCacheAnalyticsItem.
        :rtype: int
        :required/optional: required
        """
        return self._cache_hit_pct

    @cache_hit_pct.setter
    def cache_hit_pct(self, cache_hit_pct):
        """
        Sets the cache_hit_pct of this FlashCacheAnalyticsItem.
        The flash cache hit percentage times 100. This is calculated using totalFlashCacheReads/(totalBaseWrites + totalBaseReads + totalFlashCacheReads).

        :param cache_hit_pct: The cache_hit_pct of this FlashCacheAnalyticsItem.
        :type: int
        """
        self._cache_hit_pct = cache_hit_pct

    @property
    def total_base_writes(self):
        """
        Gets the total_base_writes of this FlashCacheAnalyticsItem.
        Host writes sent to volume(s) enabled for flash cache and serviced from either HDD or Primary Cache.

        :return: The total_base_writes of this FlashCacheAnalyticsItem.
        :rtype: int
        :required/optional: required
        """
        return self._total_base_writes

    @total_base_writes.setter
    def total_base_writes(self, total_base_writes):
        """
        Sets the total_base_writes of this FlashCacheAnalyticsItem.
        Host writes sent to volume(s) enabled for flash cache and serviced from either HDD or Primary Cache.

        :param total_base_writes: The total_base_writes of this FlashCacheAnalyticsItem.
        :type: int
        """
        self._total_base_writes = total_base_writes

    @property
    def total_base_write_latency(self):
        """
        Gets the total_base_write_latency of this FlashCacheAnalyticsItem.
        Write latency associated with HDD or DRAM access (in micro-seconds) for the volume(s) enabled for flash cache.

        :return: The total_base_write_latency of this FlashCacheAnalyticsItem.
        :rtype: int
        :required/optional: required
        """
        return self._total_base_write_latency

    @total_base_write_latency.setter
    def total_base_write_latency(self, total_base_write_latency):
        """
        Sets the total_base_write_latency of this FlashCacheAnalyticsItem.
        Write latency associated with HDD or DRAM access (in micro-seconds) for the volume(s) enabled for flash cache.

        :param total_base_write_latency: The total_base_write_latency of this FlashCacheAnalyticsItem.
        :type: int
        """
        self._total_base_write_latency = total_base_write_latency

    @property
    def total_base_read_latency(self):
        """
        Gets the total_base_read_latency of this FlashCacheAnalyticsItem.
        Read latency associated with HDD or DRAM access (in micro-seconds) for the volume(s) enabled for flash cache.

        :return: The total_base_read_latency of this FlashCacheAnalyticsItem.
        :rtype: int
        :required/optional: required
        """
        return self._total_base_read_latency

    @total_base_read_latency.setter
    def total_base_read_latency(self, total_base_read_latency):
        """
        Sets the total_base_read_latency of this FlashCacheAnalyticsItem.
        Read latency associated with HDD or DRAM access (in micro-seconds) for the volume(s) enabled for flash cache.

        :param total_base_read_latency: The total_base_read_latency of this FlashCacheAnalyticsItem.
        :type: int
        """
        self._total_base_read_latency = total_base_read_latency

    @property
    def total_base_reads(self):
        """
        Gets the total_base_reads of this FlashCacheAnalyticsItem.
        Host reads sent to volume(s) enabled for flash cache and serviced from either HDD or Primary Cache.

        :return: The total_base_reads of this FlashCacheAnalyticsItem.
        :rtype: int
        :required/optional: required
        """
        return self._total_base_reads

    @total_base_reads.setter
    def total_base_reads(self, total_base_reads):
        """
        Sets the total_base_reads of this FlashCacheAnalyticsItem.
        Host reads sent to volume(s) enabled for flash cache and serviced from either HDD or Primary Cache.

        :param total_base_reads: The total_base_reads of this FlashCacheAnalyticsItem.
        :type: int
        """
        self._total_base_reads = total_base_reads

    @property
    def total_flash_cache_reads(self):
        """
        Gets the total_flash_cache_reads of this FlashCacheAnalyticsItem.
        Host reads sent to volume(s) enabled for flash cache and serviced from flash cache (SSD or Primary Cache).

        :return: The total_flash_cache_reads of this FlashCacheAnalyticsItem.
        :rtype: int
        :required/optional: required
        """
        return self._total_flash_cache_reads

    @total_flash_cache_reads.setter
    def total_flash_cache_reads(self, total_flash_cache_reads):
        """
        Sets the total_flash_cache_reads of this FlashCacheAnalyticsItem.
        Host reads sent to volume(s) enabled for flash cache and serviced from flash cache (SSD or Primary Cache).

        :param total_flash_cache_reads: The total_flash_cache_reads of this FlashCacheAnalyticsItem.
        :type: int
        """
        self._total_flash_cache_reads = total_flash_cache_reads

    @property
    def total_flash_cache_read_latency(self):
        """
        Gets the total_flash_cache_read_latency of this FlashCacheAnalyticsItem.
        Read latency associated with flash cache access (in micro-seconds) for the volume(s) enabled for flash cache.

        :return: The total_flash_cache_read_latency of this FlashCacheAnalyticsItem.
        :rtype: int
        :required/optional: required
        """
        return self._total_flash_cache_read_latency

    @total_flash_cache_read_latency.setter
    def total_flash_cache_read_latency(self, total_flash_cache_read_latency):
        """
        Sets the total_flash_cache_read_latency of this FlashCacheAnalyticsItem.
        Read latency associated with flash cache access (in micro-seconds) for the volume(s) enabled for flash cache.

        :param total_flash_cache_read_latency: The total_flash_cache_read_latency of this FlashCacheAnalyticsItem.
        :type: int
        """
        self._total_flash_cache_read_latency = total_flash_cache_read_latency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

