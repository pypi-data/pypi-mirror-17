# coding: utf-8

"""
IOInterfaceTypeData.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class IOInterfaceTypeData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IOInterfaceTypeData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'interface_type': 'str',  # (required parameter)
            'fibre': 'FibreInterface',  
            'ib': 'IbInterface',  
            'iscsi': 'IscsiInterface',  
            'sas': 'SasInterface',  
            'sata': 'SATAInterface',  
            'scsi': 'SCSIInterface'
        }

        self.attribute_map = {
            'interface_type': 'interfaceType',  # (required parameter)
            'fibre': 'fibre',  
            'ib': 'ib',  
            'iscsi': 'iscsi',  
            'sas': 'sas',  
            'sata': 'sata',  
            'scsi': 'scsi'
        }

        self._interface_type = None
        self._fibre = None
        self._ib = None
        self._iscsi = None
        self._sas = None
        self._sata = None
        self._scsi = None

    @property
    def interface_type(self):
        """
        Gets the interface_type of this IOInterfaceTypeData.
        This enumeration defines the different I/O interface types that may be reported as part of the configuration information associated with a controller.

        :return: The interface_type of this IOInterfaceTypeData.
        :rtype: str
        :required/optional: required
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type):
        """
        Sets the interface_type of this IOInterfaceTypeData.
        This enumeration defines the different I/O interface types that may be reported as part of the configuration information associated with a controller.

        :param interface_type: The interface_type of this IOInterfaceTypeData.
        :type: str
        """
        allowed_values = ["notImplemented", "scsi", "fc", "sata", "sas", "iscsi", "ib", "fcoe", "__UNDEFINED"]
        if interface_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interface_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._interface_type = interface_type

    @property
    def fibre(self):
        """
        Gets the fibre of this IOInterfaceTypeData.
        This field is present only if the interfaceType value is equal to IO_IF_FC. It contains the detailed interface information for a Fibre Channel I/O interface.

        :return: The fibre of this IOInterfaceTypeData.
        :rtype: FibreInterface
        :required/optional: optional
        """
        return self._fibre

    @fibre.setter
    def fibre(self, fibre):
        """
        Sets the fibre of this IOInterfaceTypeData.
        This field is present only if the interfaceType value is equal to IO_IF_FC. It contains the detailed interface information for a Fibre Channel I/O interface.

        :param fibre: The fibre of this IOInterfaceTypeData.
        :type: FibreInterface
        """
        self._fibre = fibre

    @property
    def ib(self):
        """
        Gets the ib of this IOInterfaceTypeData.
        This field is present only if the interfaceType value is equal to IO_IF_IB. It contains the detailed interface information for an Infiniband interface.

        :return: The ib of this IOInterfaceTypeData.
        :rtype: IbInterface
        :required/optional: optional
        """
        return self._ib

    @ib.setter
    def ib(self, ib):
        """
        Sets the ib of this IOInterfaceTypeData.
        This field is present only if the interfaceType value is equal to IO_IF_IB. It contains the detailed interface information for an Infiniband interface.

        :param ib: The ib of this IOInterfaceTypeData.
        :type: IbInterface
        """
        self._ib = ib

    @property
    def iscsi(self):
        """
        Gets the iscsi of this IOInterfaceTypeData.
        This field is present only if the interface type value is equal to IO_IF_ISCSI. It contains the detailed interface information for an iSCSI I/O interface.

        :return: The iscsi of this IOInterfaceTypeData.
        :rtype: IscsiInterface
        :required/optional: optional
        """
        return self._iscsi

    @iscsi.setter
    def iscsi(self, iscsi):
        """
        Sets the iscsi of this IOInterfaceTypeData.
        This field is present only if the interface type value is equal to IO_IF_ISCSI. It contains the detailed interface information for an iSCSI I/O interface.

        :param iscsi: The iscsi of this IOInterfaceTypeData.
        :type: IscsiInterface
        """
        self._iscsi = iscsi

    @property
    def sas(self):
        """
        Gets the sas of this IOInterfaceTypeData.
        This field is present only if the interfaceType value is equal to IO_IF_SAS. It contains the detailed interface information for a serial-attached SCSI I/O interface.

        :return: The sas of this IOInterfaceTypeData.
        :rtype: SasInterface
        :required/optional: optional
        """
        return self._sas

    @sas.setter
    def sas(self, sas):
        """
        Sets the sas of this IOInterfaceTypeData.
        This field is present only if the interfaceType value is equal to IO_IF_SAS. It contains the detailed interface information for a serial-attached SCSI I/O interface.

        :param sas: The sas of this IOInterfaceTypeData.
        :type: SasInterface
        """
        self._sas = sas

    @property
    def sata(self):
        """
        Gets the sata of this IOInterfaceTypeData.
        This field is present only if the interfaceType value is equal to IO_IF_SATA. It contains the detailed interface information for a SATA I/O interface.

        :return: The sata of this IOInterfaceTypeData.
        :rtype: SATAInterface
        :required/optional: optional
        """
        return self._sata

    @sata.setter
    def sata(self, sata):
        """
        Sets the sata of this IOInterfaceTypeData.
        This field is present only if the interfaceType value is equal to IO_IF_SATA. It contains the detailed interface information for a SATA I/O interface.

        :param sata: The sata of this IOInterfaceTypeData.
        :type: SATAInterface
        """
        self._sata = sata

    @property
    def scsi(self):
        """
        Gets the scsi of this IOInterfaceTypeData.
        This field is present only if the interfaceType value is equal to IO_IF_SCSI. It contains the detailed interface information for a SCSI I/O interface.

        :return: The scsi of this IOInterfaceTypeData.
        :rtype: SCSIInterface
        :required/optional: optional
        """
        return self._scsi

    @scsi.setter
    def scsi(self, scsi):
        """
        Sets the scsi of this IOInterfaceTypeData.
        This field is present only if the interfaceType value is equal to IO_IF_SCSI. It contains the detailed interface information for a SCSI I/O interface.

        :param scsi: The scsi of this IOInterfaceTypeData.
        :type: SCSIInterface
        """
        self._scsi = scsi

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

