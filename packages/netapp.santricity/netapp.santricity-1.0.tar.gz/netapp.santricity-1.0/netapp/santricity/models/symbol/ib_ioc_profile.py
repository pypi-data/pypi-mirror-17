# coding: utf-8

"""
IbIocProfile.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class IbIocProfile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IbIocProfile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ioc_guid': 'str',  # (required parameter)
            'vendor_id': 'str',  # (required parameter)
            'io_device_id': 'int',  # (required parameter)
            'device_version': 'int',  # (required parameter)
            'subsystem_vendor_id': 'str',  # (required parameter)
            'subsystem_id': 'int',  # (required parameter)
            'io_class': 'int',  # (required parameter)
            'io_subclass': 'int',  # (required parameter)
            'protocol': 'int',  # (required parameter)
            'protocol_version': 'int',  # (required parameter)
            'send_message_queue_depth': 'int',  # (required parameter)
            'rdma_read_queue_depth': 'int',  # (required parameter)
            'send_message_size': 'int',  # (required parameter)
            'rdma_transfer_size': 'int',  # (required parameter)
            'controller_ops_capability_mask': 'int',  # (required parameter)
            'service_entries': 'int',  # (required parameter)
            'id_string': 'str'
        }

        self.attribute_map = {
            'ioc_guid': 'iocGuid',  # (required parameter)
            'vendor_id': 'vendorId',  # (required parameter)
            'io_device_id': 'ioDeviceId',  # (required parameter)
            'device_version': 'deviceVersion',  # (required parameter)
            'subsystem_vendor_id': 'subsystemVendorId',  # (required parameter)
            'subsystem_id': 'subsystemId',  # (required parameter)
            'io_class': 'ioClass',  # (required parameter)
            'io_subclass': 'ioSubclass',  # (required parameter)
            'protocol': 'protocol',  # (required parameter)
            'protocol_version': 'protocolVersion',  # (required parameter)
            'send_message_queue_depth': 'sendMessageQueueDepth',  # (required parameter)
            'rdma_read_queue_depth': 'rdmaReadQueueDepth',  # (required parameter)
            'send_message_size': 'sendMessageSize',  # (required parameter)
            'rdma_transfer_size': 'rdmaTransferSize',  # (required parameter)
            'controller_ops_capability_mask': 'controllerOpsCapabilityMask',  # (required parameter)
            'service_entries': 'serviceEntries',  # (required parameter)
            'id_string': 'idString'
        }

        self._ioc_guid = None
        self._vendor_id = None
        self._io_device_id = None
        self._device_version = None
        self._subsystem_vendor_id = None
        self._subsystem_id = None
        self._io_class = None
        self._io_subclass = None
        self._protocol = None
        self._protocol_version = None
        self._send_message_queue_depth = None
        self._rdma_read_queue_depth = None
        self._send_message_size = None
        self._rdma_transfer_size = None
        self._controller_ops_capability_mask = None
        self._service_entries = None
        self._id_string = None

    @property
    def ioc_guid(self):
        """
        Gets the ioc_guid of this IbIocProfile.
        The EUI-64 GUID used to uniquely identify the I/O controller.

        :return: The ioc_guid of this IbIocProfile.
        :rtype: str
        :required/optional: required
        """
        return self._ioc_guid

    @ioc_guid.setter
    def ioc_guid(self, ioc_guid):
        """
        Sets the ioc_guid of this IbIocProfile.
        The EUI-64 GUID used to uniquely identify the I/O controller.

        :param ioc_guid: The ioc_guid of this IbIocProfile.
        :type: str
        """
        self._ioc_guid = ioc_guid

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this IbIocProfile.
        The I/O controller vendor ID in IEEE format.

        :return: The vendor_id of this IbIocProfile.
        :rtype: str
        :required/optional: required
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this IbIocProfile.
        The I/O controller vendor ID in IEEE format.

        :param vendor_id: The vendor_id of this IbIocProfile.
        :type: str
        """
        self._vendor_id = vendor_id

    @property
    def io_device_id(self):
        """
        Gets the io_device_id of this IbIocProfile.
        A number assigned by vendor to identify the type of I/O controller

        :return: The io_device_id of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._io_device_id

    @io_device_id.setter
    def io_device_id(self, io_device_id):
        """
        Sets the io_device_id of this IbIocProfile.
        A number assigned by vendor to identify the type of I/O controller

        :param io_device_id: The io_device_id of this IbIocProfile.
        :type: int
        """
        self._io_device_id = io_device_id

    @property
    def device_version(self):
        """
        Gets the device_version of this IbIocProfile.
        A number assigned by the vendor to identify the device version.

        :return: The device_version of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._device_version

    @device_version.setter
    def device_version(self, device_version):
        """
        Sets the device_version of this IbIocProfile.
        A number assigned by the vendor to identify the device version.

        :param device_version: The device_version of this IbIocProfile.
        :type: int
        """
        self._device_version = device_version

    @property
    def subsystem_vendor_id(self):
        """
        Gets the subsystem_vendor_id of this IbIocProfile.
        The ID of the enclosure vendor in IEEE format, or else all zeros if there is no vendor ID.

        :return: The subsystem_vendor_id of this IbIocProfile.
        :rtype: str
        :required/optional: required
        """
        return self._subsystem_vendor_id

    @subsystem_vendor_id.setter
    def subsystem_vendor_id(self, subsystem_vendor_id):
        """
        Sets the subsystem_vendor_id of this IbIocProfile.
        The ID of the enclosure vendor in IEEE format, or else all zeros if there is no vendor ID.

        :param subsystem_vendor_id: The subsystem_vendor_id of this IbIocProfile.
        :type: str
        """
        self._subsystem_vendor_id = subsystem_vendor_id

    @property
    def subsystem_id(self):
        """
        Gets the subsystem_id of this IbIocProfile.
        A number identifying the subsystem where the I/O controller resides.

        :return: The subsystem_id of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._subsystem_id

    @subsystem_id.setter
    def subsystem_id(self, subsystem_id):
        """
        Sets the subsystem_id of this IbIocProfile.
        A number identifying the subsystem where the I/O controller resides.

        :param subsystem_id: The subsystem_id of this IbIocProfile.
        :type: int
        """
        self._subsystem_id = subsystem_id

    @property
    def io_class(self):
        """
        Gets the io_class of this IbIocProfile.
        The I/O class of the controller. 0x0000 -0xFFFE is reserved for I/O classes encompassed by the InfiniBand architecture. 0xFFFF is vendor-specific.

        :return: The io_class of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._io_class

    @io_class.setter
    def io_class(self, io_class):
        """
        Sets the io_class of this IbIocProfile.
        The I/O class of the controller. 0x0000 -0xFFFE is reserved for I/O classes encompassed by the InfiniBand architecture. 0xFFFF is vendor-specific.

        :param io_class: The io_class of this IbIocProfile.
        :type: int
        """
        self._io_class = io_class

    @property
    def io_subclass(self):
        """
        Gets the io_subclass of this IbIocProfile.
        The I/O sub-class of the controller. 0x0000 -0xFFFE is reserved for I/O sub-classes encompassed by the InfiniBand architecture. 0xFFFF is vendor-specific.

        :return: The io_subclass of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._io_subclass

    @io_subclass.setter
    def io_subclass(self, io_subclass):
        """
        Sets the io_subclass of this IbIocProfile.
        The I/O sub-class of the controller. 0x0000 -0xFFFE is reserved for I/O sub-classes encompassed by the InfiniBand architecture. 0xFFFF is vendor-specific.

        :param io_subclass: The io_subclass of this IbIocProfile.
        :type: int
        """
        self._io_subclass = io_subclass

    @property
    def protocol(self):
        """
        Gets the protocol of this IbIocProfile.
        The I/O protocol of the controller. 0x0000 -0xFFFE is reserved for I/O protocols encompassed by the InfiniBand architecture. 0xFFFF is vendor-specific.

        :return: The protocol of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this IbIocProfile.
        The I/O protocol of the controller. 0x0000 -0xFFFE is reserved for I/O protocols encompassed by the InfiniBand architecture. 0xFFFF is vendor-specific.

        :param protocol: The protocol of this IbIocProfile.
        :type: int
        """
        self._protocol = protocol

    @property
    def protocol_version(self):
        """
        Gets the protocol_version of this IbIocProfile.
        The protocol version (protocol-specific).

        :return: The protocol_version of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """
        Sets the protocol_version of this IbIocProfile.
        The protocol version (protocol-specific).

        :param protocol_version: The protocol_version of this IbIocProfile.
        :type: int
        """
        self._protocol_version = protocol_version

    @property
    def send_message_queue_depth(self):
        """
        Gets the send_message_queue_depth of this IbIocProfile.
        The maximum depth of the Send Message Queue.

        :return: The send_message_queue_depth of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._send_message_queue_depth

    @send_message_queue_depth.setter
    def send_message_queue_depth(self, send_message_queue_depth):
        """
        Sets the send_message_queue_depth of this IbIocProfile.
        The maximum depth of the Send Message Queue.

        :param send_message_queue_depth: The send_message_queue_depth of this IbIocProfile.
        :type: int
        """
        self._send_message_queue_depth = send_message_queue_depth

    @property
    def rdma_read_queue_depth(self):
        """
        Gets the rdma_read_queue_depth of this IbIocProfile.
        The maximum depth of the per-channel RDMA Read Queue

        :return: The rdma_read_queue_depth of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._rdma_read_queue_depth

    @rdma_read_queue_depth.setter
    def rdma_read_queue_depth(self, rdma_read_queue_depth):
        """
        Sets the rdma_read_queue_depth of this IbIocProfile.
        The maximum depth of the per-channel RDMA Read Queue

        :param rdma_read_queue_depth: The rdma_read_queue_depth of this IbIocProfile.
        :type: int
        """
        self._rdma_read_queue_depth = rdma_read_queue_depth

    @property
    def send_message_size(self):
        """
        Gets the send_message_size of this IbIocProfile.
        The maximum size of Send Messages in bytes.

        :return: The send_message_size of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._send_message_size

    @send_message_size.setter
    def send_message_size(self, send_message_size):
        """
        Sets the send_message_size of this IbIocProfile.
        The maximum size of Send Messages in bytes.

        :param send_message_size: The send_message_size of this IbIocProfile.
        :type: int
        """
        self._send_message_size = send_message_size

    @property
    def rdma_transfer_size(self):
        """
        Gets the rdma_transfer_size of this IbIocProfile.
        The maximum size of outbound RDMA transfers initiated by the controller.

        :return: The rdma_transfer_size of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._rdma_transfer_size

    @rdma_transfer_size.setter
    def rdma_transfer_size(self, rdma_transfer_size):
        """
        Sets the rdma_transfer_size of this IbIocProfile.
        The maximum size of outbound RDMA transfers initiated by the controller.

        :param rdma_transfer_size: The rdma_transfer_size of this IbIocProfile.
        :type: int
        """
        self._rdma_transfer_size = rdma_transfer_size

    @property
    def controller_ops_capability_mask(self):
        """
        Gets the controller_ops_capability_mask of this IbIocProfile.
        Supported operation types of this controller.: Bit 0 on = Send Messages to IOCs Bit 1 on = Send Messages from IOCs Bit 2 on = RDMA Read Requests to IOCs Bit 3 on = RDMA Read Requests from IOCs Bit 4 on = RDMA Write Requests to IOCs Bit 5 on = RDMA Write Requests from IOCs Bit 6 on = Atomic operations to IOCs Bit 7 on = Atomic operations from IOCs

        :return: The controller_ops_capability_mask of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._controller_ops_capability_mask

    @controller_ops_capability_mask.setter
    def controller_ops_capability_mask(self, controller_ops_capability_mask):
        """
        Sets the controller_ops_capability_mask of this IbIocProfile.
        Supported operation types of this controller.: Bit 0 on = Send Messages to IOCs Bit 1 on = Send Messages from IOCs Bit 2 on = RDMA Read Requests to IOCs Bit 3 on = RDMA Read Requests from IOCs Bit 4 on = RDMA Write Requests to IOCs Bit 5 on = RDMA Write Requests from IOCs Bit 6 on = Atomic operations to IOCs Bit 7 on = Atomic operations from IOCs

        :param controller_ops_capability_mask: The controller_ops_capability_mask of this IbIocProfile.
        :type: int
        """
        self._controller_ops_capability_mask = controller_ops_capability_mask

    @property
    def service_entries(self):
        """
        Gets the service_entries of this IbIocProfile.
        The number of entries in the service entries table

        :return: The service_entries of this IbIocProfile.
        :rtype: int
        :required/optional: required
        """
        return self._service_entries

    @service_entries.setter
    def service_entries(self, service_entries):
        """
        Sets the service_entries of this IbIocProfile.
        The number of entries in the service entries table

        :param service_entries: The service_entries of this IbIocProfile.
        :type: int
        """
        self._service_entries = service_entries

    @property
    def id_string(self):
        """
        Gets the id_string of this IbIocProfile.
        A UTF-8 encoded string for identifying the controller to user.

        :return: The id_string of this IbIocProfile.
        :rtype: str
        :required/optional: required
        """
        return self._id_string

    @id_string.setter
    def id_string(self, id_string):
        """
        Sets the id_string of this IbIocProfile.
        A UTF-8 encoded string for identifying the controller to user.

        :param id_string: The id_string of this IbIocProfile.
        :type: str
        """
        self._id_string = id_string

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

