#!python
# -*- coding: utf-8 -*-

import os
import jinja2
import random
import string
from infrasim import run_command, CommandNotFound, CommandRunFailed
from infrasim.socat import get_socat
from infrasim.ipmi import get_ipmi
from infrasim.qemu import get_qemu
import netifaces

INFRASIM_TEMP_CONF = "/usr/local/infrasim/template/infrasim.yml"
INFRASIM_CONF = os.environ['HOME'] + "/.infrasim/etc/infrasim.yml"

mac_base = "00:60:16:"


def create_mac_address():
    macs = []
    for i in range(0, 3):
        macs.append(''.join(random.SystemRandom().choice("abcdef" + string.digits) for _ in range(2)))
    return mac_base + ":".join([macs[0], macs[1], macs[2]])


def create_infrasim_directories():
    if os.path.exists(os.environ['HOME'] + '/.infrasim') is False:
        os.mkdir(os.environ['HOME'] + "/.infrasim")
    else:
        os.system("rm -rf " + os.environ['HOME'] + "/.infrasim")
        os.mkdir(os.environ['HOME'] + "/.infrasim")
    os.mkdir(os.environ['HOME'] + "/.infrasim/data")
    os.mkdir(os.environ['HOME'] + "/.infrasim/etc")

    if os.path.exists("/etc/infrasim") is False:
        os.mkdir("/etc/infrasim")
    else:
        os.system("rm -rf /etc/infrasim")
        os.mkdir("/etc/infrasim")

    if os.path.exists("/etc/qemu") is False:
        os.mkdir("/etc/qemu")
    else:
        os.system("rm -rf /etc/qemu")
        os.mkdir("/etc/qemu")

    if os.path.exists('/usr/local/libexec') is False:
        os.mkdir("/usr/local/libexec")
    else:
        os.system("rm -rf /usr/local/libexec")
        os.mkdir("/usr/local/libexec")

    if os.path.exists("/var/log/infrasim") is False:
        os.mkdir("/var/log/infrasim")
    else:
        os.system("rm -rf /var/log/infrasim")
        os.mkdir("/var/log/infrasim")


def create_infrasim_conf():

    # Prepare default network
    networks = []
    nics_list = netifaces.interfaces()
    eth_nic = filter(lambda x: 'e' in x, nics_list)[0]
    mac = create_mac_address()
    networks.append({"nic": eth_nic, "mac": mac})

    # Prepare default disk
    disks = []
    disks.append({"size": 8})

    # Render infrasim.yml
    infrasim_conf = ""
    with open(INFRASIM_TEMP_CONF, "r") as f:
        infrasim_conf = f.read()
    template = jinja2.Template(infrasim_conf)
    infrasim_conf = template.render(disks=disks, networks=networks)
    with open(INFRASIM_CONF, "w") as f:
        f.write(infrasim_conf)
    os.system("ln -sf {} /etc/infrasim/infrasim.yml".format(INFRASIM_CONF))

def prepare_libraries():
    run_command("sudo /usr/local/bin/package_install.sh", True, None, None)
    run_command("ldconfig")


def prepare_seabios():
    run_command('echo "allow br0" > /etc/qemu/bridge.conf')

if __name__ == "__main__":
    try:
        create_infrasim_directories()
        prepare_libraries()
        create_infrasim_conf()
        prepare_seabios()
        get_socat()
        get_ipmi()
        get_qemu()
        print "Infrasim init OK"
    except CommandNotFound as e:
        print "command:{} not found\n" \
              "Infrasim init failed".format(e.value)
    except CommandRunFailed as e:
        print "command:{} run failed\n" \
              "Infrasim init failed".format(e.value)

