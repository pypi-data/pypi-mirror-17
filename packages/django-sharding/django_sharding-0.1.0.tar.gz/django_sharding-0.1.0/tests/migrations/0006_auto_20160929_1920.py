# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-29 23:20
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import django_sharding_library.fields
import django_sharding_library.id_generation_strategies
import tests.models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('tests', '0005_remove_unshardedtestmodel_more_random_string'),
    ]

    operations = [
        migrations.CreateModel(
            name='PostgresCustomIDModelBackupField',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('stub', models.NullBooleanField(default=True, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PostgresShardUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('shard', models.CharField(blank=True, choices=[(b'app_shard_001', b'app_shard_001'), (b'app_shard_002', b'app_shard_002'), (b'app_shard_003', b'app_shard_003'), (b'app_shard_004', b'app_shard_004')], max_length=120, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterField(
            model_name='postgrescustomidmodel',
            name='id',
            field=django_sharding_library.fields.TableShardedIDField(primary_key=True, serialize=False, source_table=tests.models.PostgresCustomIDModelBackupField, strategy=django_sharding_library.id_generation_strategies.TableStrategy(backing_model=tests.models.PostgresCustomIDModelBackupField)),
        ),
        migrations.AlterField(
            model_name='shardstoragetable',
            name='shard',
            field=models.CharField(choices=[(b'app_shard_001', b'app_shard_001'), (b'app_shard_002', b'app_shard_002'), (b'app_shard_003', b'app_shard_003'), (b'app_shard_004', b'app_shard_004')], max_length=120),
        ),
        migrations.AlterField(
            model_name='user',
            name='shard',
            field=models.CharField(blank=True, choices=[(b'app_shard_001', b'app_shard_001'), (b'app_shard_002', b'app_shard_002'), (b'app_shard_003', b'app_shard_003'), (b'app_shard_004', b'app_shard_004')], max_length=120, null=True),
        ),
    ]
